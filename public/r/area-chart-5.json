{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "area-chart-5",
  "type": "registry:block",
  "dependencies": ["recharts@2.15.1", "clsx", "tailwind-merge", "class-variance-authority", "recharts", "radix-ui"],
  "registryDependencies": [
    "https://reui.io/r/card.json",
    "https://reui.io/r/chart.json",
    "https://reui.io/r/toggle-group.json"
  ],
  "files": [
    {
      "path": "registry/default/blocks/charts/area-charts/area-chart-5.tsx",
      "content": "'use client';\n\nimport React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardHeading, CardTitle, CardToolbar } from '@/registry/default/ui/card';\nimport { ChartConfig, ChartContainer, ChartTooltip } from '@/registry/default/ui/chart';\nimport { ToggleGroup, ToggleGroupItem } from '@/registry/default/ui/toggle-group';\nimport { Area, ComposedChart, Line, XAxis, YAxis } from 'recharts';\n\n// DeFi protocol financial data\nconst financeData = {\n  day: [\n    { month: '00:00', totalDeposits: 4.2, totalBorrowed: 3.1 },\n    { month: '04:00', totalDeposits: 4.3, totalBorrowed: 3.2 },\n    { month: '08:00', totalDeposits: 4.5, totalBorrowed: 3.3 },\n    { month: '12:00', totalDeposits: 4.7, totalBorrowed: 3.3 },\n    { month: '16:00', totalDeposits: 4.6, totalBorrowed: 3.2 },\n    { month: '20:00', totalDeposits: 4.4, totalBorrowed: 3.1 },\n  ],\n  week: [\n    { month: 'Mon', totalDeposits: 4.2, totalBorrowed: 3.1 },\n    { month: 'Tue', totalDeposits: 4.3, totalBorrowed: 3.2 },\n    { month: 'Wed', totalDeposits: 4.5, totalBorrowed: 3.3 },\n    { month: 'Thu', totalDeposits: 4.7, totalBorrowed: 3.3 },\n    { month: 'Fri', totalDeposits: 4.6, totalBorrowed: 3.2 },\n    { month: 'Sat', totalDeposits: 4.4, totalBorrowed: 3.1 },\n    { month: 'Sun', totalDeposits: 4.3, totalBorrowed: 3.0 },\n  ],\n  month: [\n    { month: 'Jun', totalDeposits: 4.2, totalBorrowed: 3.1 },\n    { month: 'Jul', totalDeposits: 4.0, totalBorrowed: 2.9 },\n    { month: 'Aug', totalDeposits: 4.1, totalBorrowed: 3.0 },\n    { month: 'Sep', totalDeposits: 4.3, totalBorrowed: 3.1 },\n    { month: 'Oct', totalDeposits: 4.5, totalBorrowed: 3.2 },\n    { month: 'Nov', totalDeposits: 4.7, totalBorrowed: 3.3 },\n    { month: 'Dec', totalDeposits: 4.6, totalBorrowed: 3.2 },\n    { month: 'Jan', totalDeposits: 4.4, totalBorrowed: 3.1 },\n    { month: 'Feb', totalDeposits: 4.3, totalBorrowed: 3.0 },\n    { month: 'Mar', totalDeposits: 4.5, totalBorrowed: 3.2 },\n    { month: 'Apr', totalDeposits: 4.8, totalBorrowed: 3.4 },\n    { month: 'May', totalDeposits: 4.7, totalBorrowed: 3.3 },\n  ],\n};\n\nconst chartConfig = {\n  totalDeposits: {\n    label: 'Total Deposits',\n    color: 'hsl(264, 82%, 70%)',\n  },\n  totalBorrowed: {\n    label: 'Total Borrowed',\n    color: 'hsl(172, 82%, 60%)',\n  },\n} satisfies ChartConfig;\n\n// Custom Tooltip\ninterface TooltipProps {\n  active?: boolean;\n  payload?: Array<{\n    dataKey: string;\n    value: number;\n    color: string;\n  }>;\n  label?: string;\n}\n\nconst CustomTooltip = ({ active, payload, label }: TooltipProps) => {\n  if (active && payload && payload.length) {\n    // Filter to unique dataKeys to avoid duplicates from Area + Line components\n    const uniquePayload = payload.filter(\n      (entry, index, self) => index === self.findIndex((item) => item.dataKey === entry.dataKey),\n    );\n\n    return (\n      <div className=\"rounded-lg bg-zinc-800 border border-zinc-700 text-white p-3 shadow-lg\">\n        <div className=\"text-xs text-zinc-400 mb-2\">{label}</div>\n        {uniquePayload.map((entry, index) => (\n          <div key={index} className=\"flex items-center gap-2 mb-1\">\n            <div className=\"w-2 h-2 rounded-full\" style={{ backgroundColor: entry.color }} />\n            <span className=\"text-sm text-zinc-300\">\n              {entry.dataKey === 'totalDeposits' ? 'Total Deposits' : 'Total Borrowed'}:\n            </span>\n            <span className=\"font-semibold\">${entry.value.toFixed(2)}M</span>\n          </div>\n        ))}\n      </div>\n    );\n  }\n  return null;\n};\n\n// Period configuration\nconst PERIODS = {\n  day: { key: 'day', label: 'Day' },\n  week: { key: 'week', label: 'Week' },\n  month: { key: 'month', label: 'Month' },\n} as const;\n\ntype PeriodKey = keyof typeof PERIODS;\n\nexport default function AreaChart5() {\n  const [selectedPeriod, setSelectedPeriod] = useState<PeriodKey>('month');\n\n  // Get data for selected period\n  const currentData = financeData[selectedPeriod];\n\n  // Calculate total values\n  const latestData = currentData[currentData.length - 1];\n  const totalValueLocked = latestData.totalDeposits + latestData.totalBorrowed;\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-6 lg:p-8\">\n      <Card className=\"w-full rounded-3xl lg:max-w-4xl bg-zinc-950 border-zinc-800 text-white\">\n        <CardHeader className=\"min-h-auto gap-5 p-8 border-0\">\n          <CardHeading className=\"flex flex-wrap items-end gap-5\">\n            <div className=\"min-w-40 space-y-0.5 me-2.5\">\n              <div className=\"text-sm text-zinc-400 mb-1\">Total Value Locked</div>\n              <div className=\"text-3xl leading-none font-bold\">${(totalValueLocked * 1000).toLocaleString()}.15</div>\n            </div>\n            <div className=\"flex items-center flex-wrap gap-2.5 mb-1.5\">\n              <div className=\"space-y-0.5 pe-10\">\n                <div\n                  className=\"text-[11px] font-normal flex items-center gap-1.5\"\n                  style={{ color: chartConfig.totalDeposits.color }}\n                >\n                  <div\n                    className=\"size-1.5 rounded-full \"\n                    style={{ backgroundColor: chartConfig.totalDeposits.color }}\n                  />\n                  Total Deposits\n                </div>\n                <div className=\"text-xl font-bold leading-none\">\n                  ${(latestData.totalDeposits * 1000).toLocaleString()}.43\n                </div>\n              </div>\n\n              <div className=\"space-y-0.5\">\n                <div\n                  className=\"text-[11px] font-normal flex items-center gap-1.5\"\n                  style={{ color: chartConfig.totalBorrowed.color }}\n                >\n                  <div\n                    className=\"size-1.5 rounded-full \"\n                    style={{ backgroundColor: chartConfig.totalBorrowed.color }}\n                  />\n                  Total Borrowed\n                </div>\n                <div className=\"text-xl font-bold leading-none\">\n                  ${(latestData.totalBorrowed * 1000).toLocaleString()}.15\n                </div>\n              </div>\n            </div>\n          </CardHeading>\n          <CardToolbar>\n            <ToggleGroup\n              type=\"single\"\n              value={selectedPeriod}\n              onValueChange={(value) => value && setSelectedPeriod(value as PeriodKey)}\n              className=\"bg-zinc-800 p-1 rounded-full\"\n            >\n              {Object.values(PERIODS).map((period) => (\n                <ToggleGroupItem\n                  key={period.key}\n                  value={period.key}\n                  className=\"px-4 py-2 text-sm data-[state=on]:bg-zinc-700 data-[state=on]:text-white text-zinc-400 hover:bg-zinc-700 hover:text-white rounded-full\"\n                >\n                  {period.label}\n                </ToggleGroupItem>\n              ))}\n            </ToggleGroup>\n          </CardToolbar>\n        </CardHeader>\n\n        <CardContent className=\"ps-2.5 pe-4.5\">\n          <div className=\"h-[400px] w-full\">\n            <ChartContainer\n              config={chartConfig}\n              className=\"h-full w-full overflow-visible [&_.recharts-curve.recharts-tooltip-cursor]:stroke-initial\"\n            >\n              <ComposedChart\n                data={currentData}\n                margin={{\n                  top: 25,\n                  right: 25,\n                  left: 15,\n                  bottom: 25,\n                }}\n                style={{ overflow: 'visible' }}\n              >\n                <defs>\n                  {/* Grid pattern */}\n                  <pattern id=\"gridPattern\" x=\"0\" y=\"0\" width=\"30\" height=\"30\" patternUnits=\"userSpaceOnUse\">\n                    <path\n                      d=\"M 30 0 L 0 0 0 30\"\n                      fill=\"none\"\n                      stroke=\"rgb(51 65 85)\"\n                      strokeWidth=\"0.5\"\n                      strokeOpacity=\"0.3\"\n                    />\n                  </pattern>\n\n                  {/* Linear gradients for areas */}\n                  <linearGradient id=\"depositsAreaGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"0%\" stopColor={chartConfig.totalDeposits.color} stopOpacity=\"0.3\" />\n                    <stop offset=\"100%\" stopColor={chartConfig.totalDeposits.color} stopOpacity=\"0.02\" />\n                  </linearGradient>\n\n                  <linearGradient id=\"borrowedAreaGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"0%\" stopColor={chartConfig.totalBorrowed.color} stopOpacity=\"0.3\" />\n                    <stop offset=\"100%\" stopColor={chartConfig.totalBorrowed.color} stopOpacity=\"0.02\" />\n                  </linearGradient>\n\n                  {/* Shadow filters for dots */}\n                  <filter id=\"dotShadow\" x=\"-100%\" y=\"-100%\" width=\"300%\" height=\"300%\">\n                    <feDropShadow dx=\"2\" dy=\"2\" stdDeviation=\"3\" floodColor=\"rgba(0,0,0,0.4)\" />\n                  </filter>\n                  <filter id=\"activeDotShadow\" x=\"-100%\" y=\"-100%\" width=\"300%\" height=\"300%\">\n                    <feDropShadow dx=\"3\" dy=\"4\" stdDeviation=\"6\" floodColor=\"rgba(0,0,0,0.6)\" />\n                  </filter>\n                </defs>\n\n                {/* Background grid */}\n                <rect\n                  x=\"0\"\n                  y=\"0\"\n                  width=\"100%\"\n                  height=\"100%\"\n                  fill=\"url(#gridPattern)\"\n                  style={{ pointerEvents: 'none' }}\n                />\n\n                <XAxis\n                  dataKey=\"month\"\n                  axisLine={false}\n                  tickLine={false}\n                  tick={{ fontSize: 12, fill: 'rgb(148 163 184)' }}\n                  tickMargin={15}\n                />\n\n                <YAxis\n                  axisLine={false}\n                  tickLine={false}\n                  tick={{ fontSize: 12, fill: 'rgb(148 163 184)' }}\n                  tickFormatter={(value) => `$${value.toFixed(1)}M`}\n                  domain={['dataMin - 0.2', 'dataMax + 0.2']}\n                  tickMargin={15}\n                />\n\n                <ChartTooltip content={<CustomTooltip />} />\n\n                {/* Area fills with gradients */}\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"totalDeposits\"\n                  stroke=\"transparent\"\n                  fill=\"url(#depositsAreaGradient)\"\n                  strokeWidth={0}\n                  dot={false}\n                />\n\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"totalBorrowed\"\n                  stroke=\"transparent\"\n                  fill=\"url(#borrowedAreaGradient)\"\n                  strokeWidth={0}\n                  dot={false}\n                />\n\n                {/* Line strokes on top */}\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"totalDeposits\"\n                  stroke={chartConfig.totalDeposits.color}\n                  strokeWidth={2}\n                  dot={{\n                    r: 4,\n                    fill: chartConfig.totalDeposits.color,\n                    stroke: 'white',\n                    strokeWidth: 2,\n                    filter: 'url(#dotShadow)',\n                  }}\n                  activeDot={{\n                    r: 6,\n                    fill: chartConfig.totalDeposits.color,\n                    strokeWidth: 2,\n                    stroke: 'white',\n                    filter: 'url(#activeDotShadow)',\n                  }}\n                />\n\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"totalBorrowed\"\n                  stroke={chartConfig.totalBorrowed.color}\n                  strokeWidth={2}\n                  dot={{\n                    r: 4,\n                    fill: chartConfig.totalBorrowed.color,\n                    stroke: 'white',\n                    strokeWidth: 2,\n                    filter: 'url(#dotShadow)',\n                  }}\n                  activeDot={{\n                    r: 6,\n                    fill: chartConfig.totalBorrowed.color,\n                    strokeWidth: 2,\n                    stroke: 'white',\n                    filter: 'url(#activeDotShadow)',\n                  }}\n                />\n              </ComposedChart>\n            </ChartContainer>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
      "type": "registry:block"
    },
    {
      "path": "registry/default/ui/card.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\n// Define CardContext\ntype CardContextType = {\n  variant: 'default' | 'accent';\n};\n\nconst CardContext = React.createContext<CardContextType>({\n  variant: 'default', // Default value\n});\n\n// Hook to use CardContext\nconst useCardContext = () => {\n  const context = React.useContext(CardContext);\n  if (!context) {\n    throw new Error('useCardContext must be used within a Card component');\n  }\n  return context;\n};\n\n// Variants\nconst cardVariants = cva('flex flex-col items-stretch text-card-foreground rounded-xl', {\n  variants: {\n    variant: {\n      default: 'bg-card border border-border shadow-xs black/5',\n      accent: 'bg-muted shadow-xs p-1',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardHeaderVariants = cva('flex items-center justify-between flex-wrap px-5 min-h-14 gap-2.5', {\n  variants: {\n    variant: {\n      default: 'border-b border-border',\n      accent: '',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardContentVariants = cva('grow p-5', {\n  variants: {\n    variant: {\n      default: '',\n      accent: 'bg-card rounded-t-xl [&:last-child]:rounded-b-xl',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardTableVariants = cva('grid grow', {\n  variants: {\n    variant: {\n      default: '',\n      accent: 'bg-card rounded-xl',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardFooterVariants = cva('flex items-center px-5 min-h-14', {\n  variants: {\n    variant: {\n      default: 'border-t border-border',\n      accent: 'bg-card rounded-b-xl mt-[2px]',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\n// Card Component\nfunction Card({\n  className,\n  variant = 'default',\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof cardVariants>) {\n  return (\n    <CardContext.Provider value={{ variant: variant || 'default' }}>\n      <div data-slot=\"card\" className={cn(cardVariants({ variant }), className)} {...props} />\n    </CardContext.Provider>\n  );\n}\n\n// CardHeader Component\nfunction CardHeader({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-header\" className={cn(cardHeaderVariants({ variant }), className)} {...props} />;\n}\n\n// CardContent Component\nfunction CardContent({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-content\" className={cn(cardContentVariants({ variant }), className)} {...props} />;\n}\n\n// CardTable Component\nfunction CardTable({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-table\" className={cn(cardTableVariants({ variant }), className)} {...props} />;\n}\n\n// CardFooter Component\nfunction CardFooter({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-footer\" className={cn(cardFooterVariants({ variant }), className)} {...props} />;\n}\n\n// Other Components\nfunction CardHeading({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-heading\" className={cn('space-y-1', className)} {...props} />;\n}\n\nfunction CardToolbar({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-toolbar\" className={cn('flex items-center gap-2.5', className)} {...props} />;\n}\n\nfunction CardTitle({ className, ...props }: React.HTMLAttributes<HTMLHeadingElement>) {\n  return (\n    <h3\n      data-slot=\"card-title\"\n      className={cn('text-base font-semibold leading-none tracking-tight', className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-description\" className={cn('text-sm text-muted-foreground', className)} {...props} />;\n}\n\n// Exports\nexport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardHeading, CardTable, CardTitle, CardToolbar };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/chart.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport * as RechartsPrimitive from 'recharts';\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: '', dark: '.dark' } as const;\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode;\n    icon?: React.ComponentType;\n  } & ({ color?: string; theme?: never } | { color?: never; theme: Record<keyof typeof THEMES, string> });\n};\n\ntype ChartContextProps = {\n  config: ChartConfig;\n};\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null);\n\nfunction useChart() {\n  const context = React.useContext(ChartContext);\n\n  if (!context) {\n    throw new Error('useChart must be used within a <ChartContainer />');\n  }\n\n  return context;\n}\n\nfunction ChartContainer({\n  id,\n  className,\n  children,\n  config,\n  ...props\n}: React.ComponentProps<'div'> & {\n  config: ChartConfig;\n  children: React.ComponentProps<typeof RechartsPrimitive.ResponsiveContainer>['children'];\n}) {\n  const uniqueId = React.useId();\n  const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`;\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-slot=\"chart\"\n        data-chart={chartId}\n        className={cn(\n          \"[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden\",\n          className,\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>{children}</RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  );\n}\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(([, config]) => config.theme || config.color);\n\n  if (!colorConfig.length) {\n    return null;\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color;\n    return color ? `  --color-${key}: ${color};` : null;\n  })\n  .join('\\n')}\n}\n`,\n          )\n          .join('\\n'),\n      }}\n    />\n  );\n};\n\nconst ChartTooltip = RechartsPrimitive.Tooltip;\n\nfunction ChartTooltipContent({\n  active,\n  payload,\n  className,\n  indicator = 'dot',\n  hideLabel = false,\n  hideIndicator = false,\n  label,\n  labelFormatter,\n  labelClassName,\n  formatter,\n  color,\n  nameKey,\n  labelKey,\n}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n  React.ComponentProps<'div'> & {\n    hideLabel?: boolean;\n    hideIndicator?: boolean;\n    indicator?: 'line' | 'dot' | 'dashed';\n    nameKey?: string;\n    labelKey?: string;\n  }) {\n  const { config } = useChart();\n\n  const tooltipLabel = React.useMemo(() => {\n    if (hideLabel || !payload?.length) {\n      return null;\n    }\n\n    const [item] = payload;\n    const key = `${labelKey || item?.dataKey || item?.name || 'value'}`;\n    const itemConfig = getPayloadConfigFromPayload(config, item, key);\n    const value =\n      !labelKey && typeof label === 'string' ? config[label as keyof typeof config]?.label || label : itemConfig?.label;\n\n    if (labelFormatter) {\n      return <div className={cn('font-medium', labelClassName)}>{labelFormatter(value, payload)}</div>;\n    }\n\n    if (!value) {\n      return null;\n    }\n\n    return <div className={cn('font-medium', labelClassName)}>{value}</div>;\n  }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey]);\n\n  if (!active || !payload?.length) {\n    return null;\n  }\n\n  const nestLabel = payload.length === 1 && indicator !== 'dot';\n\n  return (\n    <div\n      className={cn(\n        'border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl',\n        className,\n      )}\n    >\n      {!nestLabel ? tooltipLabel : null}\n      <div className=\"grid gap-1.5\">\n        {payload.map((item, index) => {\n          const key = `${nameKey || item.name || item.dataKey || 'value'}`;\n          const itemConfig = getPayloadConfigFromPayload(config, item, key);\n          const indicatorColor = color || item.payload.fill || item.color;\n\n          return (\n            <div\n              key={item.dataKey}\n              className={cn(\n                '[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5',\n                indicator === 'dot' && 'items-center',\n              )}\n            >\n              {formatter && item?.value !== undefined && item.name ? (\n                formatter(item.value, item.name, item, index, item.payload)\n              ) : (\n                <>\n                  {itemConfig?.icon ? (\n                    <itemConfig.icon />\n                  ) : (\n                    !hideIndicator && (\n                      <div\n                        className={cn('shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)', {\n                          'h-2.5 w-2.5': indicator === 'dot',\n                          'w-1': indicator === 'line',\n                          'w-0 border-[1.5px] border-dashed bg-transparent': indicator === 'dashed',\n                          'my-0.5': nestLabel && indicator === 'dashed',\n                        })}\n                        style={\n                          {\n                            '--color-bg': indicatorColor,\n                            '--color-border': indicatorColor,\n                          } as React.CSSProperties\n                        }\n                      />\n                    )\n                  )}\n                  <div\n                    className={cn('flex flex-1 justify-between leading-none', nestLabel ? 'items-end' : 'items-center')}\n                  >\n                    <div className=\"grid gap-1.5\">\n                      {nestLabel ? tooltipLabel : null}\n                      <span className=\"text-muted-foreground\">{itemConfig?.label || item.name}</span>\n                    </div>\n                    {item.value && (\n                      <span className=\"text-foreground font-mono font-medium tabular-nums\">\n                        {item.value.toLocaleString()}\n                      </span>\n                    )}\n                  </div>\n                </>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nconst ChartLegend = RechartsPrimitive.Legend;\n\nfunction ChartLegendContent({\n  className,\n  hideIcon = false,\n  payload,\n  verticalAlign = 'bottom',\n  nameKey,\n}: React.ComponentProps<'div'> &\n  Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {\n    hideIcon?: boolean;\n    nameKey?: string;\n  }) {\n  const { config } = useChart();\n\n  if (!payload?.length) {\n    return null;\n  }\n\n  return (\n    <div className={cn('flex items-center justify-center gap-4', verticalAlign === 'top' ? 'pb-3' : 'pt-3', className)}>\n      {payload.map((item) => {\n        const key = `${nameKey || item.dataKey || 'value'}`;\n        const itemConfig = getPayloadConfigFromPayload(config, item, key);\n\n        return (\n          <div\n            key={item.value}\n            className={cn('[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3')}\n          >\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                style={{\n                  backgroundColor: item.color,\n                }}\n              />\n            )}\n            {itemConfig?.label}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(config: ChartConfig, payload: unknown, key: string) {\n  if (typeof payload !== 'object' || payload === null) {\n    return undefined;\n  }\n\n  const payloadPayload =\n    'payload' in payload && typeof payload.payload === 'object' && payload.payload !== null\n      ? payload.payload\n      : undefined;\n\n  let configLabelKey: string = key;\n\n  if (key in payload && typeof payload[key as keyof typeof payload] === 'string') {\n    configLabelKey = payload[key as keyof typeof payload] as string;\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'\n  ) {\n    configLabelKey = payloadPayload[key as keyof typeof payloadPayload] as string;\n  }\n\n  return configLabelKey in config ? config[configLabelKey] : config[key as keyof typeof config];\n}\n\nexport { ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent, ChartStyle };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/toggle-group.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { toggleVariants } from '@/registry/default/ui/toggle';\nimport { type VariantProps } from 'class-variance-authority';\nimport { ToggleGroup as ToggleGroupPrimitive } from 'radix-ui';\n\nconst ToggleGroupContext = React.createContext<VariantProps<typeof toggleVariants>>({\n  size: 'md',\n  variant: 'default',\n});\n\nfunction ToggleGroup({\n  className,\n  variant,\n  size,\n  children,\n  ...props\n}: React.ComponentProps<typeof ToggleGroupPrimitive.Root> & VariantProps<typeof toggleVariants>) {\n  return (\n    <ToggleGroupPrimitive.Root\n      data-slot=\"toggle-group\"\n      data-variant={variant}\n      data-size={size}\n      className={cn(\n        'group/toggle-group flex items-center rounded-md gap-1 data-[variant=outline]:gap-0 data-[variant=outline]:shadow-xs',\n        className,\n      )}\n      {...props}\n    >\n      <ToggleGroupContext.Provider value={{ variant, size }}>{children}</ToggleGroupContext.Provider>\n    </ToggleGroupPrimitive.Root>\n  );\n}\n\nfunction ToggleGroupItem({\n  className,\n  children,\n  variant,\n  size,\n  ...props\n}: React.ComponentProps<typeof ToggleGroupPrimitive.Item> & VariantProps<typeof toggleVariants>) {\n  const context = React.useContext(ToggleGroupContext);\n\n  return (\n    <ToggleGroupPrimitive.Item\n      data-slot=\"toggle-group-item\"\n      data-variant={context.variant || variant}\n      data-size={context.size || size}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        'shrink-0 shadow-none data-[variant=outline]:rounded-none data-[variant=outline]:first:rounded-s-md data-[variant=outline]:last:rounded-e-md focus:z-10 focus-visible:z-10 data-[variant=outline]:border-s-0 data-[variant=outline]:first:border-s',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  );\n}\n\nexport { ToggleGroup, ToggleGroupItem };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "registry/default/ui/toggle.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { Toggle as TogglePrimitive } from 'radix-ui';\n\nconst toggleVariants = cva(\n  'cursor-pointer inline-flex items-center justify-center rounded-md shrink-0 font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        default: 'bg-transparent',\n        outline: 'border border-input bg-transparent hover:bg-accent hover:text-accent-foreground',\n      },\n      size: {\n        lg: 'h-10 min-w-10 rounded-md px-2.5 text-sm gap-1.5 [&_svg]:size-4',\n        md: 'h-8.5 min-w-8.5 rounded-md px-2 text-[0.8125rem] leading-(--text-sm--line-height) gap-1 [&_svg]:size-4',\n        sm: 'h-7 min-w-7 rounded-md px-1.25 text-xs gap-1 [&_svg]:size-3.5',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'md',\n    },\n  },\n);\n\nfunction Toggle({\n  className,\n  variant,\n  size,\n  ...props\n}: React.ComponentProps<typeof TogglePrimitive.Root> & VariantProps<typeof toggleVariants>) {\n  return (\n    <TogglePrimitive.Root data-slot=\"toggle\" className={cn(toggleVariants({ variant, size, className }))} {...props} />\n  );\n}\n\nexport { Toggle, toggleVariants };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
