{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "file-upload-sortable",
  "type": "registry:component",
  "dependencies": [
    "sonner",
    "clsx",
    "tailwind-merge",
    "class-variance-authority",
    "lucide-react",
    "radix-ui",
    "@dnd-kit/core",
    "@dnd-kit/sortable",
    "@dnd-kit/utilities",
    "@radix-ui/react-slot"
  ],
  "registryDependencies": [
    "https://reui.io/r/alert.json",
    "https://reui.io/r/button.json",
    "https://reui.io/r/card.json",
    "https://reui.io/r/progress.json",
    "https://reui.io/r/sortable.json"
  ],
  "files": [
    {
      "path": "registry/default/components/file-upload/sortable.tsx",
      "content": "'use client';\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { Alert, AlertContent, AlertDescription, AlertIcon, AlertTitle } from '@/registry/default/ui/alert';\nimport { Button } from '@/registry/default/ui/button';\nimport { Card, CardContent } from '@/registry/default/ui/card';\nimport { Progress } from '@/registry/default/ui/progress';\nimport { Sortable, SortableItem, SortableItemHandle } from '@/registry/default/ui/sortable';\nimport { CircleX, CloudUpload, GripVertical, ImageIcon, TriangleAlert, XIcon } from 'lucide-react';\nimport { toast } from 'sonner';\nimport { cn } from '@/lib/utils';\n\ninterface ImageFile {\n  id: string;\n  file: File;\n  preview: string;\n  progress: number;\n  status: 'uploading' | 'completed' | 'error';\n  error?: string;\n}\n\ntype SortableImage = {\n  id: string;\n  src: string;\n  alt: string;\n  type: 'default' | 'uploaded';\n};\n\ninterface ImageUploadProps {\n  maxFiles?: number;\n  maxSize?: number;\n  accept?: string;\n  className?: string;\n  onImagesChange?: (images: ImageFile[]) => void;\n  onUploadComplete?: (images: ImageFile[]) => void;\n}\n\nexport default function SortableImageUpload({\n  maxFiles = 5, // Changed to 5 as per UI reference\n  maxSize = 10 * 1024 * 1024, // 10MB as per UI reference\n  accept = 'image/*',\n  className,\n  onImagesChange,\n  onUploadComplete,\n}: ImageUploadProps) {\n  const [images, setImages] = useState<ImageFile[]>([]);\n  const [isDragging, setIsDragging] = useState(false);\n  const [errors, setErrors] = useState<string[]>([]);\n  const [activeId, setActiveId] = useState<string | null>(null);\n  const [allImages, setAllImages] = useState<SortableImage[]>([\n    { id: 'default-1', src: 'https://picsum.photos/400/300?random=1', alt: 'Product view 1', type: 'default' },\n    { id: 'default-2', src: 'https://picsum.photos/400/300?random=2', alt: 'Product view 2', type: 'default' },\n    { id: 'default-3', src: 'https://picsum.photos/400/300?random=3', alt: 'Product view 3', type: 'default' },\n    { id: 'default-4', src: 'https://picsum.photos/400/300?random=4', alt: 'Product view 4', type: 'default' },\n    { id: 'default-5', src: 'https://picsum.photos/400/300?random=5', alt: 'Product view 5', type: 'default' },\n  ]);\n\n  // Helper function to create SortableImage from ImageFile\n  const createSortableImage = useCallback(\n    (imageFile: ImageFile): SortableImage => ({\n      id: imageFile.id,\n      src: imageFile.preview,\n      alt: imageFile.file.name,\n      type: 'uploaded',\n    }),\n    [],\n  );\n\n  // Ensure arrays never contain undefined items\n  useEffect(() => {\n    setAllImages((prev) => prev.filter((item) => item && item.id));\n    setImages((prev) => prev.filter((item) => item && item.id));\n  }, []);\n\n  const validateFile = (file: File): string | null => {\n    if (!file.type.startsWith('image/')) {\n      return 'File must be an image';\n    }\n    if (file.size > maxSize) {\n      return `File size must be less than ${(maxSize / 1024 / 1024).toFixed(1)}MB`;\n    }\n    if (images.length >= maxFiles) {\n      return `Maximum ${maxFiles} files allowed`;\n    }\n    return null;\n  };\n\n  const addImages = useCallback(\n    (files: FileList | File[]) => {\n      const newImages: ImageFile[] = [];\n      const newErrors: string[] = [];\n\n      Array.from(files).forEach((file) => {\n        const error = validateFile(file);\n        if (error) {\n          newErrors.push(`${file.name}: ${error}`);\n          return;\n        }\n\n        const imageFile: ImageFile = {\n          id: `${Date.now()}-${Math.random()}`,\n          file,\n          preview: URL.createObjectURL(file),\n          progress: 0,\n          status: 'uploading',\n        };\n\n        newImages.push(imageFile);\n      });\n\n      if (newErrors.length > 0) {\n        setErrors((prev) => [...prev, ...newErrors]);\n      }\n\n      if (newImages.length > 0) {\n        const updatedImages = [...images, ...newImages];\n        setImages(updatedImages);\n        onImagesChange?.(updatedImages);\n\n        // Add new images to allImages for sorting\n        const newSortableImages = newImages.map(createSortableImage);\n        setAllImages((prev) => [...prev, ...newSortableImages]);\n\n        // Simulate upload progress\n        newImages.forEach((imageFile) => {\n          simulateUpload(imageFile);\n        });\n      }\n    },\n    [images, maxSize, maxFiles, onImagesChange, createSortableImage],\n  );\n\n  const simulateUpload = (imageFile: ImageFile) => {\n    let progress = 0;\n    const interval = setInterval(() => {\n      progress += Math.random() * 20;\n      if (progress >= 100) {\n        progress = 100;\n        clearInterval(interval);\n\n        setImages((prev) =>\n          prev.map((img) => (img.id === imageFile.id ? { ...img, progress: 100, status: 'completed' as const } : img)),\n        );\n\n        // Check if all uploads are complete\n        const updatedImages = images.map((img) =>\n          img.id === imageFile.id ? { ...img, progress: 100, status: 'completed' as const } : img,\n        );\n\n        if (updatedImages.every((img) => img.status === 'completed')) {\n          onUploadComplete?.(updatedImages);\n        }\n      } else {\n        setImages((prev) => prev.map((img) => (img.id === imageFile.id ? { ...img, progress } : img)));\n      }\n    }, 100);\n  };\n\n  const removeImage = useCallback(\n    (id: string) => {\n      // Remove from allImages\n      setAllImages((prev) => prev.filter((img) => img.id !== id));\n\n      // If it's an uploaded image, also remove from images array and revoke URL\n      const uploadedImage = images.find((img) => img.id === id);\n      if (uploadedImage) {\n        URL.revokeObjectURL(uploadedImage.preview);\n        setImages((prev) => prev.filter((img) => img.id !== id));\n      }\n    },\n    [images],\n  );\n\n  const handleDragEnter = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragging(true);\n  }, []);\n\n  const handleDragLeave = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragging(false);\n  }, []);\n\n  const handleDragOver = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n  }, []);\n\n  const handleDrop = useCallback(\n    (e: React.DragEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setIsDragging(false);\n\n      const files = e.dataTransfer.files;\n      if (files.length > 0) {\n        addImages(files);\n      }\n    },\n    [addImages],\n  );\n\n  const openFileDialog = useCallback(() => {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.multiple = true;\n    input.accept = accept;\n    input.onchange = (e) => {\n      const target = e.target as HTMLInputElement;\n      if (target.files) {\n        addImages(target.files);\n      }\n    };\n    input.click();\n  }, [accept, addImages]);\n\n  const formatBytes = (bytes: number): string => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];\n  };\n\n  return (\n    <div className={cn('w-full max-w-4xl', className)}>\n      {/* Instructions */}\n      <div className=\"mb-4 text-center\">\n        <p className=\"text-sm text-muted-foreground\">\n          Upload up to {maxFiles} images (JPG, PNG, GIF, WebP, max {formatBytes(maxSize)} each). <br />\n          Drag and drop images to reorder.\n          {images.length > 0 && ` ${images.length}/${maxFiles} uploaded.`}\n        </p>\n      </div>\n\n      {/* Image Grid with Sortable */}\n      <div className=\"mb-6\">\n        {/* Combined Images Sortable */}\n        <Sortable\n          value={allImages.map((item) => item.id)}\n          onValueChange={(newItemIds) => {\n            // Reconstruct the allImages array based on the new order\n            const newAllImages = newItemIds\n              .map((itemId) => {\n                // First try to find in allImages (default images)\n                const existingImage = allImages.find((img) => img.id === itemId);\n                if (existingImage) return existingImage;\n\n                // If not found, it's a newly uploaded image\n                const uploadedImage = images.find((img) => img.id === itemId);\n                if (uploadedImage) {\n                  return createSortableImage(uploadedImage);\n                }\n                return null;\n              })\n              .filter((item): item is SortableImage => item !== null);\n\n            setAllImages(newAllImages);\n\n            toast.success('Images reordered successfully!', {\n              description: `Images rearranged across both sections`,\n              duration: 3000,\n            });\n          }}\n          getItemValue={(item) => item}\n          strategy=\"grid\"\n          className=\"grid grid-cols-5 gap-2.5 auto-rows-fr\"\n          onDragStart={(event) => setActiveId(event.active.id as string)}\n          onDragEnd={() => setActiveId(null)}\n        >\n          {allImages.map((item) => (\n            <SortableItem key={item.id} value={item.id}>\n              <div className=\"flex items-center justify-center rounded-md bg-accent/50 shadow-none shrink-0 relative group border border-border hover:z-10 data-[dragging=true]:z-50 transition-all duration-200 hover:bg-accent/70\">\n                <img\n                  src={item.src}\n                  className=\"h-[120px] w-full object-cover rounded-md pointer-events-none\"\n                  alt={item.alt}\n                />\n\n                {/* Drag Handle */}\n                <SortableItemHandle className=\"absolute top-2 start-2 opacity-0 group-hover:opacity-100 cursor-grab active:cursor-grabbing\">\n                  <Button variant=\"outline\" size=\"icon\" className=\"size-6 rounded-full\">\n                    <GripVertical className=\"size-3.5\" />\n                  </Button>\n                </SortableItemHandle>\n\n                {/* Remove Button Overlay */}\n                <Button\n                  onClick={() => removeImage(item.id)}\n                  variant=\"outline\"\n                  size=\"icon\"\n                  className=\"shadow-sm absolute top-2 end-2 size-6 opacity-0 group-hover:opacity-100 rounded-full\"\n                >\n                  <XIcon className=\"size-3.5\" />\n                </Button>\n              </div>\n            </SortableItem>\n          ))}\n        </Sortable>\n      </div>\n\n      {/* Upload Area */}\n      <Card\n        className={cn(\n          'border-dashed shadow-none rounded-md transition-colors',\n          isDragging ? 'border-primary bg-primary/5' : 'border-muted-foreground/25 hover:border-muted-foreground/50',\n        )}\n        onDragEnter={handleDragEnter}\n        onDragLeave={handleDragLeave}\n        onDragOver={handleDragOver}\n        onDrop={handleDrop}\n      >\n        <CardContent className=\"text-center\">\n          <div className=\"flex items-center justify-center size-[32px] rounded-full border border-border mx-auto mb-3\">\n            <CloudUpload className=\"size-4\" />\n          </div>\n          <h3 className=\"text-2sm text-foreground font-semibold mb-0.5\">Choose a file or drag & drop here.</h3>\n          <span className=\"text-xs text-secondary-foreground font-normal block mb-3\">\n            JPEG, PNG, up to {formatBytes(maxSize)}.\n          </span>\n          <Button size=\"sm\" variant=\"mono\" onClick={openFileDialog}>\n            Browse File\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Upload Progress Cards */}\n      {images.length > 0 && (\n        <div className=\"mt-6 space-y-3\">\n          {images.map((imageFile) => (\n            <Card key={imageFile.id} className=\"shadow-none rounded-md\">\n              <CardContent className=\"flex items-center gap-2 p-3\">\n                <div className=\"flex items-center justify-center size-[32px] rounded-md border border-border shrink-0\">\n                  <ImageIcon className=\"size-4 text-muted-foreground\" />\n                </div>\n                <div className=\"flex flex-col gap-1.5 w-full\">\n                  <div className=\"flex items-center justify-between gap-2.5 -mt-2 w-full\">\n                    <div className=\"flex items-center gap-2.5\">\n                      <span className=\"text-xs text-foreground font-medium leading-none\">{imageFile.file.name}</span>\n                      <span className=\"text-xs text-muted-foreground font-normal leading-none\">\n                        {formatBytes(imageFile.file.size)}\n                      </span>\n                      {imageFile.status === 'uploading' && (\n                        <p className=\"text-xs text-muted-foreground\">Uploading... {Math.round(imageFile.progress)}%</p>\n                      )}\n                    </div>\n                    <Button onClick={() => removeImage(imageFile.id)} variant=\"ghost\" size=\"icon\" className=\"size-6\">\n                      <CircleX className=\"size-3.5\" />\n                    </Button>\n                  </div>\n\n                  <Progress\n                    value={imageFile.progress}\n                    className={cn('h-1 transition-all duration-300', '[&>div]:bg-zinc-950 dark:[&>div]:bg-zinc-50')}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Error Messages */}\n      {errors.length > 0 && (\n        <Alert variant=\"destructive\" appearance=\"light\" className=\"mt-5\">\n          <AlertIcon>\n            <TriangleAlert />\n          </AlertIcon>\n          <AlertContent>\n            <AlertTitle>File upload error(s)</AlertTitle>\n            <AlertDescription>\n              {errors.map((error, index) => (\n                <p key={index} className=\"last:mb-0\">\n                  {error}\n                </p>\n              ))}\n            </AlertDescription>\n          </AlertContent>\n        </Alert>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/alert.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Button } from '@/registry/default/ui/button';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { X } from 'lucide-react';\n\nconst alertVariants = cva('flex items-stretch w-full gap-2 group-[.toaster]:w-(--width)', {\n  variants: {\n    variant: {\n      secondary: '',\n      primary: '',\n      destructive: '',\n      success: '',\n      info: '',\n      mono: '',\n      warning: '',\n    },\n    icon: {\n      primary: '',\n      destructive: '',\n      success: '',\n      info: '',\n      warning: '',\n    },\n    appearance: {\n      solid: '',\n      outline: '',\n      light: '',\n      stroke: 'text-foreground',\n    },\n    size: {\n      lg: 'rounded-lg p-4 gap-3 text-base [&>[data-slot=alert-icon]>svg]:size-6 *:data-slot=alert-icon:mt-0.5 [&_[data-slot=alert-close]]:mt-1',\n      md: 'rounded-lg p-3.5 gap-2.5 text-sm [&>[data-slot=alert-icon]>svg]:size-5 *:data-slot=alert-icon:mt-0 [&_[data-slot=alert-close]]:mt-0.5',\n      sm: 'rounded-md px-3 py-2.5 gap-2 text-xs [&>[data-slot=alert-icon]>svg]:size-4 *:data-alert-icon:mt-0.5 [&_[data-slot=alert-close]]:mt-0.25 [&_[data-slot=alert-close]_svg]:size-3.5',\n    },\n  },\n  compoundVariants: [\n    /* Solid */\n    {\n      variant: 'secondary',\n      appearance: 'solid',\n      className: 'bg-muted text-foreground',\n    },\n    {\n      variant: 'primary',\n      appearance: 'solid',\n      className: 'bg-primary text-primary-foreground',\n    },\n    {\n      variant: 'destructive',\n      appearance: 'solid',\n      className: 'bg-destructive text-destructive-foreground',\n    },\n    {\n      variant: 'success',\n      appearance: 'solid',\n      className:\n        'bg-[var(--color-success,var(--color-green-500))] text-[var(--color-success-foreground,var(--color-white))]',\n    },\n    {\n      variant: 'info',\n      appearance: 'solid',\n      className:\n        'bg-[var(--color-info,var(--color-violet-600))] text-[var(--color-info-foreground,var(--color-white))]',\n    },\n    {\n      variant: 'warning',\n      appearance: 'solid',\n      className:\n        'bg-[var(--color-warning,var(--color-yellow-500))] text-[var(--color-warning-foreground,var(--color-white))]',\n    },\n    {\n      variant: 'mono',\n      appearance: 'solid',\n      className: 'bg-zinc-950 text-white dark:bg-zinc-300 dark:text-black *:data-slot-[alert=close]:text-white',\n    },\n\n    /* Outline */\n    {\n      variant: 'secondary',\n      appearance: 'outline',\n      className: 'border border-border bg-background text-foreground [&_[data-slot=alert-close]]:text-foreground',\n    },\n    {\n      variant: 'primary',\n      appearance: 'outline',\n      className: 'border border-border bg-background text-primary [&_[data-slot=alert-close]]:text-foreground',\n    },\n    {\n      variant: 'destructive',\n      appearance: 'outline',\n      className: 'border border-border bg-background text-destructive [&_[data-slot=alert-close]]:text-foreground',\n    },\n    {\n      variant: 'success',\n      appearance: 'outline',\n      className:\n        'border border-border bg-background text-[var(--color-success,var(--color-green-500))] [&_[data-slot=alert-close]]:text-foreground',\n    },\n    {\n      variant: 'info',\n      appearance: 'outline',\n      className:\n        'border border-border bg-background text-[var(--color-info,var(--color-violet-600))] [&_[data-slot=alert-close]]:text-foreground',\n    },\n    {\n      variant: 'warning',\n      appearance: 'outline',\n      className:\n        'border border-border bg-background text-[var(--color-warning,var(--color-yellow-500))] [&_[data-slot=alert-close]]:text-foreground',\n    },\n    {\n      variant: 'mono',\n      appearance: 'outline',\n      className: 'border border-border bg-background text-foreground [&_[data-slot=alert-close]]:text-foreground',\n    },\n\n    /* Light */\n    {\n      variant: 'secondary',\n      appearance: 'light',\n      className: 'bg-muted border border-border text-foreground',\n    },\n    {\n      variant: 'primary',\n      appearance: 'light',\n      className:\n        'text-foreground bg-[var(--color-primary-soft,var(--color-blue-50))] border border-[var(--color-primary-alpha,var(--color-blue-100))] [&_[data-slot=alert-icon]]:text-primary dark:bg-[var(--color-primary-soft,var(--color-blue-950))] dark:border-[var(--color-primary-alpha,var(--color-blue-900))]',\n    },\n    {\n      variant: 'destructive',\n      appearance: 'light',\n      className:\n        'bg-[var(--color-destructive-soft,var(--color-red-50))] border border-[var(--color-destructive-alpha,var(--color-red-100))] text-foreground [&_[data-slot=alert-icon]]:text-destructive dark:bg-[var(--color-destructive-soft,var(--color-red-950))] dark:border-[var(--color-destructive-alpha,var(--color-red-900))] ',\n    },\n    {\n      variant: 'success',\n      appearance: 'light',\n      className:\n        'bg-[var(--color-success-soft,var(--color-green-50))] border border-[var(--color-success-alpha,var(--color-green-200))] text-foreground [&_[data-slot=alert-icon]]:text-[var(--color-success-foreground,var(--color-green-600))] dark:bg-[var(--color-success-soft,var(--color-green-950))] dark:border-[var(--color-success-alpha,var(--color-green-900))]',\n    },\n    {\n      variant: 'info',\n      appearance: 'light',\n      className:\n        'bg-[var(--color-info-soft,var(--color-violet-50))] border border-[var(--color-info-alpha,var(--color-violet-100))] text-foreground [&_[data-slot=alert-icon]]:text-[var(--color-info-foreground,var(--color-violet-600))] dark:bg-[var(--color-info-soft,var(--color-violet-950))] dark:border-[var(--color-info-alpha,var(--color-violet-900))]',\n    },\n    {\n      variant: 'warning',\n      appearance: 'light',\n      className:\n        'bg-[var(--color-warning-soft,var(--color-yellow-50))] border border-[var(--color-warning-alpha,var(--color-yellow-200))] text-foreground [&_[data-slot=alert-icon]]:text-[var(--color-warning-foreground,var(--color-yellow-600))] dark:bg-[var(--color-warning-soft,var(--color-yellow-950))] dark:border-[var(--color-warning-alpha,var(--color-yellow-900))]',\n    },\n\n    /* Mono */\n    {\n      variant: 'mono',\n      icon: 'primary',\n      className: '[&_[data-slot=alert-icon]]:text-primary',\n    },\n    {\n      variant: 'mono',\n      icon: 'warning',\n      className: '[&_[data-slot=alert-icon]]:text-[var(--color-warning-foreground,var(--color-yellow-600))]',\n    },\n    {\n      variant: 'mono',\n      icon: 'success',\n      className: '[&_[data-slot=alert-icon]]:text-[var(--color-success-foreground,var(--color-green-600))]',\n    },\n    {\n      variant: 'mono',\n      icon: 'destructive',\n      className: '[&_[data-slot=alert-icon]]:text-destructive',\n    },\n    {\n      variant: 'mono',\n      icon: 'info',\n      className: '[&_[data-slot=alert-icon]]:text-[var(--color-info-foreground,var(--color-violet-600))]',\n    },\n  ],\n  defaultVariants: {\n    variant: 'secondary',\n    appearance: 'solid',\n    size: 'md',\n  },\n});\n\ninterface AlertProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof alertVariants> {\n  close?: boolean;\n  onClose?: () => void;\n}\n\ninterface AlertIconProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof alertVariants> {}\n\nfunction Alert({ className, variant, size, icon, appearance, close = false, onClose, children, ...props }: AlertProps) {\n  return (\n    <div\n      data-slot=\"alert\"\n      role=\"alert\"\n      className={cn(alertVariants({ variant, size, icon, appearance }), className)}\n      {...props}\n    >\n      {children}\n      {close && (\n        <Button\n          size=\"sm\"\n          variant=\"inverse\"\n          mode=\"icon\"\n          onClick={onClose}\n          aria-label=\"Dismiss\"\n          data-slot=\"alert-close\"\n          className={cn('group shrink-0 size-4')}\n        >\n          <X className=\"opacity-60 group-hover:opacity-100 size-4\" />\n        </Button>\n      )}\n    </div>\n  );\n}\n\nfunction AlertTitle({ className, ...props }: React.HTMLAttributes<HTMLHeadingElement>) {\n  return <div data-slot=\"alert-title\" className={cn('grow tracking-tight', className)} {...props} />;\n}\n\nfunction AlertIcon({ children, className, ...props }: AlertIconProps) {\n  return (\n    <div data-slot=\"alert-icon\" className={cn('shrink-0', className)} {...props}>\n      {children}\n    </div>\n  );\n}\n\nfunction AlertToolbar({ children, className, ...props }: AlertIconProps) {\n  return (\n    <div data-slot=\"alert-toolbar\" className={cn(className)} {...props}>\n      {children}\n    </div>\n  );\n}\n\nfunction AlertDescription({ className, ...props }: React.HTMLAttributes<HTMLParagraphElement>) {\n  return (\n    <div\n      data-slot=\"alert-description\"\n      className={cn('text-sm [&_p]:leading-relaxed [&_p]:mb-2', className)}\n      {...props}\n    />\n  );\n}\n\nfunction AlertContent({ className, ...props }: React.HTMLAttributes<HTMLParagraphElement>) {\n  return (\n    <div\n      data-slot=\"alert-content\"\n      className={cn('space-y-2 [&_[data-slot=alert-title]]:font-semibold', className)}\n      {...props}\n    />\n  );\n}\n\nexport { Alert, AlertContent, AlertDescription, AlertIcon, AlertTitle, AlertToolbar };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/card.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\n// Define CardContext\ntype CardContextType = {\n  variant: 'default' | 'accent';\n};\n\nconst CardContext = React.createContext<CardContextType>({\n  variant: 'default', // Default value\n});\n\n// Hook to use CardContext\nconst useCardContext = () => {\n  const context = React.useContext(CardContext);\n  if (!context) {\n    throw new Error('useCardContext must be used within a Card component');\n  }\n  return context;\n};\n\n// Variants\nconst cardVariants = cva('flex flex-col items-stretch text-card-foreground rounded-xl', {\n  variants: {\n    variant: {\n      default: 'bg-card border border-border shadow-xs black/5',\n      accent: 'bg-muted shadow-xs p-1',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardHeaderVariants = cva('flex items-center justify-between flex-wrap px-5 min-h-14 gap-2.5', {\n  variants: {\n    variant: {\n      default: 'border-b border-border',\n      accent: '',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardContentVariants = cva('grow p-5', {\n  variants: {\n    variant: {\n      default: '',\n      accent: 'bg-card rounded-t-xl [&:last-child]:rounded-b-xl',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardTableVariants = cva('grid grow', {\n  variants: {\n    variant: {\n      default: '',\n      accent: 'bg-card rounded-xl',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardFooterVariants = cva('flex items-center px-5 min-h-14', {\n  variants: {\n    variant: {\n      default: 'border-t border-border',\n      accent: 'bg-card rounded-b-xl mt-[2px]',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\n// Card Component\nfunction Card({\n  className,\n  variant = 'default',\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof cardVariants>) {\n  return (\n    <CardContext.Provider value={{ variant: variant || 'default' }}>\n      <div data-slot=\"card\" className={cn(cardVariants({ variant }), className)} {...props} />\n    </CardContext.Provider>\n  );\n}\n\n// CardHeader Component\nfunction CardHeader({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-header\" className={cn(cardHeaderVariants({ variant }), className)} {...props} />;\n}\n\n// CardContent Component\nfunction CardContent({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-content\" className={cn(cardContentVariants({ variant }), className)} {...props} />;\n}\n\n// CardTable Component\nfunction CardTable({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-table\" className={cn(cardTableVariants({ variant }), className)} {...props} />;\n}\n\n// CardFooter Component\nfunction CardFooter({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-footer\" className={cn(cardFooterVariants({ variant }), className)} {...props} />;\n}\n\n// Other Components\nfunction CardHeading({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-heading\" className={cn('space-y-1', className)} {...props} />;\n}\n\nfunction CardToolbar({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-toolbar\" className={cn('flex items-center gap-2.5', className)} {...props} />;\n}\n\nfunction CardTitle({ className, ...props }: React.HTMLAttributes<HTMLHeadingElement>) {\n  return (\n    <h3\n      data-slot=\"card-title\"\n      className={cn('text-base font-semibold leading-none tracking-tight', className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-description\" className={cn('text-sm text-muted-foreground', className)} {...props} />;\n}\n\n// Exports\nexport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardHeading, CardTable, CardTitle, CardToolbar };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/progress.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Progress as ProgressPrimitive } from 'radix-ui';\n\nfunction Progress({\n  className,\n  indicatorClassName,\n  value,\n  ...props\n}: React.ComponentProps<typeof ProgressPrimitive.Root> & {\n  indicatorClassName?: string;\n}) {\n  return (\n    <ProgressPrimitive.Root\n      data-slot=\"progress\"\n      className={cn('relative h-1.5 w-full overflow-hidden rounded-full bg-secondary', className)}\n      {...props}\n    >\n      <ProgressPrimitive.Indicator\n        data-slot=\"progress-indicator\"\n        className={cn('h-full w-full flex-1 bg-primary transition-all', indicatorClassName)}\n        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n      />\n    </ProgressPrimitive.Root>\n  );\n}\n\nfunction ProgressCircle({\n  className,\n  indicatorClassName,\n  trackClassName,\n  value = 0,\n  size = 48,\n  strokeWidth = 4,\n  children,\n  ...props\n}: React.ComponentProps<'div'> & {\n  /**\n   * Progress value from 0 to 100\n   */\n  value?: number;\n  /**\n   * Size of the circle in pixels\n   */\n  size?: number;\n  /**\n   * Width of the progress stroke\n   */\n  strokeWidth?: number;\n  /**\n   * Additional className for the progress stroke\n   */\n  indicatorClassName?: string;\n  /**\n   * Additional className for the progress track\n   */\n  trackClassName?: string;\n  /**\n   * Content to display in the center of the circle\n   */\n  children?: React.ReactNode;\n}) {\n  const radius = (size - strokeWidth) / 2;\n  const circumference = radius * 2 * Math.PI;\n  const offset = circumference - (value / 100) * circumference;\n\n  return (\n    <div\n      data-slot=\"progress-circle\"\n      className={cn('relative inline-flex items-center justify-center', className)}\n      style={{ width: size, height: size }}\n      {...props}\n    >\n      <svg className=\"absolute inset-0 -rotate-90\" width={size} height={size} viewBox={`0 0 ${size} ${size}`}>\n        <circle\n          data-slot=\"progress-circle-track\"\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          stroke=\"currentColor\"\n          strokeWidth={strokeWidth}\n          fill=\"none\"\n          className={cn('text-secondary', trackClassName)}\n        />\n        <circle\n          data-slot=\"progress-circle-indicator\"\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          stroke=\"currentColor\"\n          strokeWidth={strokeWidth}\n          fill=\"none\"\n          strokeDasharray={circumference}\n          strokeDashoffset={offset}\n          strokeLinecap=\"round\"\n          className={cn('text-primary transition-all duration-300 ease-in-out', indicatorClassName)}\n        />\n      </svg>\n      {children && (\n        <div\n          data-slot=\"progress-circle-content\"\n          className=\"relative z-10 flex items-center justify-center text-sm font-medium\"\n        >\n          {children}\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction ProgressRadial({\n  className,\n  value = 0,\n  size = 120,\n  strokeWidth = 8,\n  startAngle = -90,\n  endAngle = 90,\n  showLabel = false,\n  trackClassName,\n  indicatorClassName,\n  children,\n  ...props\n}: React.ComponentProps<'div'> & {\n  /**\n   * Progress value from 0 to 100\n   */\n  value?: number;\n  /**\n   * Size of the radial in pixels\n   */\n  size?: number;\n  /**\n   * Width of the progress stroke\n   */\n  strokeWidth?: number;\n  /**\n   * Start angle in degrees\n   */\n  startAngle?: number;\n  /**\n   * Additional className for the progress stroke\n   */\n  indicatorClassName?: string;\n  /**\n   * Additional className for the progress track\n   */\n  trackClassName?: string;\n  /**\n   * End angle in degrees\n   */\n  endAngle?: number;\n  /**\n   * Whether to show percentage label\n   */\n  showLabel?: boolean;\n  /**\n   * Custom content to display\n   */\n  children?: React.ReactNode;\n}) {\n  const radius = (size - strokeWidth) / 2;\n  const angleRange = endAngle - startAngle;\n  const progressAngle = (value / 100) * angleRange;\n\n  const toRadians = (degrees: number) => (degrees * Math.PI) / 180;\n\n  const startX = size / 2 + radius * Math.cos(toRadians(startAngle));\n  const startY = size / 2 + radius * Math.sin(toRadians(startAngle));\n  const endX = size / 2 + radius * Math.cos(toRadians(startAngle + progressAngle));\n  const endY = size / 2 + radius * Math.sin(toRadians(startAngle + progressAngle));\n\n  const largeArc = progressAngle > 180 ? 1 : 0;\n\n  const pathData = ['M', startX, startY, 'A', radius, radius, 0, largeArc, 1, endX, endY].join(' ');\n\n  return (\n    <div\n      data-slot=\"progress-radial\"\n      className={cn('relative inline-flex items-center justify-center', className)}\n      style={{ width: size, height: size }}\n      {...props}\n    >\n      <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`}>\n        <path\n          d={[\n            'M',\n            size / 2 + radius * Math.cos(toRadians(startAngle)),\n            size / 2 + radius * Math.sin(toRadians(startAngle)),\n            'A',\n            radius,\n            radius,\n            0,\n            angleRange > 180 ? 1 : 0,\n            1,\n            size / 2 + radius * Math.cos(toRadians(endAngle)),\n            size / 2 + radius * Math.sin(toRadians(endAngle)),\n          ].join(' ')}\n          stroke=\"currentColor\"\n          strokeWidth={strokeWidth}\n          fill=\"none\"\n          strokeLinecap=\"round\"\n          className={cn('text-secondary', trackClassName)}\n        />\n        <path\n          d={pathData}\n          stroke=\"currentColor\"\n          strokeWidth={strokeWidth}\n          fill=\"none\"\n          strokeLinecap=\"round\"\n          className={cn('text-primary transition-all duration-300 ease-in-out', indicatorClassName)}\n        />\n      </svg>\n      {(showLabel || children) && (\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          {children || <span className=\"text-lg font-bold\">{value}%</span>}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport { Progress, ProgressCircle, ProgressRadial };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/sortable.tsx",
      "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\n'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport {\n  defaultDropAnimation,\n  defaultDropAnimationSideEffects,\n  DndContext,\n  DragEndEvent,\n  DragOverEvent,\n  DragOverlay,\n  DragStartEvent,\n  DropAnimation,\n  KeyboardSensor,\n  PointerSensor,\n  UniqueIdentifier,\n  useSensor,\n  useSensors,\n  type DraggableAttributes,\n  type DraggableSyntheticListeners,\n} from '@dnd-kit/core';\nimport {\n  arrayMove,\n  rectSortingStrategy,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  useSortable,\n  verticalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { Slot } from '@radix-ui/react-slot';\n\ninterface KanbanContextProps<T> {\n  columns: Record<string, T[]>;\n  setColumns: (columns: Record<string, T[]>) => void;\n  getItemId: (item: T) => string;\n  columnIds: string[];\n  activeId: UniqueIdentifier | null;\n  setActiveId: (id: UniqueIdentifier | null) => void;\n  findContainer: (id: UniqueIdentifier) => string | undefined;\n  isColumn: (id: UniqueIdentifier) => boolean;\n}\n\nconst KanbanContext = React.createContext<KanbanContextProps<any>>({\n  columns: {},\n  setColumns: () => {},\n  getItemId: () => '',\n  columnIds: [],\n  activeId: null,\n  setActiveId: () => {},\n  findContainer: () => undefined,\n  isColumn: () => false,\n});\n\nconst ColumnContext = React.createContext<{\n  attributes: DraggableAttributes;\n  listeners: DraggableSyntheticListeners | undefined;\n  isDragging?: boolean;\n  disabled?: boolean;\n}>({\n  attributes: {} as DraggableAttributes,\n  listeners: undefined,\n  isDragging: false,\n  disabled: false,\n});\n\nconst ItemContext = React.createContext<{\n  listeners: DraggableSyntheticListeners | undefined;\n  isDragging?: boolean;\n  disabled?: boolean;\n}>({\n  listeners: undefined,\n  isDragging: false,\n  disabled: false,\n});\n\nconst dropAnimationConfig: DropAnimation = {\n  ...defaultDropAnimation,\n  sideEffects: defaultDropAnimationSideEffects({\n    styles: {\n      active: {\n        opacity: '0.4',\n      },\n    },\n  }),\n};\n\nexport interface KanbanMoveEvent {\n  event: DragEndEvent;\n  activeContainer: string;\n  activeIndex: number;\n  overContainer: string;\n  overIndex: number;\n}\n\nexport interface KanbanRootProps<T> {\n  value: Record<string, T[]>;\n  onValueChange: (value: Record<string, T[]>) => void;\n  getItemValue: (item: T) => string;\n  children: React.ReactNode;\n  className?: string;\n  onMove?: (event: KanbanMoveEvent) => void;\n}\n\nfunction Kanban<T>({ value, onValueChange, getItemValue, children, className, onMove }: KanbanRootProps<T>) {\n  const columns = value;\n  const setColumns = onValueChange;\n  const [activeId, setActiveId] = React.useState<UniqueIdentifier | null>(null);\n\n  const sensors = useSensors(\n    useSensor(PointerSensor, {\n      activationConstraint: {\n        distance: 10,\n      },\n    }),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    }),\n  );\n\n  const columnIds = React.useMemo(() => Object.keys(columns), [columns]);\n\n  const isColumn = React.useCallback((id: UniqueIdentifier) => columnIds.includes(id as string), [columnIds]);\n\n  const findContainer = React.useCallback(\n    (id: UniqueIdentifier) => {\n      if (isColumn(id)) return id as string;\n      return columnIds.find((key) => columns[key].some((item) => getItemValue(item) === id));\n    },\n    [columns, columnIds, getItemValue, isColumn],\n  );\n\n  const handleDragStart = React.useCallback((event: DragStartEvent) => {\n    setActiveId(event.active.id);\n  }, []);\n\n  const handleDragOver = React.useCallback(\n    (event: DragOverEvent) => {\n      if (onMove) {\n        return;\n      }\n\n      const { active, over } = event;\n      if (!over) return;\n\n      if (isColumn(active.id)) return;\n\n      const activeContainer = findContainer(active.id);\n      const overContainer = findContainer(over.id);\n\n      // Only handle moving items between different columns\n      if (!activeContainer || !overContainer || activeContainer === overContainer) {\n        return;\n      }\n\n      const activeItems = columns[activeContainer];\n      const overItems = columns[overContainer];\n\n      const activeIndex = activeItems.findIndex((item: T) => getItemValue(item) === active.id);\n      let overIndex = overItems.findIndex((item: T) => getItemValue(item) === over.id);\n\n      // If dropping on the column itself, not an item\n      if (isColumn(over.id)) {\n        overIndex = overItems.length;\n      }\n\n      const newOverItems = [...overItems];\n      const [movedItem] = activeItems.splice(activeIndex, 1);\n      newOverItems.splice(overIndex, 0, movedItem);\n\n      setColumns({\n        ...columns,\n        [activeContainer]: [...activeItems],\n        [overContainer]: newOverItems,\n      });\n    },\n    [findContainer, getItemValue, isColumn, setColumns, columns, onMove],\n  );\n\n  const handleDragEnd = React.useCallback(\n    (event: DragEndEvent) => {\n      const { active, over } = event;\n      setActiveId(null);\n\n      if (!over) return;\n\n      // Handle item move callback\n      if (onMove && !isColumn(active.id)) {\n        const activeContainer = findContainer(active.id);\n        const overContainer = findContainer(over.id);\n\n        if (activeContainer && overContainer) {\n          const activeIndex = columns[activeContainer].findIndex((item: T) => getItemValue(item) === active.id);\n          const overIndex = isColumn(over.id)\n            ? columns[overContainer].length\n            : columns[overContainer].findIndex((item: T) => getItemValue(item) === over.id);\n\n          onMove({\n            event,\n            activeContainer,\n            activeIndex,\n            overContainer,\n            overIndex,\n          });\n        }\n        return;\n      }\n\n      // Handle column reordering\n      if (isColumn(active.id) && isColumn(over.id)) {\n        const activeIndex = columnIds.indexOf(active.id as string);\n        const overIndex = columnIds.indexOf(over.id as string);\n        if (activeIndex !== overIndex) {\n          const newOrder = arrayMove(Object.keys(columns), activeIndex, overIndex);\n          const newColumns: Record<string, T[]> = {};\n          newOrder.forEach((key) => {\n            newColumns[key] = columns[key];\n          });\n          setColumns(newColumns);\n        }\n        return;\n      }\n\n      const activeContainer = findContainer(active.id);\n      const overContainer = findContainer(over.id);\n\n      // Handle item reordering within the same column\n      if (activeContainer && overContainer && activeContainer === overContainer) {\n        const container = activeContainer;\n        const activeIndex = columns[container].findIndex((item: T) => getItemValue(item) === active.id);\n        const overIndex = columns[container].findIndex((item: T) => getItemValue(item) === over.id);\n\n        if (activeIndex !== overIndex) {\n          setColumns({\n            ...columns,\n            [container]: arrayMove(columns[container], activeIndex, overIndex),\n          });\n        }\n      }\n    },\n    [columnIds, columns, findContainer, getItemValue, isColumn, setColumns, onMove],\n  );\n\n  const contextValue = React.useMemo(\n    () => ({\n      columns,\n      setColumns,\n      getItemId: getItemValue,\n      columnIds,\n      activeId,\n      setActiveId,\n      findContainer,\n      isColumn,\n    }),\n    [columns, setColumns, getItemValue, columnIds, activeId, findContainer, isColumn],\n  );\n\n  return (\n    <KanbanContext.Provider value={contextValue}>\n      <DndContext sensors={sensors} onDragStart={handleDragStart} onDragOver={handleDragOver} onDragEnd={handleDragEnd}>\n        <div data-slot=\"kanban\" data-dragging={activeId !== null} className={cn(className)}>\n          {children}\n        </div>\n      </DndContext>\n    </KanbanContext.Provider>\n  );\n}\n\nexport interface KanbanBoardProps {\n  className?: string;\n  children: React.ReactNode;\n}\n\nfunction KanbanBoard({ children, className }: KanbanBoardProps) {\n  const { columnIds } = React.useContext(KanbanContext);\n\n  return (\n    <SortableContext items={columnIds} strategy={rectSortingStrategy}>\n      <div data-slot=\"kanban-board\" className={cn('grid auto-rows-fr sm:grid-cols-3 gap-4', className)}>\n        {children}\n      </div>\n    </SortableContext>\n  );\n}\n\nexport interface KanbanColumnProps {\n  value: string;\n  className?: string;\n  children: React.ReactNode;\n  disabled?: boolean;\n}\n\nfunction KanbanColumn({ value, className, children, disabled }: KanbanColumnProps) {\n  const {\n    setNodeRef,\n    transform,\n    transition,\n    attributes,\n    listeners,\n    isDragging: isSortableDragging,\n  } = useSortable({\n    id: value,\n    disabled,\n  });\n\n  const { activeId, isColumn } = React.useContext(KanbanContext);\n  const isColumnDragging = activeId ? isColumn(activeId) : false;\n\n  const style = {\n    transition,\n    transform: CSS.Translate.toString(transform),\n  } as React.CSSProperties;\n\n  return (\n    <ColumnContext.Provider value={{ attributes, listeners, isDragging: isColumnDragging, disabled }}>\n      <div\n        data-slot=\"kanban-column\"\n        data-value={value}\n        data-dragging={isSortableDragging}\n        data-disabled={disabled}\n        ref={setNodeRef}\n        style={style}\n        className={cn(\n          'group/kanban-column flex flex-col',\n          isSortableDragging && 'opacity-50',\n          disabled && 'opacity-50',\n          className,\n        )}\n      >\n        {children}\n      </div>\n    </ColumnContext.Provider>\n  );\n}\n\nexport interface KanbanColumnHandleProps {\n  asChild?: boolean;\n  className?: string;\n  children?: React.ReactNode;\n  cursor?: boolean;\n}\n\nfunction KanbanColumnHandle({ asChild, className, children, cursor = true }: KanbanColumnHandleProps) {\n  const { attributes, listeners, isDragging, disabled } = React.useContext(ColumnContext);\n\n  const Comp = asChild ? Slot : 'div';\n\n  return (\n    <Comp\n      data-slot=\"kanban-column-handle\"\n      data-dragging={isDragging}\n      data-disabled={disabled}\n      {...attributes}\n      {...listeners}\n      className={cn(\n        'opacity-0 transition-opacity group-hover/kanban-column:opacity-100',\n        cursor && (isDragging ? '!cursor-grabbing' : '!cursor-grab'),\n        className,\n      )}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nexport interface KanbanItemProps {\n  value: string;\n  asChild?: boolean;\n  className?: string;\n  children: React.ReactNode;\n  disabled?: boolean;\n}\n\nfunction KanbanItem({ value, asChild = false, className, children, disabled }: KanbanItemProps) {\n  const {\n    setNodeRef,\n    transform,\n    transition,\n    attributes,\n    listeners,\n    isDragging: isSortableDragging,\n  } = useSortable({\n    id: value,\n    disabled,\n  });\n\n  const { activeId, isColumn } = React.useContext(KanbanContext);\n  const isItemDragging = activeId ? !isColumn(activeId) : false;\n\n  const style = {\n    transition,\n    transform: CSS.Translate.toString(transform),\n  } as React.CSSProperties;\n\n  const Comp = asChild ? Slot : 'div';\n\n  return (\n    <ItemContext.Provider value={{ listeners, isDragging: isItemDragging, disabled }}>\n      <Comp\n        data-slot=\"kanban-item\"\n        data-value={value}\n        data-dragging={isSortableDragging}\n        data-disabled={disabled}\n        ref={setNodeRef}\n        style={style}\n        {...attributes}\n        className={cn(isSortableDragging && 'opacity-50', disabled && 'opacity-50', className)}\n      >\n        {children}\n      </Comp>\n    </ItemContext.Provider>\n  );\n}\n\nexport interface KanbanItemHandleProps {\n  asChild?: boolean;\n  className?: string;\n  children?: React.ReactNode;\n  cursor?: boolean;\n}\n\nfunction KanbanItemHandle({ asChild, className, children, cursor = true }: KanbanItemHandleProps) {\n  const { listeners, isDragging, disabled } = React.useContext(ItemContext);\n\n  const Comp = asChild ? Slot : 'div';\n\n  return (\n    <Comp\n      data-slot=\"kanban-item-handle\"\n      data-dragging={isDragging}\n      data-disabled={disabled}\n      {...listeners}\n      className={cn(cursor && (isDragging ? '!cursor-grabbing' : '!cursor-grab'), className)}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nexport interface KanbanColumnContentProps {\n  value: string;\n  className?: string;\n  children: React.ReactNode;\n}\n\nfunction KanbanColumnContent({ value, className, children }: KanbanColumnContentProps) {\n  const { columns, getItemId } = React.useContext(KanbanContext);\n\n  const itemIds = React.useMemo(() => columns[value].map(getItemId), [columns, getItemId, value]);\n\n  return (\n    <SortableContext items={itemIds} strategy={verticalListSortingStrategy}>\n      <div data-slot=\"kanban-column-content\" className={cn('flex flex-col gap-2', className)}>\n        {children}\n      </div>\n    </SortableContext>\n  );\n}\n\nexport interface KanbanOverlayProps {\n  className?: string;\n  children?: React.ReactNode | ((params: { value: UniqueIdentifier; variant: 'column' | 'item' }) => React.ReactNode);\n}\n\nfunction KanbanOverlay({ children, className }: KanbanOverlayProps) {\n  const { activeId, isColumn } = React.useContext(KanbanContext);\n  const [dimensions, setDimensions] = React.useState<{ width: number; height: number } | null>(null);\n\n  React.useEffect(() => {\n    if (activeId) {\n      const element = document.querySelector(\n        `[data-slot=\"kanban-${isColumn(activeId) ? 'column' : 'item'}\"][data-value=\"${activeId}\"]`,\n      );\n      if (element) {\n        const rect = element.getBoundingClientRect();\n        setDimensions({ width: rect.width, height: rect.height });\n      }\n    } else {\n      setDimensions(null);\n    }\n  }, [activeId]);\n\n  const style = {\n    width: dimensions?.width,\n    height: dimensions?.height,\n  } as React.CSSProperties;\n\n  const content = React.useMemo(() => {\n    if (!activeId) return null;\n    if (typeof children === 'function') {\n      return children({\n        value: activeId,\n        variant: isColumn(activeId) ? 'column' : 'item',\n      });\n    }\n    return children;\n  }, [activeId, children, isColumn]);\n\n  return (\n    <DragOverlay dropAnimation={dropAnimationConfig}>\n      <div\n        data-slot=\"kanban-overlay\"\n        data-dragging={true}\n        style={style}\n        className={cn('pointer-events-none', className, activeId ? '!cursor-grabbing' : '')}\n      >\n        {content}\n      </div>\n    </DragOverlay>\n  );\n}\n\n// Sortable Item Context\nconst SortableItemContext = React.createContext<{\n  listeners: DraggableSyntheticListeners | undefined;\n  isDragging?: boolean;\n  disabled?: boolean;\n}>({\n  listeners: undefined,\n  isDragging: false,\n  disabled: false,\n});\n\n// Multipurpose Sortable Component\nexport interface SortableRootProps<T> {\n  value: T[];\n  onValueChange: (value: T[]) => void;\n  getItemValue: (item: T) => string;\n  children: React.ReactNode;\n  className?: string;\n  onMove?: (event: { event: DragEndEvent; activeIndex: number; overIndex: number }) => void;\n  strategy?: 'horizontal' | 'vertical' | 'grid';\n  onDragStart?: (event: DragStartEvent) => void;\n  onDragEnd?: (event: DragEndEvent) => void;\n}\n\nfunction Sortable<T>({\n  value,\n  onValueChange,\n  getItemValue,\n  children,\n  className,\n  onMove,\n  strategy = 'vertical',\n  onDragStart,\n  onDragEnd,\n}: SortableRootProps<T>) {\n  const [activeId, setActiveId] = React.useState<UniqueIdentifier | null>(null);\n\n  const sensors = useSensors(\n    useSensor(PointerSensor, {\n      activationConstraint: {\n        distance: 10,\n      },\n    }),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    }),\n  );\n\n  const handleDragStart = React.useCallback(\n    (event: DragStartEvent) => {\n      setActiveId(event.active.id);\n      onDragStart?.(event);\n    },\n    [onDragStart],\n  );\n\n  const handleDragEnd = React.useCallback(\n    (event: DragEndEvent) => {\n      const { active, over } = event;\n      setActiveId(null);\n      onDragEnd?.(event);\n\n      if (!over) return;\n\n      // Handle item reordering\n      const activeIndex = value.findIndex((item: T) => getItemValue(item) === active.id);\n      const overIndex = value.findIndex((item: T) => getItemValue(item) === over.id);\n\n      if (activeIndex !== overIndex) {\n        if (onMove) {\n          onMove({ event, activeIndex, overIndex });\n        } else {\n          const newValue = arrayMove(value, activeIndex, overIndex);\n          onValueChange(newValue);\n        }\n      }\n    },\n    [value, getItemValue, onValueChange, onMove, onDragEnd],\n  );\n\n  const getStrategy = () => {\n    switch (strategy) {\n      case 'horizontal':\n        return rectSortingStrategy;\n      case 'grid':\n        return rectSortingStrategy;\n      case 'vertical':\n      default:\n        return verticalListSortingStrategy;\n    }\n  };\n\n  const itemIds = React.useMemo(() => value.map(getItemValue), [value, getItemValue]);\n\n  return (\n    <DndContext sensors={sensors} onDragStart={handleDragStart} onDragEnd={handleDragEnd}>\n      <SortableContext items={itemIds} strategy={getStrategy()}>\n        <div data-slot=\"sortable\" data-dragging={activeId !== null} className={cn(className)}>\n          {children}\n        </div>\n      </SortableContext>\n\n      <DragOverlay>\n        {activeId ? (\n          <div className=\"z-50\">\n            {React.Children.map(children, (child) => {\n              if (React.isValidElement(child) && (child.props as any).value === activeId) {\n                return React.cloneElement(child as React.ReactElement<any>, {\n                  ...(child.props as any),\n                  className: cn((child.props as any).className, 'z-50 shadow-lg'),\n                });\n              }\n              return null;\n            })}\n          </div>\n        ) : null}\n      </DragOverlay>\n    </DndContext>\n  );\n}\n\nexport interface SortableItemProps {\n  value: string;\n  asChild?: boolean;\n  className?: string;\n  children: React.ReactNode;\n  disabled?: boolean;\n}\n\nfunction SortableItem({ value, asChild = false, className, children, disabled }: SortableItemProps) {\n  const {\n    setNodeRef,\n    transform,\n    transition,\n    attributes,\n    listeners,\n    isDragging: isSortableDragging,\n  } = useSortable({\n    id: value,\n    disabled,\n  });\n\n  const style = {\n    transition,\n    transform: CSS.Translate.toString(transform),\n  } as React.CSSProperties;\n\n  const Comp = asChild ? Slot : 'div';\n\n  return (\n    <SortableItemContext.Provider value={{ listeners, isDragging: isSortableDragging, disabled }}>\n      <Comp\n        data-slot=\"sortable-item\"\n        data-value={value}\n        data-dragging={isSortableDragging}\n        data-disabled={disabled}\n        ref={setNodeRef}\n        style={style}\n        {...attributes}\n        className={cn(isSortableDragging && 'opacity-50 z-50', disabled && 'opacity-50', className)}\n      >\n        {children}\n      </Comp>\n    </SortableItemContext.Provider>\n  );\n}\n\nexport interface SortableItemHandleProps {\n  asChild?: boolean;\n  className?: string;\n  children?: React.ReactNode;\n  cursor?: boolean;\n}\n\nfunction SortableItemHandle({ asChild, className, children, cursor = true }: SortableItemHandleProps) {\n  const { listeners, isDragging, disabled } = React.useContext(SortableItemContext);\n\n  const Comp = asChild ? Slot : 'div';\n\n  return (\n    <Comp\n      data-slot=\"sortable-item-handle\"\n      data-dragging={isDragging}\n      data-disabled={disabled}\n      {...listeners}\n      className={cn(cursor && (isDragging ? '!cursor-grabbing' : '!cursor-grab'), className)}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nexport {\n  Kanban,\n  KanbanBoard,\n  KanbanColumn,\n  KanbanColumnHandle,\n  KanbanItem,\n  KanbanItemHandle,\n  KanbanColumnContent,\n  KanbanOverlay,\n  // New multipurpose sortable components\n  Sortable,\n  SortableItem,\n  SortableItemHandle,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "registry/default/ui/button.tsx",
      "content": "import * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { ChevronDown, LucideIcon } from 'lucide-react';\nimport { Slot as SlotPrimitive } from 'radix-ui';\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  'cursor-pointer group whitespace-nowrap focus-visible:outline-hidden inline-flex items-center justify-center has-data-[arrow=true]:justify-between whitespace-nowrap text-sm font-medium ring-offset-background transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-60 [&_svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        primary: 'bg-primary text-primary-foreground hover:bg-primary/90 data-[state=open]:bg-primary/90',\n        mono: 'bg-zinc-950 text-white dark:bg-zinc-300 dark:text-black hover:bg-zinc-950/90 dark:hover:bg-zinc-300/90 data-[state=open]:bg-zinc-950/90 dark:data-[state=open]:bg-zinc-300/90',\n        destructive:\n          'bg-destructive text-destructive-foreground hover:bg-destructive/90 data-[state=open]:bg-destructive/90',\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/90 data-[state=open]:bg-secondary/90',\n        outline: 'bg-background text-accent-foreground border border-input hover:bg-accent data-[state=open]:bg-accent',\n        dashed:\n          'text-accent-foreground border border-input border-dashed bg-background hover:bg-accent hover:text-accent-foreground data-[state=open]:text-accent-foreground',\n        ghost:\n          'text-accent-foreground hover:bg-accent hover:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',\n        dim: 'text-muted-foreground hover:text-foreground data-[state=open]:text-foreground',\n        foreground: '',\n        inverse: '',\n      },\n      appearance: {\n        default: '',\n        ghost: '',\n      },\n      underline: {\n        solid: '',\n        dashed: '',\n      },\n      underlined: {\n        solid: '',\n        dashed: '',\n      },\n      size: {\n        lg: 'h-10 rounded-md px-4 text-sm gap-1.5 [&_svg:not([class*=size-])]:size-4',\n        md: 'h-8.5 rounded-md px-3 gap-1.5 text-[0.8125rem] leading-(--text-sm--line-height) [&_svg:not([class*=size-])]:size-4',\n        sm: 'h-7 rounded-md px-2.5 gap-1.25 text-xs [&_svg:not([class*=size-])]:size-3.5',\n        icon: 'size-8.5 rounded-md [&_svg:not([class*=size-])]:size-4 shrink-0',\n      },\n      autoHeight: {\n        true: '',\n        false: '',\n      },\n      shape: {\n        default: '',\n        circle: 'rounded-full',\n      },\n      mode: {\n        default: 'focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n        icon: 'focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 shrink-0',\n        link: 'text-primary h-auto p-0 bg-transparent rounded-none hover:bg-transparent data-[state=open]:bg-transparent',\n        input: `\n            justify-start font-normal hover:bg-background [&_svg]:transition-colors [&_svg]:hover:text-foreground data-[state=open]:bg-background \n            focus-visible:border-ring focus-visible:outline-hidden focus-visible:ring-[3px] focus-visible:ring-ring/30 \n            [[data-state=open]>&]:border-ring [[data-state=open]>&]:outline-hidden [[data-state=open]>&]:ring-[3px] \n            [[data-state=open]>&]:ring-ring/30 \n            aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n            in-data-[invalid=true]:border-destructive/60 in-data-[invalid=true]:ring-destructive/10  dark:in-data-[invalid=true]:border-destructive dark:in-data-[invalid=true]:ring-destructive/20\n          `,\n      },\n      placeholder: {\n        true: 'text-muted-foreground',\n        false: '',\n      },\n    },\n    compoundVariants: [\n      // Icons opacity for default mode\n      {\n        variant: 'ghost',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'outline',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'dashed',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'secondary',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n\n      // Icons opacity for default mode\n      {\n        variant: 'outline',\n        mode: 'input',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'outline',\n        mode: 'icon',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n\n      // Auto height\n      {\n        size: 'md',\n        autoHeight: true,\n        className: 'h-auto min-h-8.5',\n      },\n      {\n        size: 'sm',\n        autoHeight: true,\n        className: 'h-auto min-h-7',\n      },\n      {\n        size: 'lg',\n        autoHeight: true,\n        className: 'h-auto min-h-10',\n      },\n\n      // Shadow support\n      {\n        variant: 'primary',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'mono',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'secondary',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'outline',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'dashed',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'destructive',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n\n      // Shadow support\n      {\n        variant: 'primary',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'mono',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'secondary',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'outline',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'dashed',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'destructive',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n\n      // Link\n      {\n        variant: 'primary',\n        mode: 'link',\n        underline: 'solid',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-solid',\n      },\n      {\n        variant: 'primary',\n        mode: 'link',\n        underline: 'dashed',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-dashed decoration-1',\n      },\n      {\n        variant: 'primary',\n        mode: 'link',\n        underlined: 'solid',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-solid',\n      },\n      {\n        variant: 'primary',\n        mode: 'link',\n        underlined: 'dashed',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg]:opacity-60 underline underline-offset-4 decoration-dashed decoration-1',\n      },\n\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underline: 'solid',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-solid',\n      },\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underline: 'dashed',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-dashed decoration-1',\n      },\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underlined: 'solid',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-solid',\n      },\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underlined: 'dashed',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-dashed decoration-1',\n      },\n\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underline: 'solid',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-solid',\n      },\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underline: 'dashed',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-dashed decoration-1',\n      },\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underlined: 'solid',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-solid',\n      },\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underlined: 'dashed',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-dashed decoration-1',\n      },\n\n      // Ghost\n      {\n        variant: 'primary',\n        appearance: 'ghost',\n        className: 'bg-transparent text-primary/90 hover:bg-primary/5 data-[state=open]:bg-primary/5',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'ghost',\n        className: 'bg-transparent text-destructive/90 hover:bg-destructive/5 data-[state=open]:bg-destructive/5',\n      },\n      {\n        variant: 'ghost',\n        mode: 'icon',\n        className: 'text-muted-foreground',\n      },\n\n      // Size\n      {\n        size: 'sm',\n        mode: 'icon',\n        className: 'w-7 h-7 p-0 [[&_svg:not([class*=size-])]:size-3.5',\n      },\n      {\n        size: 'md',\n        mode: 'icon',\n        className: 'w-8.5 h-8.5 p-0 [&_svg:not([class*=size-])]:size-4',\n      },\n      {\n        size: 'icon',\n        className: 'w-8.5 h-8.5 p-0 [&_svg:not([class*=size-])]:size-4',\n      },\n      {\n        size: 'lg',\n        mode: 'icon',\n        className: 'w-10 h-10 p-0 [&_svg:not([class*=size-])]:size-4',\n      },\n\n      // Input mode\n      {\n        mode: 'input',\n        placeholder: true,\n        variant: 'outline',\n        className: 'font-normal text-muted-foreground',\n      },\n      {\n        mode: 'input',\n        variant: 'outline',\n        size: 'sm',\n        className: 'gap-1.25',\n      },\n      {\n        mode: 'input',\n        variant: 'outline',\n        size: 'md',\n        className: 'gap-1.5',\n      },\n      {\n        mode: 'input',\n        variant: 'outline',\n        size: 'lg',\n        className: 'gap-1.5',\n      },\n    ],\n    defaultVariants: {\n      variant: 'primary',\n      mode: 'default',\n      size: 'md',\n      shape: 'default',\n      appearance: 'default',\n    },\n  },\n);\n\nfunction Button({\n  className,\n  selected,\n  variant,\n  shape,\n  appearance,\n  mode,\n  size,\n  autoHeight,\n  underlined,\n  underline,\n  asChild = false,\n  placeholder = false,\n  ...props\n}: React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    selected?: boolean;\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? SlotPrimitive.Slot : 'button';\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(\n        buttonVariants({\n          variant,\n          size,\n          shape,\n          appearance,\n          mode,\n          autoHeight,\n          placeholder,\n          underlined,\n          underline,\n          className,\n        }),\n        asChild && props.disabled && 'pointer-events-none opacity-50',\n      )}\n      {...(selected && { 'data-state': 'open' })}\n      {...props}\n    />\n  );\n}\n\ninterface ButtonArrowProps extends React.SVGProps<SVGSVGElement> {\n  icon?: LucideIcon; // Allows passing any Lucide icon\n}\n\nfunction ButtonArrow({ icon: Icon = ChevronDown, className, ...props }: ButtonArrowProps) {\n  return <Icon data-slot=\"button-arrow\" className={cn('ms-auto -me-1', className)} {...props} />;\n}\n\nexport { Button, ButtonArrow, buttonVariants };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
