{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "grid-background-default",
  "type": "registry:component",
  "dependencies": ["motion"],
  "registryDependencies": ["https://reui.io/r/grid-background.json"],
  "files": [
    {
      "path": "registry/default/components/grid-background/default.tsx",
      "content": "import { GridBackground } from '@/registry/default/ui/grid-background';\n\nexport default function Component() {\n  return (\n    <div className=\"relative h-96 w-full rounded-xl overflow-hidden\">\n      <GridBackground gridSize=\"6:6\"></GridBackground>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/grid-background.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { HTMLMotionProps, motion } from 'motion/react';\nimport { cn } from '@/lib/utils';\n\ntype GridSize = '4:4' | '5:5' | '6:6' | '6:8' | '8:8' | '8:12' | '10:10' | '12:12' | '12:16' | '16:16';\n\ntype GridBackgroundProps = HTMLMotionProps<'div'> & {\n  children?: React.ReactNode;\n  gridSize?: GridSize;\n  colors?: {\n    background?: string;\n    borderColor?: string;\n    borderSize?: string;\n    borderStyle?: 'solid' | 'dashed' | 'dotted';\n  };\n  beams?: {\n    count?: number;\n    colors?: string[];\n    size?: string;\n    shadow?: string;\n    speed?: number;\n  };\n};\n\nfunction GridBackground({\n  className,\n  children,\n  gridSize = '8:8',\n  colors = {},\n  beams = {},\n  ...props\n}: GridBackgroundProps) {\n  const {\n    background = 'bg-slate-900',\n    borderColor = 'border-slate-700/50',\n    borderSize = '1px',\n    borderStyle = 'solid',\n  } = colors;\n\n  const {\n    count = 12,\n    colors: beamColors = [\n      'bg-cyan-400',\n      'bg-purple-400',\n      'bg-fuchsia-400',\n      'bg-violet-400',\n      'bg-blue-400',\n      'bg-indigo-400',\n      'bg-green-400',\n      'bg-yellow-400',\n      'bg-orange-400',\n      'bg-red-400',\n      'bg-pink-400',\n      'bg-rose-400',\n    ],\n    shadow = 'shadow-lg shadow-cyan-400/50 rounded-full',\n    speed = 4,\n  } = beams;\n\n  // Parse grid dimensions\n  const [cols, rows] = gridSize.split(':').map(Number);\n\n  // Generate beam configurations\n  const animatedBeams = React.useMemo(\n    () =>\n      Array.from({ length: Math.min(count, 12) }, (_, i) => {\n        const direction = Math.random() > 0.5 ? 'horizontal' : 'vertical';\n        const startPosition = Math.random() > 0.5 ? 'start' : 'end';\n\n        return {\n          id: i,\n          color: beamColors[i % beamColors.length],\n          direction,\n          startPosition,\n          // For horizontal beams: choose a row index (1 to rows-1) - exclude edges\n          // For vertical beams: choose a column index (1 to cols-1) - exclude edges\n          gridLine:\n            direction === 'horizontal'\n              ? Math.floor(Math.random() * (rows - 1)) + 1\n              : Math.floor(Math.random() * (cols - 1)) + 1,\n          delay: Math.random() * 2,\n          duration: speed + Math.random() * 2,\n        };\n      }),\n    [count, beamColors, speed, cols, rows],\n  );\n\n  const gridStyle = {\n    '--border-style': borderStyle,\n  } as React.CSSProperties;\n\n  return (\n    <motion.div\n      data-slot=\"grid-background\"\n      className={cn('relative size-full overflow-hidden', background, className)}\n      style={gridStyle}\n      {...props}\n    >\n      {/* Grid Container */}\n      <div\n        className={cn('absolute inset-0 size-full', borderColor)}\n        style={{\n          display: 'grid',\n          gridTemplateColumns: `repeat(${cols}, 1fr)`,\n          gridTemplateRows: `repeat(${rows}, 1fr)`,\n          borderRightWidth: borderSize,\n          borderBottomWidth: borderSize,\n          borderRightStyle: borderStyle,\n          borderBottomStyle: borderStyle,\n        }}\n      >\n        {/* Grid Cells */}\n        {Array.from({ length: cols * rows }).map((_, index) => (\n          <div\n            key={index}\n            className={cn('relative', borderColor)}\n            style={{\n              borderTopWidth: borderSize,\n              borderLeftWidth: borderSize,\n              borderTopStyle: borderStyle,\n              borderLeftStyle: borderStyle,\n            }}\n          />\n        ))}\n      </div>\n\n      {/* Animated Beams */}\n      {animatedBeams.map((beam) => {\n        // Calculate exact grid line positions as percentages\n        const horizontalPosition = (beam.gridLine / rows) * 100;\n        const verticalPosition = (beam.gridLine / cols) * 100;\n\n        return (\n          <motion.div\n            key={beam.id}\n            className={cn(\n              'absolute rounded-full backdrop-blur-sm z-20',\n              beam.color,\n              beam.direction === 'horizontal' ? 'w-6 h-0.5' : 'w-0.5 h-6',\n              shadow,\n            )}\n            style={{\n              ...(beam.direction === 'horizontal'\n                ? {\n                    // Position exactly on the horizontal grid line\n                    top: `${horizontalPosition}%`,\n                    left: beam.startPosition === 'start' ? '-12px' : 'calc(100% + 12px)',\n                    transform: 'translateY(-50%)', // Center on the line\n                  }\n                : {\n                    // Position exactly on the vertical grid line\n                    left: `${verticalPosition}%`,\n                    top: beam.startPosition === 'start' ? '-12px' : 'calc(100% + 12px)',\n                    transform: 'translateX(-50%)', // Center on the line\n                  }),\n            }}\n            initial={{\n              opacity: 0,\n            }}\n            animate={{\n              opacity: [0, 1, 1, 0],\n              ...(beam.direction === 'horizontal'\n                ? {\n                    // Move across the full width of the container\n                    x: beam.startPosition === 'start' ? [0, 'calc(100vw + 24px)'] : [0, 'calc(-100vw - 24px)'],\n                  }\n                : {\n                    // Move across the full height of the container\n                    y: beam.startPosition === 'start' ? [0, 'calc(100vh + 24px)'] : [0, 'calc(-100vh - 24px)'],\n                  }),\n            }}\n            transition={{\n              duration: beam.duration,\n              delay: beam.delay,\n              repeat: Infinity,\n              repeatDelay: Math.random() * 3 + 2, // 2-5s pause between repeats\n              ease: 'linear',\n              times: [0, 0.1, 0.9, 1], // Quick fade in, maintain, quick fade out\n            }}\n          />\n        );\n      })}\n\n      {/* Content Layer */}\n      <div className=\"relative z-10 size-full\">{children}</div>\n    </motion.div>\n  );\n}\n\nexport { GridBackground, type GridBackgroundProps };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
