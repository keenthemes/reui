{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-grid-column-header",
  "type": "registry:ui",
  "dependencies": [
    "@tanstack/react-table",
    "clsx",
    "tailwind-merge",
    "class-variance-authority",
    "lucide-react",
    "radix-ui"
  ],
  "registryDependencies": [
    "https://reui.io/r/button.json",
    "https://reui.io/r/data-grid.json",
    "https://reui.io/r/dropdown-menu.json"
  ],
  "files": [
    {
      "path": "registry/default/ui/data-grid-column-header.tsx",
      "content": "import { HTMLAttributes, ReactNode } from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Button } from '@/registry/default/ui/button';\nimport { useDataGrid } from '@/registry/default/ui/data-grid';\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuPortal,\n  DropdownMenuSeparator,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from '@/registry/default/ui/dropdown-menu';\nimport { Column } from '@tanstack/react-table';\nimport {\n  ArrowDown,\n  ArrowLeft,\n  ArrowLeftToLine,\n  ArrowRight,\n  ArrowRightToLine,\n  ArrowUp,\n  Check,\n  ChevronsUpDown,\n  PinOff,\n  Settings2,\n} from 'lucide-react';\n\ninterface DataGridColumnHeaderProps<TData, TValue> extends HTMLAttributes<HTMLDivElement> {\n  column: Column<TData, TValue>;\n  title?: string;\n  icon?: ReactNode;\n  pinnable?: boolean;\n  filter?: ReactNode;\n  visibility?: boolean;\n}\n\nfunction DataGridColumnHeader<TData, TValue>({\n  column,\n  title = '',\n  icon,\n  className,\n  filter,\n  visibility = false,\n}: DataGridColumnHeaderProps<TData, TValue>) {\n  const { isLoading, table, props, recordCount } = useDataGrid();\n\n  const moveColumn = (direction: 'left' | 'right') => {\n    const currentOrder = [...table.getState().columnOrder]; // Get current column order\n    const currentIndex = currentOrder.indexOf(column.id); // Get current index of the column\n\n    if (direction === 'left' && currentIndex > 0) {\n      // Move column left\n      const newOrder = [...currentOrder];\n      const [movedColumn] = newOrder.splice(currentIndex, 1);\n      newOrder.splice(currentIndex - 1, 0, movedColumn);\n      table.setColumnOrder(newOrder); // Update column order\n    }\n\n    if (direction === 'right' && currentIndex < currentOrder.length - 1) {\n      // Move column right\n      const newOrder = [...currentOrder];\n      const [movedColumn] = newOrder.splice(currentIndex, 1);\n      newOrder.splice(currentIndex + 1, 0, movedColumn);\n      table.setColumnOrder(newOrder); // Update column order\n    }\n  };\n\n  const canMove = (direction: 'left' | 'right'): boolean => {\n    const currentOrder = table.getState().columnOrder;\n    const currentIndex = currentOrder.indexOf(column.id);\n    if (direction === 'left') {\n      return currentIndex > 0;\n    } else {\n      return currentIndex < currentOrder.length - 1;\n    }\n  };\n\n  const headerLabel = () => {\n    return (\n      <div\n        className={cn(\n          'text-accent-foreground font-normal inline-flex h-full items-center gap-1.5 text-[0.8125rem] leading-[calc(1.125/0.8125)] [&_svg]:size-3.5 [&_svg]:opacity-60',\n          className,\n        )}\n      >\n        {icon && icon}\n        {title}\n      </div>\n    );\n  };\n\n  const headerButton = () => {\n    return (\n      <Button\n        variant=\"ghost\"\n        className={cn(\n          'text-secondary-foreground rounded-md font-normal -ms-2 px-2 h-7 hover:bg-secondary data-[state=open]:bg-secondary hover:text-foreground data-[state=open]:text-foreground',\n          className,\n        )}\n        disabled={isLoading || recordCount === 0}\n        onClick={() => {\n          const isSorted = column.getIsSorted();\n          if (isSorted === 'asc') {\n            column.toggleSorting(true);\n          } else if (isSorted === 'desc') {\n            column.clearSorting();\n          } else {\n            column.toggleSorting(false);\n          }\n        }}\n      >\n        {icon && icon}\n        {title}\n\n        {column.getCanSort() &&\n          (column.getIsSorted() === 'desc' ? (\n            <ArrowDown className=\"size-[0.7rem]! mt-px\" />\n          ) : column.getIsSorted() === 'asc' ? (\n            <ArrowUp className=\"size-[0.7rem]! mt-px\" />\n          ) : (\n            <ChevronsUpDown className=\"size-[0.7rem]! mt-px\" />\n          ))}\n      </Button>\n    );\n  };\n\n  const headerPin = () => {\n    return (\n      <Button\n        mode=\"icon\"\n        size=\"sm\"\n        variant=\"ghost\"\n        className=\"-me-1 size-7 rounded-md\"\n        onClick={() => column.pin(false)}\n        aria-label={`Unpin ${title} column`}\n        title={`Unpin ${title} column`}\n      >\n        <PinOff className=\"size-3.5! opacity-50!\" aria-hidden=\"true\" />\n      </Button>\n    );\n  };\n\n  const headerControls = () => {\n    return (\n      <div className=\"flex items-center h-full gap-1.5 justify-between\">\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>{headerButton()}</DropdownMenuTrigger>\n          <DropdownMenuContent className=\"w-40\" align=\"start\">\n            {filter && <DropdownMenuLabel>{filter}</DropdownMenuLabel>}\n\n            {filter && (column.getCanSort() || column.getCanPin() || visibility) && <DropdownMenuSeparator />}\n\n            {column.getCanSort() && (\n              <>\n                <DropdownMenuItem\n                  onClick={() => {\n                    if (column.getIsSorted() === 'asc') {\n                      column.clearSorting();\n                    } else {\n                      column.toggleSorting(false);\n                    }\n                  }}\n                  disabled={!column.getCanSort()}\n                >\n                  <ArrowUp className=\"size-3.5!\" />\n                  <span className=\"grow\">Asc</span>\n                  {column.getIsSorted() === 'asc' && <Check className=\"size-4 opacity-100! text-primary\" />}\n                </DropdownMenuItem>\n                <DropdownMenuItem\n                  onClick={() => {\n                    if (column.getIsSorted() === 'desc') {\n                      column.clearSorting();\n                    } else {\n                      column.toggleSorting(true);\n                    }\n                  }}\n                  disabled={!column.getCanSort()}\n                >\n                  <ArrowDown className=\"size-3.5!\" />\n                  <span className=\"grow\">Desc</span>\n                  {column.getIsSorted() === 'desc' && <Check className=\"size-4 opacity-100! text-primary\" />}\n                </DropdownMenuItem>\n              </>\n            )}\n\n            {(filter || column.getCanSort()) && (column.getCanSort() || column.getCanPin() || visibility) && (\n              <DropdownMenuSeparator />\n            )}\n\n            {props.tableLayout?.columnsPinnable && column.getCanPin() && (\n              <>\n                <DropdownMenuItem onClick={() => column.pin(column.getIsPinned() === 'left' ? false : 'left')}>\n                  <ArrowLeftToLine className=\"size-3.5!\" aria-hidden=\"true\" />\n                  <span className=\"grow\">Pin to left</span>\n                  {column.getIsPinned() === 'left' && <Check className=\"size-4 opacity-100! text-primary\" />}\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => column.pin(column.getIsPinned() === 'right' ? false : 'right')}>\n                  <ArrowRightToLine className=\"size-3.5!\" aria-hidden=\"true\" />\n                  <span className=\"grow\">Pin to right</span>\n                  {column.getIsPinned() === 'right' && <Check className=\"size-4 opacity-100! text-primary\" />}\n                </DropdownMenuItem>\n              </>\n            )}\n\n            {props.tableLayout?.columnsMovable && (\n              <>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem\n                  onClick={() => moveColumn('left')}\n                  disabled={!canMove('left') || column.getIsPinned() !== false}\n                >\n                  <ArrowLeft className=\"size-3.5!\" aria-hidden=\"true\" />\n                  <span>Move to Left</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem\n                  onClick={() => moveColumn('right')}\n                  disabled={!canMove('right') || column.getIsPinned() !== false}\n                >\n                  <ArrowRight className=\"size-3.5!\" aria-hidden=\"true\" />\n                  <span>Move to Right</span>\n                </DropdownMenuItem>\n              </>\n            )}\n\n            {props.tableLayout?.columnsVisibility &&\n              visibility &&\n              (column.getCanSort() || column.getCanPin() || filter) && <DropdownMenuSeparator />}\n\n            {props.tableLayout?.columnsVisibility && visibility && (\n              <DropdownMenuSub>\n                <DropdownMenuSubTrigger>\n                  <Settings2 className=\"size-3.5!\" />\n                  <span>Columns</span>\n                </DropdownMenuSubTrigger>\n                <DropdownMenuPortal>\n                  <DropdownMenuSubContent>\n                    {table\n                      .getAllColumns()\n                      .filter((col) => typeof col.accessorFn !== 'undefined' && col.getCanHide())\n                      .map((col) => {\n                        return (\n                          <DropdownMenuCheckboxItem\n                            key={col.id}\n                            checked={col.getIsVisible()}\n                            onSelect={(event) => event.preventDefault()}\n                            onCheckedChange={(value) => col.toggleVisibility(!!value)}\n                            className=\"capitalize\"\n                          >\n                            {col.columnDef.meta?.headerTitle || col.id}\n                          </DropdownMenuCheckboxItem>\n                        );\n                      })}\n                  </DropdownMenuSubContent>\n                </DropdownMenuPortal>\n              </DropdownMenuSub>\n            )}\n          </DropdownMenuContent>\n        </DropdownMenu>\n        {props.tableLayout?.columnsPinnable && column.getCanPin() && column.getIsPinned() && headerPin()}\n      </div>\n    );\n  };\n\n  if (\n    props.tableLayout?.columnsMovable ||\n    (props.tableLayout?.columnsVisibility && visibility) ||\n    (props.tableLayout?.columnsPinnable && column.getCanPin()) ||\n    filter\n  ) {\n    return headerControls();\n  }\n\n  if (column.getCanSort() || (props.tableLayout?.columnsResizable && column.getCanResize())) {\n    return <div className=\"flex items-center h-full\">{headerButton()}</div>;\n  }\n\n  return headerLabel();\n}\n\nexport { DataGridColumnHeader, type DataGridColumnHeaderProps };\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "registry/default/ui/button.tsx",
      "content": "import * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { ChevronDown, LucideIcon } from 'lucide-react';\nimport { Slot as SlotPrimitive } from 'radix-ui';\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  'cursor-pointer group whitespace-nowrap focus-visible:outline-hidden inline-flex items-center justify-center has-data-[arrow=true]:justify-between whitespace-nowrap text-sm font-medium ring-offset-background transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-60 [&_svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        primary: 'bg-primary text-primary-foreground hover:bg-primary/90 data-[state=open]:bg-primary/90',\n        mono: 'bg-zinc-950 text-white dark:bg-zinc-300 dark:text-black hover:bg-zinc-950/90 dark:hover:bg-zinc-300/90 data-[state=open]:bg-zinc-950/90 dark:data-[state=open]:bg-zinc-300/90',\n        destructive:\n          'bg-destructive text-destructive-foreground hover:bg-destructive/90 data-[state=open]:bg-destructive/90',\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/90 data-[state=open]:bg-secondary/90',\n        outline: 'bg-background text-accent-foreground border border-input hover:bg-accent data-[state=open]:bg-accent',\n        dashed:\n          'text-accent-foreground border border-input border-dashed bg-background hover:bg-accent hover:text-accent-foreground data-[state=open]:text-accent-foreground',\n        ghost:\n          'text-accent-foreground hover:bg-accent hover:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',\n        dim: 'text-muted-foreground hover:text-foreground data-[state=open]:text-foreground',\n        foreground: '',\n        inverse: '',\n      },\n      appearance: {\n        default: '',\n        ghost: '',\n      },\n      underline: {\n        solid: '',\n        dashed: '',\n      },\n      underlined: {\n        solid: '',\n        dashed: '',\n      },\n      size: {\n        lg: 'h-10 rounded-md px-4 text-sm gap-1.5 [&_svg:not([class*=size-])]:size-4',\n        md: 'h-8.5 rounded-md px-3 gap-1.5 text-[0.8125rem] leading-(--text-sm--line-height) [&_svg:not([class*=size-])]:size-4',\n        sm: 'h-7 rounded-md px-2.5 gap-1.25 text-xs [&_svg:not([class*=size-])]:size-3.5',\n        icon: 'size-8.5 rounded-md [&_svg:not([class*=size-])]:size-4 shrink-0',\n      },\n      autoHeight: {\n        true: '',\n        false: '',\n      },\n      shape: {\n        default: '',\n        circle: 'rounded-full',\n      },\n      mode: {\n        default: 'focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n        icon: 'focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 shrink-0',\n        link: 'text-primary h-auto p-0 bg-transparent rounded-none hover:bg-transparent data-[state=open]:bg-transparent',\n        input: `\n            justify-start font-normal hover:bg-background [&_svg]:transition-colors [&_svg]:hover:text-foreground data-[state=open]:bg-background \n            focus-visible:border-ring focus-visible:outline-hidden focus-visible:ring-[3px] focus-visible:ring-ring/30 \n            [[data-state=open]>&]:border-ring [[data-state=open]>&]:outline-hidden [[data-state=open]>&]:ring-[3px] \n            [[data-state=open]>&]:ring-ring/30 \n            aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n            in-data-[invalid=true]:border-destructive/60 in-data-[invalid=true]:ring-destructive/10  dark:in-data-[invalid=true]:border-destructive dark:in-data-[invalid=true]:ring-destructive/20\n          `,\n      },\n      placeholder: {\n        true: 'text-muted-foreground',\n        false: '',\n      },\n    },\n    compoundVariants: [\n      // Icons opacity for default mode\n      {\n        variant: 'ghost',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'outline',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'dashed',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'secondary',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n\n      // Icons opacity for default mode\n      {\n        variant: 'outline',\n        mode: 'input',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'outline',\n        mode: 'icon',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n\n      // Auto height\n      {\n        size: 'md',\n        autoHeight: true,\n        className: 'h-auto min-h-8.5',\n      },\n      {\n        size: 'sm',\n        autoHeight: true,\n        className: 'h-auto min-h-7',\n      },\n      {\n        size: 'lg',\n        autoHeight: true,\n        className: 'h-auto min-h-10',\n      },\n\n      // Shadow support\n      {\n        variant: 'primary',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'mono',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'secondary',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'outline',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'dashed',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'destructive',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n\n      // Shadow support\n      {\n        variant: 'primary',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'mono',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'secondary',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'outline',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'dashed',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'destructive',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n\n      // Link\n      {\n        variant: 'primary',\n        mode: 'link',\n        underline: 'solid',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-solid',\n      },\n      {\n        variant: 'primary',\n        mode: 'link',\n        underline: 'dashed',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-dashed decoration-1',\n      },\n      {\n        variant: 'primary',\n        mode: 'link',\n        underlined: 'solid',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-solid',\n      },\n      {\n        variant: 'primary',\n        mode: 'link',\n        underlined: 'dashed',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg]:opacity-60 underline underline-offset-4 decoration-dashed decoration-1',\n      },\n\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underline: 'solid',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-solid',\n      },\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underline: 'dashed',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-dashed decoration-1',\n      },\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underlined: 'solid',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-solid',\n      },\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underlined: 'dashed',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-dashed decoration-1',\n      },\n\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underline: 'solid',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-solid',\n      },\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underline: 'dashed',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-dashed decoration-1',\n      },\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underlined: 'solid',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-solid',\n      },\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underlined: 'dashed',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-dashed decoration-1',\n      },\n\n      // Ghost\n      {\n        variant: 'primary',\n        appearance: 'ghost',\n        className: 'bg-transparent text-primary/90 hover:bg-primary/5 data-[state=open]:bg-primary/5',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'ghost',\n        className: 'bg-transparent text-destructive/90 hover:bg-destructive/5 data-[state=open]:bg-destructive/5',\n      },\n      {\n        variant: 'ghost',\n        mode: 'icon',\n        className: 'text-muted-foreground',\n      },\n\n      // Size\n      {\n        size: 'sm',\n        mode: 'icon',\n        className: 'w-7 h-7 p-0 [[&_svg:not([class*=size-])]:size-3.5',\n      },\n      {\n        size: 'md',\n        mode: 'icon',\n        className: 'w-8.5 h-8.5 p-0 [&_svg:not([class*=size-])]:size-4',\n      },\n      {\n        size: 'icon',\n        className: 'w-8.5 h-8.5 p-0 [&_svg:not([class*=size-])]:size-4',\n      },\n      {\n        size: 'lg',\n        mode: 'icon',\n        className: 'w-10 h-10 p-0 [&_svg:not([class*=size-])]:size-4',\n      },\n\n      // Input mode\n      {\n        mode: 'input',\n        placeholder: true,\n        variant: 'outline',\n        className: 'font-normal text-muted-foreground',\n      },\n      {\n        mode: 'input',\n        variant: 'outline',\n        size: 'sm',\n        className: 'gap-1.25',\n      },\n      {\n        mode: 'input',\n        variant: 'outline',\n        size: 'md',\n        className: 'gap-1.5',\n      },\n      {\n        mode: 'input',\n        variant: 'outline',\n        size: 'lg',\n        className: 'gap-1.5',\n      },\n    ],\n    defaultVariants: {\n      variant: 'primary',\n      mode: 'default',\n      size: 'md',\n      shape: 'default',\n      appearance: 'default',\n    },\n  },\n);\n\nfunction Button({\n  className,\n  selected,\n  variant,\n  shape,\n  appearance,\n  mode,\n  size,\n  autoHeight,\n  underlined,\n  underline,\n  asChild = false,\n  placeholder = false,\n  ...props\n}: React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    selected?: boolean;\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? SlotPrimitive.Slot : 'button';\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(\n        buttonVariants({\n          variant,\n          size,\n          shape,\n          appearance,\n          mode,\n          autoHeight,\n          placeholder,\n          underlined,\n          underline,\n          className,\n        }),\n        asChild && props.disabled && 'pointer-events-none opacity-50',\n      )}\n      {...(selected && { 'data-state': 'open' })}\n      {...props}\n    />\n  );\n}\n\ninterface ButtonArrowProps extends React.SVGProps<SVGSVGElement> {\n  icon?: LucideIcon; // Allows passing any Lucide icon\n}\n\nfunction ButtonArrow({ icon: Icon = ChevronDown, className, ...props }: ButtonArrowProps) {\n  return <Icon data-slot=\"button-arrow\" className={cn('ms-auto -me-1', className)} {...props} />;\n}\n\nexport { Button, ButtonArrow, buttonVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/data-grid.tsx",
      "content": "'use client';\n\nimport { createContext, ReactNode, useContext } from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { ColumnFiltersState, RowData, SortingState, Table } from '@tanstack/react-table';\n\ndeclare module '@tanstack/react-table' {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface ColumnMeta<TData extends RowData, TValue> {\n    headerTitle?: string;\n    headerClassName?: string;\n    cellClassName?: string;\n    skeleton?: ReactNode;\n    expandedContent?: (row: TData) => ReactNode;\n  }\n}\n\nexport type DataGridApiFetchParams = {\n  pageIndex: number;\n  pageSize: number;\n  sorting?: SortingState;\n  filters?: ColumnFiltersState;\n  searchQuery?: string;\n};\n\nexport type DataGridApiResponse<T> = {\n  data: T[];\n  empty: boolean;\n  pagination: {\n    total: number;\n    page: number;\n  };\n};\n\nexport interface DataGridContextProps<TData extends object> {\n  props: DataGridProps<TData>;\n  table: Table<TData>;\n  recordCount: number;\n  isLoading: boolean;\n}\n\nexport type DataGridRequestParams = {\n  pageIndex: number;\n  pageSize: number;\n  sorting?: SortingState;\n  columnFilters?: ColumnFiltersState;\n};\n\nexport interface DataGridProps<TData extends object> {\n  className?: string;\n  table?: Table<TData>;\n  recordCount: number;\n  children?: ReactNode;\n  onRowClick?: (row: TData) => void;\n  isLoading?: boolean;\n  loadingMode?: 'skeleton' | 'spinner';\n  loadingMessage?: ReactNode | string;\n  emptyMessage?: ReactNode | string;\n  tableLayout?: {\n    dense?: boolean;\n    cellBorder?: boolean;\n    rowBorder?: boolean;\n    rowRounded?: boolean;\n    stripped?: boolean;\n    headerBackground?: boolean;\n    headerBorder?: boolean;\n    headerSticky?: boolean;\n    width?: 'auto' | 'fixed';\n    columnsVisibility?: boolean;\n    columnsResizable?: boolean;\n    columnsPinnable?: boolean;\n    columnsMovable?: boolean;\n    columnsDraggable?: boolean;\n    rowsDraggable?: boolean;\n  };\n  tableClassNames?: {\n    base?: string;\n    header?: string;\n    headerRow?: string;\n    headerSticky?: string;\n    body?: string;\n    bodyRow?: string;\n    footer?: string;\n    edgeCell?: string;\n  };\n}\n\nconst DataGridContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  DataGridContextProps<any> | undefined\n>(undefined);\n\nfunction useDataGrid() {\n  const context = useContext(DataGridContext);\n  if (!context) {\n    throw new Error('useDataGrid must be used within a DataGridProvider');\n  }\n  return context;\n}\n\nfunction DataGridProvider<TData extends object>({\n  children,\n  table,\n  ...props\n}: DataGridProps<TData> & { table: Table<TData> }) {\n  return (\n    <DataGridContext.Provider\n      value={{\n        props,\n        table,\n        recordCount: props.recordCount,\n        isLoading: props.isLoading || false,\n      }}\n    >\n      {children}\n    </DataGridContext.Provider>\n  );\n}\n\nfunction DataGrid<TData extends object>({ children, table, ...props }: DataGridProps<TData>) {\n  const defaultProps: Partial<DataGridProps<TData>> = {\n    loadingMode: 'skeleton',\n    tableLayout: {\n      dense: false,\n      cellBorder: false,\n      rowBorder: true,\n      rowRounded: false,\n      stripped: false,\n      headerSticky: false,\n      headerBackground: true,\n      headerBorder: true,\n      width: 'fixed',\n      columnsVisibility: false,\n      columnsResizable: false,\n      columnsPinnable: false,\n      columnsMovable: false,\n      columnsDraggable: false,\n      rowsDraggable: false,\n    },\n    tableClassNames: {\n      base: '',\n      header: '',\n      headerRow: '',\n      headerSticky: 'sticky top-0 z-10 bg-background/90 backdrop-blur-xs',\n      body: '',\n      bodyRow: '',\n      footer: '',\n      edgeCell: '',\n    },\n  };\n\n  const mergedProps: DataGridProps<TData> = {\n    ...defaultProps,\n    ...props,\n    tableLayout: {\n      ...defaultProps.tableLayout,\n      ...(props.tableLayout || {}),\n    },\n    tableClassNames: {\n      ...defaultProps.tableClassNames,\n      ...(props.tableClassNames || {}),\n    },\n  };\n\n  // Ensure table is provided\n  if (!table) {\n    throw new Error('DataGrid requires a \"table\" prop');\n  }\n\n  return (\n    <DataGridProvider table={table} {...mergedProps}>\n      {children}\n    </DataGridProvider>\n  );\n}\n\nfunction DataGridContainer({\n  children,\n  className,\n  border = true,\n}: {\n  children: ReactNode;\n  className?: string;\n  border?: boolean;\n}) {\n  return (\n    <div data-slot=\"data-grid\" className={cn('grid w-full', border && 'border border-border rounded-lg', className)}>\n      {children}\n    </div>\n  );\n}\n\nexport { useDataGrid, DataGridProvider, DataGrid, DataGridContainer };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/dropdown-menu.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Check, ChevronRight, Circle } from 'lucide-react';\nimport { DropdownMenu as DropdownMenuPrimitive } from 'radix-ui';\n\nfunction DropdownMenu({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />;\n}\n\nfunction DropdownMenuPortal({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />;\n}\n\nfunction DropdownMenuTrigger({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return <DropdownMenuPrimitive.Trigger className=\"select-none\" data-slot=\"dropdown-menu-trigger\" {...props} />;\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean;\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      className={cn(\n        'flex cursor-default gap-2 select-none items-center rounded-md px-2 py-1.5 text-sm outline-hidden',\n        'focus:bg-accent focus:text-foreground',\n        'data-[state=open]:bg-accent data-[state=open]:text-foreground',\n        'data-[here=true]:bg-accent data-[here=true]:text-foreground',\n        '[&>svg]:pointer-events-none [&_svg:not([role=img]):not([class*=text-])]:opacity-60 [&>svg]:size-4 [&>svg]:shrink-0',\n        inset && 'ps-8',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRight data-slot=\"dropdown-menu-sub-trigger-indicator\" className=\"ms-auto size-3.5! rtl:rotate-180\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  );\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        'space-y-0.5 z-50 min-w-[8rem] overflow-hidden shadow-md shadow-black/5 rounded-md border border-border bg-popover text-popover-foreground p-2 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          'space-y-0.5 z-50 min-w-[8rem] overflow-hidden rounded-md border border-border bg-popover p-2 text-popover-foreground shadow-md shadow-black/5 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n          className,\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  );\n}\n\nfunction DropdownMenuGroup({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />;\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean;\n  variant?: 'destructive';\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      className={cn(\n        'text-foreground relative flex cursor-default select-none items-center gap-2 rounded-md px-2 py-1.5 text-sm outline-hidden transition-colors data-disabled:pointer-events-none data-disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([role=img]):not([class*=text-])]:opacity-60 [&_svg:not([class*=size-])]:size-4 [&_svg]:shrink-0',\n        'focus:bg-accent focus:text-foreground',\n        'data-[active=true]:bg-accent data-[active=true]:text-accent-foreground',\n        inset && 'ps-8',\n        variant === 'destructive' &&\n          'text-destructive hover:text-destructive focus:text-destructive hover:bg-destructive/5 focus:bg-destructive/5 data-[active=true]:bg-destructive/5',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        'relative flex cursor-default select-none items-center rounded-md py-1.5 ps-8 pe-2 text-sm outline-hidden transition-colors focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50',\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"absolute start-2 flex h-3.5 w-3.5 items-center text-muted-foreground justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <Check className=\"h-4 w-4 text-primary\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  );\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        'relative flex cursor-default select-none items-center rounded-md py-1.5 ps-6 pe-2 text-sm outline-hidden transition-colors focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"absolute start-1.5 flex h-3.5 w-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <Circle className=\"h-1.5 w-1.5 fill-primary stroke-primary\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  );\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean;\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      className={cn('px-2 py-1.5 text-xs text-muted-foreground font-medium', inset && 'ps-8', className)}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuRadioGroup({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return <DropdownMenuPrimitive.RadioGroup data-slot=\"dropdown-menu-radio-group\" {...props} />;\n}\n\nfunction DropdownMenuSeparator({ className, ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn('-mx-2 my-1.5 h-px bg-muted', className)}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuShortcut({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn('ms-auto text-xs tracking-widest opacity-60', className)}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuSub({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />;\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuPortal,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
