{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "radio-group",
  "type": "registry:ui",
  "dependencies": ["radix-ui", "clsx", "tailwind-merge", "class-variance-authority", "lucide-react"],
  "files": [
    {
      "path": "registry/default/ui/radio-group.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport { Circle } from 'lucide-react';\nimport { RadioGroup as RadioGroupPrimitive } from 'radix-ui';\n\ntype RadioVariant = 'primary' | 'mono';\ntype RadioSize = 'sm' | 'md' | 'lg';\n\n// Define a cva function for the RadioGroup root.\nconst radioGroupVariants = cva('grid gap-2.5', {\n  variants: {\n    variant: {\n      primary: '',\n      mono: '',\n    },\n    size: {\n      sm: '',\n      md: '',\n      lg: '',\n    },\n  },\n  defaultVariants: {\n    variant: 'primary',\n    size: 'md',\n  },\n});\n\n// Create a context to pass the variant and size down to items.\nconst RadioGroupContext = React.createContext<{\n  variant: RadioVariant;\n  size: RadioSize;\n}>({ variant: 'primary', size: 'md' });\n\nfunction RadioGroup({\n  className,\n  variant,\n  size,\n  ...props\n}: React.ComponentProps<typeof RadioGroupPrimitive.Root> & VariantProps<typeof radioGroupVariants>) {\n  return (\n    <RadioGroupContext.Provider value={{ variant: variant ?? 'primary', size: size ?? 'md' }}>\n      <RadioGroupPrimitive.Root\n        data-slot=\"radio-group\"\n        className={cn(radioGroupVariants({ variant, size }), className)}\n        {...props}\n      />\n    </RadioGroupContext.Provider>\n  );\n}\n\n// Define variants for the RadioGroupItem using cva.\nconst radioItemVariants = cva(\n  `\n    peer aspect-square rounded-full border outline-hidden ring-offset-background focus:outline-none focus-visible:ring-2 \n    focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\n    aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n    [[data-invalid=true]_&]:border-destructive/60 [[data-invalid=true]_&]:ring-destructive/10  dark:[[data-invalid=true]_&]:border-destructive dark:[[data-invalid=true]_&]:ring-destructive/20\n    border-input text-primary data-[state=checked]:bg-primary data-[state=checked]:border-primary data-[state=checked]:text-primary-foreground  \n  `,\n  {\n    variants: {\n      size: {\n        sm: 'size-4.5 [&_svg]:size-2',\n        md: 'size-5 [&_svg]:size-2.5',\n        lg: 'size-5.5 [&_svg]:size-3',\n      },\n    },\n    defaultVariants: {\n      size: 'md',\n    },\n  },\n);\n\nfunction RadioGroupItem({\n  className,\n  size,\n  ...props\n}: React.ComponentProps<typeof RadioGroupPrimitive.Item> & VariantProps<typeof radioItemVariants>) {\n  // Use the variant and size from context if not provided at the item level.\n  const { size: contextSize } = React.useContext(RadioGroupContext);\n  const effectiveSize = size ?? contextSize;\n\n  return (\n    <RadioGroupPrimitive.Item\n      data-slot=\"radio-group-item\"\n      className={cn(radioItemVariants({ size: effectiveSize }), className)}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator data-slot=\"radio-group-indicator\" className=\"flex items-center justify-center\">\n        <Circle className=\"fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  );\n}\n\nexport { RadioGroup, RadioGroupItem };\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
