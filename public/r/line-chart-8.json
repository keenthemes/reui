{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "line-chart-8",
  "type": "registry:block",
  "dependencies": ["recharts@2.15.1", "clsx", "tailwind-merge", "class-variance-authority", "recharts"],
  "registryDependencies": ["https://reui.io/r/card.json"],
  "files": [
    {
      "path": "registry/default/blocks/charts/line-charts/line-chart-8.tsx",
      "content": "'use client';\n\nimport React from 'react';\nimport { Card, CardContent } from '@/registry/default/ui/card';\nimport { Line, LineChart, ReferenceLine, ResponsiveContainer, Tooltip, YAxis } from 'recharts';\n\n// Business Case 1: SaaS Revenue Tracking (Detailed wavy pattern with micro-fluctuations)\nconst revenueData = [\n  { value: 15000 },\n  { value: 18000 },\n  { value: 25000 },\n  { value: 32000 },\n  { value: 35000 },\n  { value: 28000 },\n  { value: 20000 },\n  { value: 12000 },\n  { value: 5000 },\n  { value: -2000 },\n  { value: -10000 },\n  { value: -18000 },\n  { value: -25000 },\n  { value: -22000 },\n  { value: -15000 },\n  { value: -8000 },\n  { value: 0 },\n  { value: 8000 },\n  { value: 20000 },\n  { value: 28000 },\n  { value: 40000 },\n  { value: 48000 },\n  { value: 50000 },\n  { value: 45000 },\n  { value: 35000 },\n  { value: 25000 },\n  { value: 15000 },\n  { value: 2000 },\n  { value: -5000 },\n  { value: -12000 },\n  { value: -20000 },\n  { value: -28000 },\n  { value: -30000 },\n  { value: -25000 },\n  { value: -15000 },\n  { value: -5000 },\n  { value: 10000 },\n  { value: 22000 },\n  { value: 35000 },\n  { value: 45000 },\n  { value: 55000 },\n  { value: 52000 },\n  { value: 45000 },\n  { value: 35000 },\n  { value: 25000 },\n  { value: 12000 },\n  { value: 5000 },\n  { value: -8000 },\n  { value: -15000 },\n  { value: -12000 },\n  { value: -5000 },\n  { value: 3000 },\n  { value: 15000 },\n  { value: 25000 },\n  { value: 20000 },\n  { value: 10000 },\n  { value: -2000 },\n  { value: -15000 },\n  { value: -20000 },\n  { value: -15000 },\n];\n\n// Business Case 2: E-commerce Conversion Rate (Detailed sine wave with micro-variations)\nconst conversionData = [\n  { value: 0 },\n  { value: 0.8 },\n  { value: 1.5 },\n  { value: 2.2 },\n  { value: 2.8 },\n  { value: 3.2 },\n  { value: 3.5 },\n  { value: 3.4 },\n  { value: 3.2 },\n  { value: 2.6 },\n  { value: 2.0 },\n  { value: 1.2 },\n  { value: 0.5 },\n  { value: -0.2 },\n  { value: -1.2 },\n  { value: -1.8 },\n  { value: -2.5 },\n  { value: -2.8 },\n  { value: -3.0 },\n  { value: -2.9 },\n  { value: -2.8 },\n  { value: -2.2 },\n  { value: -1.5 },\n  { value: -0.8 },\n  { value: 0.2 },\n  { value: 1.0 },\n  { value: 2.0 },\n  { value: 2.8 },\n  { value: 3.5 },\n  { value: 3.9 },\n  { value: 4.2 },\n  { value: 4.1 },\n  { value: 3.8 },\n  { value: 3.2 },\n  { value: 2.5 },\n  { value: 1.5 },\n  { value: 0.8 },\n  { value: 0.2 },\n  { value: -1.0 },\n  { value: -1.6 },\n  { value: -2.5 },\n  { value: -2.9 },\n  { value: -3.2 },\n  { value: -3.0 },\n  { value: -2.0 },\n  { value: -1.2 },\n  { value: 0 },\n  { value: 1.2 },\n  { value: 2.5 },\n  { value: 3.5 },\n  { value: 4.0 },\n  { value: 3.8 },\n  { value: 2.8 },\n  { value: 1.5 },\n  { value: 0.5 },\n  { value: -0.8 },\n  { value: -2.0 },\n  { value: -2.8 },\n  { value: -2.5 },\n  { value: -1.0 },\n];\n\n// Business Case 3: Server Performance Monitoring (Detailed oscillating decline with volatility)\nconst performanceData = [\n  { value: 5 },\n  { value: 8 },\n  { value: 10 },\n  { value: 12 },\n  { value: 8 },\n  { value: 5 },\n  { value: 3 },\n  { value: 0 },\n  { value: -2 },\n  { value: -5 },\n  { value: -8 },\n  { value: -10 },\n  { value: -12 },\n  { value: -10 },\n  { value: -8 },\n  { value: -5 },\n  { value: -3 },\n  { value: 0 },\n  { value: 2 },\n  { value: 4 },\n  { value: 6 },\n  { value: 7 },\n  { value: 4 },\n  { value: 1 },\n  { value: -1 },\n  { value: -4 },\n  { value: -6 },\n  { value: -8 },\n  { value: -10 },\n  { value: -11 },\n  { value: -12 },\n  { value: -10 },\n  { value: -8 },\n  { value: -6 },\n  { value: -4 },\n  { value: -2 },\n  { value: 1 },\n  { value: 3 },\n  { value: 5 },\n  { value: 6 },\n  { value: 3 },\n  { value: 0 },\n  { value: -2 },\n  { value: -5 },\n  { value: -7 },\n  { value: -9 },\n  { value: -11 },\n  { value: -13 },\n  { value: -15 },\n  { value: -13 },\n  { value: -11 },\n  { value: -8 },\n  { value: -5 },\n  { value: -2 },\n  { value: 0 },\n  { value: -3 },\n  { value: -6 },\n  { value: -9 },\n  { value: -12 },\n  { value: -15 },\n];\n\n// Use custom or Tailwind standard colors: https://tailwindcss.com/docs/colors\nconst businessCards = [\n  {\n    title: 'Revenue Variance',\n    metric: 'Monthly change from baseline',\n    baseValue: '+15K',\n    baseCurrency: 'Start',\n    targetValue: '-15K',\n    targetCurrency: 'End',\n    data: revenueData,\n    change: 'Volatile',\n    isPositive: false,\n    color: 'var(--color-blue-500)',\n  },\n  {\n    title: 'Conversion Change',\n    metric: 'Rate variance from zero',\n    baseValue: '50%',\n    baseCurrency: 'Baseline',\n    targetValue: '+60.5%',\n    targetCurrency: 'Current',\n    data: conversionData,\n    change: 'Cyclical',\n    isPositive: true,\n    color: 'var(--color-emerald-500)',\n  },\n  {\n    title: 'Performance Drift',\n    metric: 'System variance tracking',\n    baseValue: '+5%',\n    baseCurrency: 'Peak',\n    targetValue: '-15%',\n    targetCurrency: 'Low',\n    data: performanceData,\n    change: 'Declining',\n    isPositive: false,\n    color: 'var(--color-amber-500)',\n  },\n];\n\nexport default function LineChart8() {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-6 lg:p-12\">\n      {/* Container */}\n      <div className=\"@container grow w-full max-w-7xl\">\n        {/* Grid */}\n        <div className=\"grid grid-cols-1 @3xl:grid-cols-3 gap-6\">\n          {/* Business Cards */}\n          {businessCards.map((card, i) => (\n            <Card key={i}>\n              <CardContent className=\"flex flex-col gap-6\">\n                {/* Header */}\n                <div className=\"flex flex-col\">\n                  <h3 className=\"text-base font-semibold text-foreground m-0\">{card.title}</h3>\n                  <p className=\"text-sm text-muted-foreground m-0\">{card.metric}</p>\n                </div>\n\n                {/* Chart Section */}\n                <div className=\"flex items-center justify-between\">\n                  {/* Left side - Base Currency */}\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-semibold text-foreground\">{card.baseValue}</div>\n                    <div className=\"text-xs text-muted-foreground font-medium\">{card.baseCurrency}</div>\n                  </div>\n\n                  {/* Center - Mini Chart */}\n                  <div className=\"flex-1 h-14 mx-6 relative\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <LineChart\n                        data={card.data}\n                        margin={{\n                          top: 10,\n                          right: 10,\n                          left: 10,\n                          bottom: 10,\n                        }}\n                      >\n                        <YAxis domain={['dataMin', 'dataMax']} hide={true} />\n                        <ReferenceLine y={0} stroke=\"var(--input)\" strokeWidth={1} strokeDasharray=\"3 3\" />\n                        <Tooltip\n                          cursor={{ stroke: card.color, strokeWidth: 1, strokeDasharray: '2 2' }}\n                          position={{ x: undefined, y: undefined }}\n                          offset={10}\n                          allowEscapeViewBox={{ x: true, y: true }}\n                          content={({ active, payload, coordinate }) => {\n                            if (active && payload && payload.length && coordinate) {\n                              const value = payload[0].value;\n                              const formatValue = (val: number) => {\n                                if (card.title === 'Revenue Variance') {\n                                  return val >= 0 ? `+$${val.toLocaleString()}` : `-$${Math.abs(val).toLocaleString()}`;\n                                } else if (card.title === 'Conversion Change') {\n                                  return val >= 0 ? `+${val.toFixed(1)}%` : `${val.toFixed(1)}%`;\n                                } else {\n                                  return val >= 0 ? `+${val}%` : `${val}%`;\n                                }\n                              };\n\n                              // Smart positioning logic\n                              const tooltipStyle: React.CSSProperties = {\n                                transform:\n                                  coordinate.x && coordinate.x > 120 ? 'translateX(-100%)' : 'translateX(10px)',\n                                marginTop: coordinate.y && coordinate.y > 30 ? '-40px' : '10px',\n                              };\n\n                              return (\n                                <div\n                                  className=\"bg-background/95 backdrop-blur-sm border border-border shadow-xl rounded-lg p-2.5 pointer-events-none z-50\"\n                                  style={tooltipStyle}\n                                >\n                                  <p className=\"text-sm font-semibold text-foreground leading-tight mb-1.5\">\n                                    {formatValue(value as number)}\n                                  </p>\n                                  <p className=\"text-xs text-muted-foreground leading-tight\">{card.title}</p>\n                                </div>\n                              );\n                            }\n                            return null;\n                          }}\n                        />\n                        <Line\n                          type=\"monotone\"\n                          dataKey=\"value\"\n                          stroke={card.color}\n                          strokeWidth={2}\n                          dot={{\n                            r: 0,\n                            strokeWidth: 0,\n                          }}\n                          activeDot={{\n                            r: 5,\n                            fill: card.color,\n                            stroke: 'white',\n                            strokeWidth: 2,\n                            filter: `drop-shadow(0 0 6px ${card.color})`,\n                          }}\n                        />\n                      </LineChart>\n                    </ResponsiveContainer>\n                  </div>\n\n                  {/* Right side - Target Currency */}\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-semibold text-foreground\">{card.targetValue}</div>\n                    <div className=\"text-xs text-muted-foreground font-medium\">{card.targetCurrency}</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:block"
    },
    {
      "path": "registry/default/ui/card.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\n// Define CardContext\ntype CardContextType = {\n  variant: 'default' | 'accent';\n};\n\nconst CardContext = React.createContext<CardContextType>({\n  variant: 'default', // Default value\n});\n\n// Hook to use CardContext\nconst useCardContext = () => {\n  const context = React.useContext(CardContext);\n  if (!context) {\n    throw new Error('useCardContext must be used within a Card component');\n  }\n  return context;\n};\n\n// Variants\nconst cardVariants = cva('flex flex-col items-stretch text-card-foreground rounded-xl', {\n  variants: {\n    variant: {\n      default: 'bg-card border border-border shadow-xs black/5',\n      accent: 'bg-muted shadow-xs p-1',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardHeaderVariants = cva('flex items-center justify-between flex-wrap px-5 min-h-14 gap-2.5', {\n  variants: {\n    variant: {\n      default: 'border-b border-border',\n      accent: '',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardContentVariants = cva('grow p-5', {\n  variants: {\n    variant: {\n      default: '',\n      accent: 'bg-card rounded-t-xl [&:last-child]:rounded-b-xl',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardTableVariants = cva('grid grow', {\n  variants: {\n    variant: {\n      default: '',\n      accent: 'bg-card rounded-xl',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardFooterVariants = cva('flex items-center px-5 min-h-14', {\n  variants: {\n    variant: {\n      default: 'border-t border-border',\n      accent: 'bg-card rounded-b-xl mt-[2px]',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\n// Card Component\nfunction Card({\n  className,\n  variant = 'default',\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof cardVariants>) {\n  return (\n    <CardContext.Provider value={{ variant: variant || 'default' }}>\n      <div data-slot=\"card\" className={cn(cardVariants({ variant }), className)} {...props} />\n    </CardContext.Provider>\n  );\n}\n\n// CardHeader Component\nfunction CardHeader({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-header\" className={cn(cardHeaderVariants({ variant }), className)} {...props} />;\n}\n\n// CardContent Component\nfunction CardContent({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-content\" className={cn(cardContentVariants({ variant }), className)} {...props} />;\n}\n\n// CardTable Component\nfunction CardTable({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-table\" className={cn(cardTableVariants({ variant }), className)} {...props} />;\n}\n\n// CardFooter Component\nfunction CardFooter({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-footer\" className={cn(cardFooterVariants({ variant }), className)} {...props} />;\n}\n\n// Other Components\nfunction CardHeading({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-heading\" className={cn('space-y-1', className)} {...props} />;\n}\n\nfunction CardToolbar({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-toolbar\" className={cn('flex items-center gap-2.5', className)} {...props} />;\n}\n\nfunction CardTitle({ className, ...props }: React.HTMLAttributes<HTMLHeadingElement>) {\n  return (\n    <h3\n      data-slot=\"card-title\"\n      className={cn('text-base font-semibold leading-none tracking-tight', className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-description\" className={cn('text-sm text-muted-foreground', className)} {...props} />;\n}\n\n// Exports\nexport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardHeading, CardTable, CardTitle, CardToolbar };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
