{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "progress-circle",
  "type": "registry:component",
  "dependencies": ["clsx", "tailwind-merge", "radix-ui"],
  "registryDependencies": ["https://reui.io/r/progress.json"],
  "files": [
    {
      "path": "registry/default/components/progress/circle.tsx",
      "content": "'use client';\n\nimport { useEffect, useState } from 'react';\nimport { ProgressCircle } from '@/registry/default/ui/progress';\n\nexport default function Completion() {\n  const [cpuUsage, setCpuUsage] = useState(0);\n\n  useEffect(() => {\n    // CPU usage simulation\n    const cpuTimer = setInterval(() => {\n      setCpuUsage((prev) => {\n        const target = 30 + Math.sin(Date.now() / 3000) * 20 + Math.random() * 15;\n        return prev + (target - prev) * 0.1;\n      });\n    }, 100);\n\n    return () => {\n      clearInterval(cpuTimer);\n    };\n  }, []);\n\n  return (\n    <div className=\"flex items-center justify-center\">\n      <div className=\"flex flex-col items-center gap-3\">\n        <ProgressCircle\n          value={cpuUsage}\n          size={80}\n          strokeWidth={6}\n          className=\"text-fuchsia-500\"\n          indicatorClassName=\"text-fuchsia-500\"\n        >\n          <div className=\"text-center\">\n            <div className=\"text-base font-bold\">{Math.round(cpuUsage)}%</div>\n            <div className=\"text-xs text-muted-foreground\">CPU</div>\n          </div>\n        </ProgressCircle>\n        <span className=\"text-xs text-muted-foreground\">Processor Usage</span>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/progress.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Progress as ProgressPrimitive } from 'radix-ui';\n\nfunction Progress({\n  className,\n  indicatorClassName,\n  value,\n  ...props\n}: React.ComponentProps<typeof ProgressPrimitive.Root> & {\n  indicatorClassName?: string;\n}) {\n  return (\n    <ProgressPrimitive.Root\n      data-slot=\"progress\"\n      className={cn('relative h-1.5 w-full overflow-hidden rounded-full bg-secondary', className)}\n      {...props}\n    >\n      <ProgressPrimitive.Indicator\n        data-slot=\"progress-indicator\"\n        className={cn('h-full w-full flex-1 bg-primary transition-all', indicatorClassName)}\n        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n      />\n    </ProgressPrimitive.Root>\n  );\n}\n\nfunction ProgressCircle({\n  className,\n  indicatorClassName,\n  trackClassName,\n  value = 0,\n  size = 48,\n  strokeWidth = 4,\n  children,\n  ...props\n}: React.ComponentProps<'div'> & {\n  /**\n   * Progress value from 0 to 100\n   */\n  value?: number;\n  /**\n   * Size of the circle in pixels\n   */\n  size?: number;\n  /**\n   * Width of the progress stroke\n   */\n  strokeWidth?: number;\n  /**\n   * Additional className for the progress stroke\n   */\n  indicatorClassName?: string;\n  /**\n   * Additional className for the progress track\n   */\n  trackClassName?: string;\n  /**\n   * Content to display in the center of the circle\n   */\n  children?: React.ReactNode;\n}) {\n  const radius = (size - strokeWidth) / 2;\n  const circumference = radius * 2 * Math.PI;\n  const offset = circumference - (value / 100) * circumference;\n\n  return (\n    <div\n      data-slot=\"progress-circle\"\n      className={cn('relative inline-flex items-center justify-center', className)}\n      style={{ width: size, height: size }}\n      {...props}\n    >\n      <svg className=\"absolute inset-0 -rotate-90\" width={size} height={size} viewBox={`0 0 ${size} ${size}`}>\n        <circle\n          data-slot=\"progress-circle-track\"\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          stroke=\"currentColor\"\n          strokeWidth={strokeWidth}\n          fill=\"none\"\n          className={cn('text-secondary', trackClassName)}\n        />\n        <circle\n          data-slot=\"progress-circle-indicator\"\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          stroke=\"currentColor\"\n          strokeWidth={strokeWidth}\n          fill=\"none\"\n          strokeDasharray={circumference}\n          strokeDashoffset={offset}\n          strokeLinecap=\"round\"\n          className={cn('text-primary transition-all duration-300 ease-in-out', indicatorClassName)}\n        />\n      </svg>\n      {children && (\n        <div\n          data-slot=\"progress-circle-content\"\n          className=\"relative z-10 flex items-center justify-center text-sm font-medium\"\n        >\n          {children}\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction ProgressRadial({\n  className,\n  value = 0,\n  size = 120,\n  strokeWidth = 8,\n  startAngle = -90,\n  endAngle = 90,\n  showLabel = false,\n  trackClassName,\n  indicatorClassName,\n  children,\n  ...props\n}: React.ComponentProps<'div'> & {\n  /**\n   * Progress value from 0 to 100\n   */\n  value?: number;\n  /**\n   * Size of the radial in pixels\n   */\n  size?: number;\n  /**\n   * Width of the progress stroke\n   */\n  strokeWidth?: number;\n  /**\n   * Start angle in degrees\n   */\n  startAngle?: number;\n  /**\n   * Additional className for the progress stroke\n   */\n  indicatorClassName?: string;\n  /**\n   * Additional className for the progress track\n   */\n  trackClassName?: string;\n  /**\n   * End angle in degrees\n   */\n  endAngle?: number;\n  /**\n   * Whether to show percentage label\n   */\n  showLabel?: boolean;\n  /**\n   * Custom content to display\n   */\n  children?: React.ReactNode;\n}) {\n  const radius = (size - strokeWidth) / 2;\n  const angleRange = endAngle - startAngle;\n  const progressAngle = (value / 100) * angleRange;\n\n  const toRadians = (degrees: number) => (degrees * Math.PI) / 180;\n\n  const startX = size / 2 + radius * Math.cos(toRadians(startAngle));\n  const startY = size / 2 + radius * Math.sin(toRadians(startAngle));\n  const endX = size / 2 + radius * Math.cos(toRadians(startAngle + progressAngle));\n  const endY = size / 2 + radius * Math.sin(toRadians(startAngle + progressAngle));\n\n  const largeArc = progressAngle > 180 ? 1 : 0;\n\n  const pathData = ['M', startX, startY, 'A', radius, radius, 0, largeArc, 1, endX, endY].join(' ');\n\n  return (\n    <div\n      data-slot=\"progress-radial\"\n      className={cn('relative inline-flex items-center justify-center', className)}\n      style={{ width: size, height: size }}\n      {...props}\n    >\n      <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`}>\n        <path\n          d={[\n            'M',\n            size / 2 + radius * Math.cos(toRadians(startAngle)),\n            size / 2 + radius * Math.sin(toRadians(startAngle)),\n            'A',\n            radius,\n            radius,\n            0,\n            angleRange > 180 ? 1 : 0,\n            1,\n            size / 2 + radius * Math.cos(toRadians(endAngle)),\n            size / 2 + radius * Math.sin(toRadians(endAngle)),\n          ].join(' ')}\n          stroke=\"currentColor\"\n          strokeWidth={strokeWidth}\n          fill=\"none\"\n          strokeLinecap=\"round\"\n          className={cn('text-secondary', trackClassName)}\n        />\n        <path\n          d={pathData}\n          stroke=\"currentColor\"\n          strokeWidth={strokeWidth}\n          fill=\"none\"\n          strokeLinecap=\"round\"\n          className={cn('text-primary transition-all duration-300 ease-in-out', indicatorClassName)}\n        />\n      </svg>\n      {(showLabel || children) && (\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          {children || <span className=\"text-lg font-bold\">{value}%</span>}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport { Progress, ProgressCircle, ProgressRadial };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
