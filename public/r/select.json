{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "select",
  "type": "registry:ui",
  "dependencies": ["radix-ui", "clsx", "tailwind-merge", "class-variance-authority", "lucide-react"],
  "files": [
    {
      "path": "registry/default/ui/select.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { isValidElement, ReactNode } from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport { Check, ChevronDown, ChevronUp } from 'lucide-react';\nimport { Select as SelectPrimitive } from 'radix-ui';\n\n// Create a Context for `indicatorPosition` and `indicator` control\nconst SelectContext = React.createContext<{\n  indicatorPosition: 'left' | 'right';\n  indicatorVisibility: boolean;\n  indicator: ReactNode;\n}>({ indicatorPosition: 'left', indicator: null, indicatorVisibility: true });\n\n// Root Component\nconst Select = ({\n  indicatorPosition = 'left',\n  indicatorVisibility = true,\n  indicator,\n  ...props\n}: {\n  indicatorPosition?: 'left' | 'right';\n  indicatorVisibility?: boolean;\n  indicator?: ReactNode;\n} & React.ComponentProps<typeof SelectPrimitive.Root>) => {\n  return (\n    <SelectContext.Provider value={{ indicatorPosition, indicatorVisibility, indicator }}>\n      <SelectPrimitive.Root {...props} />\n    </SelectContext.Provider>\n  );\n};\n\nfunction SelectGroup({ ...props }: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />;\n}\n\nfunction SelectValue({ ...props }: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />;\n}\n\n// Define size variants for SelectTrigger\nconst selectTriggerVariants = cva(\n  `\n    flex bg-background w-full items-center justify-between outline-none border border-input shadow-xs shadow-black/5 transition-shadow \n    text-foreground data-placeholder:text-muted-foreground focus-visible:border-ring focus-visible:outline-none focus-visible:ring-[3px] \n    focus-visible:ring-ring/30 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 \n    aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n    [[data-invalid=true]_&]:border-destructive/60 [[data-invalid=true]_&]:ring-destructive/10  dark:[[data-invalid=true]_&]:border-destructive dark:[[data-invalid=true]_&]:ring-destructive/20\n  `,\n  {\n    variants: {\n      size: {\n        sm: 'h-7 px-2.5 text-xs gap-1 rounded-md',\n        md: 'h-8.5 px-3 text-[0.8125rem] leading-(--text-sm--line-height) gap-1 rounded-md',\n        lg: 'h-10 px-4 text-sm gap-1.5 rounded-md',\n      },\n    },\n    defaultVariants: {\n      size: 'md',\n    },\n  },\n);\n\nexport interface SelectTriggerProps\n  extends React.ComponentProps<typeof SelectPrimitive.Trigger>,\n    VariantProps<typeof selectTriggerVariants> {}\n\nfunction SelectTrigger({ className, children, size, ...props }: SelectTriggerProps) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      className={cn(selectTriggerVariants({ size }), className)}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDown className=\"h-4 w-4 opacity-60 -me-0.5\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  );\n}\n\nfunction SelectScrollUpButton({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn('flex cursor-default items-center justify-center py-1', className)}\n      {...props}\n    >\n      <ChevronUp className=\"h-4 w-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  );\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn('flex cursor-default items-center justify-center py-1', className)}\n      {...props}\n    >\n      <ChevronDown className=\"h-4 w-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  );\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = 'popper',\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          'relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border border-border bg-popover shadow-md shadow-black/5 text-secondary-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n          position === 'popper' &&\n            'data-[side=bottom]:translate-y-1.5 data-[side=left]:-translate-x-1.5 data-[side=right]:translate-x-1.5 data-[side=top]:-translate-y-1.5',\n          className,\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            'p-1.5',\n            position === 'popper' &&\n              'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]',\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  );\n}\n\nfunction SelectLabel({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn('py-1.5 ps-8 pe-2 text-xs text-muted-foreground font-medium', className)}\n      {...props}\n    />\n  );\n}\n\nfunction SelectItem({ className, children, ...props }: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  const { indicatorPosition, indicatorVisibility, indicator } = React.useContext(SelectContext);\n\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 text-sm outline-hidden text-foreground hover:bg-accent focus:bg-accent data-disabled:pointer-events-none data-disabled:opacity-50',\n        indicatorPosition === 'left' ? 'ps-8 pe-2' : 'pe-8 ps-2',\n        className,\n      )}\n      {...props}\n    >\n      {indicatorVisibility &&\n        (indicator && isValidElement(indicator) ? (\n          indicator\n        ) : (\n          <span\n            className={cn(\n              'absolute flex h-3.5 w-3.5 items-center justify-center',\n              indicatorPosition === 'left' ? 'start-2' : 'end-2',\n            )}\n          >\n            <SelectPrimitive.ItemIndicator>\n              <Check className=\"h-4 w-4 text-primary\" />\n            </SelectPrimitive.ItemIndicator>\n          </span>\n        ))}\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  );\n}\n\nfunction SelectIndicator({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ItemIndicator>) {\n  const { indicatorPosition } = React.useContext(SelectContext);\n\n  return (\n    <span\n      data-slot=\"select-indicator\"\n      className={cn(\n        'absolute flex top-1/2 -translate-y-1/2 items-center justify-center',\n        indicatorPosition === 'left' ? 'start-2' : 'end-2',\n        className,\n      )}\n      {...props}\n    >\n      <SelectPrimitive.ItemIndicator>{children}</SelectPrimitive.ItemIndicator>\n    </span>\n  );\n}\n\nfunction SelectSeparator({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn('-mx-1.5 my-1.5 h-px bg-border', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectIndicator,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
