{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tree",
  "type": "registry:ui",
  "dependencies": ["@headless-tree/core", "radix-ui", "clsx", "tailwind-merge", "lucide-react"],
  "files": [
    {
      "path": "registry/default/ui/tree.tsx",
      "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\n'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { ItemInstance } from '@headless-tree/core';\nimport { ChevronDownIcon, SquareMinus, SquarePlus } from 'lucide-react';\nimport { Slot as SlotPrimitive } from 'radix-ui';\n\ntype ToggleIconType = 'chevron' | 'plus-minus';\n\ninterface TreeContextValue<T = any> {\n  indent: number;\n  currentItem?: ItemInstance<T>;\n  tree?: any;\n  toggleIconType?: ToggleIconType;\n}\n\nconst TreeContext = React.createContext<TreeContextValue>({\n  indent: 20,\n  currentItem: undefined,\n  tree: undefined,\n  toggleIconType: 'plus-minus',\n});\n\nfunction useTreeContext<T = any>() {\n  return React.useContext(TreeContext) as TreeContextValue<T>;\n}\n\ninterface TreeProps extends React.HTMLAttributes<HTMLDivElement> {\n  indent?: number;\n  tree?: any;\n  toggleIconType?: ToggleIconType;\n}\n\nfunction Tree({ indent = 20, tree, className, toggleIconType = 'chevron', ...props }: TreeProps) {\n  const containerProps = tree && typeof tree.getContainerProps === 'function' ? tree.getContainerProps() : {};\n  const mergedProps = { ...props, ...containerProps };\n\n  // Extract style from mergedProps to merge with our custom styles\n  const { style: propStyle, ...otherProps } = mergedProps;\n\n  // Merge styles\n  const mergedStyle = {\n    ...propStyle,\n    '--tree-indent': `${indent}px`,\n  } as React.CSSProperties;\n\n  return (\n    <TreeContext.Provider value={{ indent, tree, toggleIconType }}>\n      <div data-slot=\"tree\" style={mergedStyle} className={cn('flex flex-col', className)} {...otherProps} />\n    </TreeContext.Provider>\n  );\n}\n\ninterface TreeItemProps<T = any> extends React.HTMLAttributes<HTMLButtonElement> {\n  item: ItemInstance<T>;\n  indent?: number;\n  asChild?: boolean;\n}\n\nfunction TreeItem<T = any>({ item, className, asChild, children, ...props }: Omit<TreeItemProps<T>, 'indent'>) {\n  const parentContext = useTreeContext<T>();\n  const { indent } = parentContext;\n\n  const itemProps = typeof item.getProps === 'function' ? item.getProps() : {};\n  const mergedProps = { ...props, ...itemProps };\n\n  // Extract style from mergedProps to merge with our custom styles\n  const { style: propStyle, ...otherProps } = mergedProps;\n\n  // Merge styles\n  const mergedStyle = {\n    ...propStyle,\n    '--tree-padding': `${item.getItemMeta().level * indent}px`,\n  } as React.CSSProperties;\n\n  const Comp = asChild ? SlotPrimitive.Slot : 'button';\n\n  return (\n    <TreeContext.Provider value={{ ...parentContext, currentItem: item }}>\n      <Comp\n        data-slot=\"tree-item\"\n        style={mergedStyle}\n        className={cn(\n          'z-10 ps-(--tree-padding) outline-hidden select-none not-last:pb-0.5 focus:z-20 data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n          className,\n        )}\n        data-focus={typeof item.isFocused === 'function' ? item.isFocused() || false : undefined}\n        data-folder={typeof item.isFolder === 'function' ? item.isFolder() || false : undefined}\n        data-selected={typeof item.isSelected === 'function' ? item.isSelected() || false : undefined}\n        data-drag-target={typeof item.isDragTarget === 'function' ? item.isDragTarget() || false : undefined}\n        data-search-match={typeof item.isMatchingSearch === 'function' ? item.isMatchingSearch() || false : undefined}\n        aria-expanded={item.isExpanded()}\n        {...otherProps}\n      >\n        {children}\n      </Comp>\n    </TreeContext.Provider>\n  );\n}\n\ninterface TreeItemLabelProps<T = any> extends React.HTMLAttributes<HTMLSpanElement> {\n  item?: ItemInstance<T>;\n}\n\nfunction TreeItemLabel<T = any>({ item: propItem, children, className, ...props }: TreeItemLabelProps<T>) {\n  const { currentItem, toggleIconType } = useTreeContext<T>();\n  const item = propItem || currentItem;\n\n  if (!item) {\n    console.warn('TreeItemLabel: No item provided via props or context');\n    return null;\n  }\n\n  return (\n    <span\n      data-slot=\"tree-item-label\"\n      className={cn(\n        'in-focus-visible:ring-ring/50 bg-background hover:bg-accent in-data-[selected=true]:bg-accent in-data-[selected=true]:text-accent-foreground in-data-[drag-target=true]:bg-accent flex items-center gap-1 rounded-sm px-2 py-1.5 text-sm transition-colors not-in-data-[folder=true]:ps-7 in-focus-visible:ring-[3px] in-data-[search-match=true]:bg-blue-50! [&_svg]:pointer-events-none [&_svg]:shrink-0',\n        className,\n      )}\n      {...props}\n    >\n      {item.isFolder() &&\n        (toggleIconType === 'plus-minus' ? (\n          item.isExpanded() ? (\n            <SquareMinus className=\"text-muted-foreground size-3.5\" stroke=\"currentColor\" strokeWidth=\"1\" />\n          ) : (\n            <SquarePlus className=\"text-muted-foreground size-3.5\" stroke=\"currentColor\" strokeWidth=\"1\" />\n          )\n        ) : (\n          <ChevronDownIcon className=\"text-muted-foreground size-4 in-aria-[expanded=false]:-rotate-90\" />\n        ))}\n      {children || (typeof item.getItemName === 'function' ? item.getItemName() : null)}\n    </span>\n  );\n}\n\nfunction TreeDragLine({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { tree } = useTreeContext();\n\n  if (!tree || typeof tree.getDragLineStyle !== 'function') {\n    console.warn('TreeDragLine: No tree provided via context or tree does not have getDragLineStyle method');\n    return null;\n  }\n\n  const dragLine = tree.getDragLineStyle();\n  return (\n    <div\n      style={dragLine}\n      className={cn(\n        'bg-primary before:bg-background before:border-primary absolute z-30 -mt-px h-0.5 w-[unset] before:absolute before:-top-[3px] before:left-0 before:size-2 before:rounded-full before:border-2',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Tree, TreeItem, TreeItemLabel, TreeDragLine };\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
