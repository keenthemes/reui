{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "svg-text",
  "type": "registry:ui",
  "dependencies": [],
  "files": [
    {
      "path": "registry/default/ui/svg-text.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { ElementType, ReactNode, useEffect, useRef, useState } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface SvgTextProps {\n  /**\n   * The SVG content to display inside the text\n   */\n  svg: ReactNode;\n  /**\n   * The content to display (will have the SVG \"inside\" it)\n   */\n  children: ReactNode;\n  /**\n   * Additional className for the container\n   */\n  className?: string;\n  /**\n   * Font size for the text mask (in viewport width units or CSS units)\n   * @default \"20vw\"\n   */\n  fontSize?: string | number;\n  /**\n   * Font weight for the text mask\n   * @default \"bold\"\n   */\n  fontWeight?: string | number;\n  /**\n   * The element type to render for the container\n   * @default \"div\"\n   */\n  as?: ElementType;\n}\n\n/**\n * SvgText displays content with an SVG background fill effect.\n * The SVG is masked by the content, creating a dynamic text look.\n */\nexport function SvgText({\n  svg,\n  children,\n  className = '',\n  fontSize = '20vw',\n  fontWeight = 'bold',\n  as: Component = 'div',\n}: SvgTextProps) {\n  const textRef = useRef<HTMLDivElement>(null);\n  const [textDimensions, setTextDimensions] = useState({ width: 0, height: 0 });\n  const content = React.Children.toArray(children).join('');\n  const maskId = React.useId();\n\n  useEffect(() => {\n    if (!textRef.current) return;\n\n    const updateDimensions = () => {\n      const rect = textRef.current?.getBoundingClientRect();\n      if (rect) {\n        setTextDimensions({\n          width: Math.max(rect.width, 200),\n          height: Math.max(rect.height, 100),\n        });\n      }\n    };\n\n    // Initial measurement\n    updateDimensions();\n\n    // Use ResizeObserver for better performance\n    const resizeObserver = new ResizeObserver(updateDimensions);\n    resizeObserver.observe(textRef.current);\n\n    return () => resizeObserver.disconnect();\n  }, [content, fontSize, fontWeight]);\n\n  return (\n    <Component className={cn('relative inline-block', className)}>\n      {/* Hidden text for measuring */}\n      <div\n        ref={textRef}\n        className=\"opacity-0 absolute pointer-events-none font-bold whitespace-nowrap\"\n        style={{\n          fontSize: typeof fontSize === 'number' ? `${fontSize}px` : fontSize,\n          fontWeight,\n          fontFamily: 'system-ui, -apple-system, sans-serif',\n        }}\n      >\n        {content}\n      </div>\n\n      {/* SVG with text mask */}\n      <svg\n        className=\"block\"\n        width={textDimensions.width}\n        height={textDimensions.height}\n        viewBox={`0 0 ${textDimensions.width} ${textDimensions.height}`}\n        style={{\n          fontSize: typeof fontSize === 'number' ? `${fontSize}px` : fontSize,\n          fontWeight,\n          fontFamily: 'system-ui, -apple-system, sans-serif',\n        }}\n      >\n        <defs>\n          <mask id={maskId}>\n            <rect width=\"100%\" height=\"100%\" fill=\"black\" />\n            <text\n              x=\"50%\"\n              y=\"50%\"\n              textAnchor=\"middle\"\n              dominantBaseline=\"central\"\n              fill=\"white\"\n              style={{\n                fontSize: typeof fontSize === 'number' ? `${fontSize}px` : fontSize,\n                fontWeight,\n                fontFamily: 'system-ui, -apple-system, sans-serif',\n              }}\n            >\n              {content}\n            </text>\n          </mask>\n        </defs>\n\n        {/* Background SVG with proper scaling */}\n        <g mask={`url(#${maskId})`}>\n          <foreignObject\n            width=\"100%\"\n            height=\"100%\"\n            style={{\n              overflow: 'visible',\n            }}\n          >\n            <div\n              style={{\n                width: `${textDimensions.width}px`,\n                height: `${textDimensions.height}px`,\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n              }}\n            >\n              <div\n                style={{\n                  width: '400px',\n                  height: '200px',\n                  transform: `scale(${Math.max(textDimensions.width / 400, textDimensions.height / 200)})`,\n                  transformOrigin: 'center',\n                }}\n              >\n                {svg}\n              </div>\n            </div>\n          </foreignObject>\n        </g>\n      </svg>\n\n      {/* Screen reader text */}\n      <span className=\"sr-only\">{content}</span>\n    </Component>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}
