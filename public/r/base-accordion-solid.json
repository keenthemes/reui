{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "base-accordion-solid",
  "type": "registry:component",
  "dependencies": ["clsx", "tailwind-merge", "@base-ui-components/react", "class-variance-authority", "lucide-react"],
  "registryDependencies": ["https://reui.io/r/base-accordion.json"],
  "files": [
    {
      "path": "registry/default/components/base-accordion/solid.tsx",
      "content": "import {\n  Accordion,\n  AccordionHeader,\n  AccordionItem,\n  AccordionPanel,\n  AccordionTrigger,\n} from '@/registry/default/ui/base-accordion';\n\nexport default function Component() {\n  return (\n    <Accordion variant=\"solid\" openMultiple={false} className=\"w-full lg:w-[75%]\">\n      <AccordionItem value=\"reui-1\">\n        <AccordionHeader>\n          <AccordionTrigger>What is ReUI?</AccordionTrigger>\n        </AccordionHeader>\n        <AccordionPanel>ReUI provides ready-to-use CRUD examples for developers.</AccordionPanel>\n      </AccordionItem>\n      <AccordionItem value=\"reui-2\">\n        <AccordionHeader>\n          <AccordionTrigger>Who benefits from ReUI?</AccordionTrigger>\n        </AccordionHeader>\n        <AccordionPanel>Developers looking to save time with pre-built CRUD solutions.</AccordionPanel>\n      </AccordionItem>\n      <AccordionItem value=\"reui-3\">\n        <AccordionHeader>\n          <AccordionTrigger>Why choose ReUI?</AccordionTrigger>\n        </AccordionHeader>\n        <AccordionPanel>ReUI simplifies development with plug-and-play CRUDs.</AccordionPanel>\n      </AccordionItem>\n    </Accordion>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/base-accordion.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Accordion } from '@base-ui-components/react/accordion';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { ChevronDown, Plus } from 'lucide-react';\n\n// Variants\nconst accordionRootVariants = cva('', {\n  variants: {\n    variant: {\n      default: '',\n      outline: 'space-y-2',\n      solid: 'space-y-2',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst accordionItemVariants = cva('', {\n  variants: {\n    variant: {\n      default: 'border-b border-border',\n      outline: 'border border-border rounded-lg px-4',\n      solid: 'rounded-lg bg-accent/70 px-4',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst accordionHeaderVariants = cva('flex', {\n  variants: {\n    variant: {\n      default: '',\n      outline: '',\n      solid: '',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst accordionTriggerVariants = cva(\n  'flex flex-1 items-center justify-between py-4 gap-2.5 text-foreground font-medium transition-all [&[data-panel-open]>svg]:rotate-180 cursor-pointer',\n  {\n    variants: {\n      variant: {\n        default: '',\n        outline: '',\n        solid: '',\n      },\n      indicator: {\n        arrow: '',\n        plus: '[&>svg>path:last-child]:origin-center [&>svg>path:last-child]:transition-all [&>svg>path:last-child]:duration-200 [&[data-panel-open]>svg>path:last-child]:rotate-90 [&[data-panel-open]>svg>path:last-child]:opacity-0 [&[data-panel-open]>svg]:rotate-180',\n        none: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      indicator: 'arrow',\n    },\n  },\n);\n\nconst accordionPanelVariants = cva(\n  'h-[var(--accordion-panel-height)] overflow-hidden text-sm text-accent-foreground transition-[height] ease-out data-[ending-style]:h-0 data-[starting-style]:h-0',\n  {\n    variants: {\n      variant: {\n        default: '',\n        outline: '',\n        solid: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\n// Context\ntype AccordionContextType = {\n  variant?: 'default' | 'outline' | 'solid';\n  indicator?: 'arrow' | 'plus' | 'none';\n};\n\nconst AccordionContext = React.createContext<AccordionContextType>({\n  variant: 'default',\n  indicator: 'arrow',\n});\n\n// Base UI Accordion Root\ninterface AccordionRootProps\n  extends React.ComponentProps<typeof Accordion.Root>,\n    VariantProps<typeof accordionRootVariants> {\n  indicator?: 'arrow' | 'plus' | 'none';\n}\n\nfunction AccordionRoot(props: AccordionRootProps) {\n  const { className, variant = 'default', indicator = 'arrow', children, ...rest } = props;\n\n  return (\n    <AccordionContext.Provider value={{ variant: variant || 'default', indicator }}>\n      <Accordion.Root data-slot=\"accordion\" className={cn(accordionRootVariants({ variant }), className)} {...rest}>\n        {children}\n      </Accordion.Root>\n    </AccordionContext.Provider>\n  );\n}\n\n// Base UI Accordion Item\nfunction AccordionItem(props: React.ComponentProps<typeof Accordion.Item>) {\n  const { className, children, ...rest } = props;\n  const { variant } = React.useContext(AccordionContext);\n\n  return (\n    <Accordion.Item data-slot=\"accordion-item\" className={cn(accordionItemVariants({ variant }), className)} {...rest}>\n      {children}\n    </Accordion.Item>\n  );\n}\n\n// Base UI Accordion Header\nfunction AccordionHeader(props: React.ComponentProps<typeof Accordion.Header>) {\n  const { className, children, ...rest } = props;\n  const { variant } = React.useContext(AccordionContext);\n\n  return (\n    <Accordion.Header\n      data-slot=\"accordion-header\"\n      className={cn(accordionHeaderVariants({ variant }), className)}\n      {...rest}\n    >\n      {children}\n    </Accordion.Header>\n  );\n}\n\n// Base UI Accordion Trigger\nfunction AccordionTrigger(props: React.ComponentProps<typeof Accordion.Trigger>) {\n  const { className, children, ...rest } = props;\n  const { variant, indicator } = React.useContext(AccordionContext);\n\n  return (\n    <Accordion.Trigger\n      data-slot=\"accordion-trigger\"\n      className={cn(accordionTriggerVariants({ variant, indicator }), className)}\n      {...rest}\n    >\n      {children}\n      {indicator === 'plus' && <Plus className=\"size-4 shrink-0 transition-transform duration-200\" strokeWidth={1} />}\n      {indicator === 'arrow' && (\n        <ChevronDown className=\"size-4 shrink-0 transition-transform duration-200\" strokeWidth={1} />\n      )}\n    </Accordion.Trigger>\n  );\n}\n\n// Base UI Accordion Panel\nfunction AccordionPanel(props: React.ComponentProps<typeof Accordion.Panel>) {\n  const { className, children, ...rest } = props;\n  const { variant } = React.useContext(AccordionContext);\n\n  return (\n    <Accordion.Panel\n      data-slot=\"accordion-panel\"\n      className={cn(accordionPanelVariants({ variant }), className)}\n      {...rest}\n    >\n      <div className={cn('pb-5 pt-0')}>{children}</div>\n    </Accordion.Panel>\n  );\n}\n\n// Exports with proper naming to match Base UI pattern\nexport { AccordionRoot as Accordion, AccordionItem, AccordionHeader, AccordionTrigger, AccordionPanel };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
