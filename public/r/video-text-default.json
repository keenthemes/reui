{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "video-text-default",
  "type": "registry:component",
  "dependencies": [],
  "registryDependencies": ["https://reui.io/r/video-text.json"],
  "files": [
    {
      "path": "registry/default/components/video-text/default.tsx",
      "content": "import { VideoText } from '@/registry/default/ui/video-text';\nimport { toAbsoluteUrl } from '@/lib/helpers';\n\nexport default function Component() {\n  return (\n    <div className=\"flex items-center justify-center\">\n      {/* Basic example */}\n      <VideoText src={toAbsoluteUrl('/media/videos/1.mp4')} className=\"tracking-tight font-bold\" fontSize=\"12rem\">\n        REUI\n      </VideoText>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/video-text.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { ElementType, ReactNode, useEffect, useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface VideoTextProps {\n  /**\n   * The video source URL or array of sources for multiple formats\n   */\n  src: string | string[];\n  /**\n   * The content to display (will have the video \"inside\" it)\n   */\n  children: ReactNode;\n  /**\n   * Additional className for the container\n   */\n  className?: string;\n  /**\n   * Whether to autoplay the video\n   * @default true\n   */\n  autoPlay?: boolean;\n  /**\n   * Whether to mute the video\n   * @default true\n   */\n  muted?: boolean;\n  /**\n   * Whether to loop the video\n   * @default true\n   */\n  loop?: boolean;\n  /**\n   * Whether to preload the video\n   * @default \"auto\"\n   */\n  preload?: 'auto' | 'metadata' | 'none';\n  /**\n   * Font size for the text mask (in viewport width units or CSS units)\n   * @default \"20vw\"\n   */\n  fontSize?: string | number;\n  /**\n   * Font weight for the text mask\n   * @default \"bold\"\n   */\n  fontWeight?: string | number;\n  /**\n   * The element type to render for the container\n   * @default \"div\"\n   */\n  as?: ElementType;\n  /**\n   * Callback when video starts playing\n   */\n  onPlay?: () => void;\n  /**\n   * Callback when video is paused\n   */\n  onPause?: () => void;\n  /**\n   * Callback when video ends\n   */\n  onEnded?: () => void;\n}\n\n/**\n * VideoText displays content with a background video fill effect.\n * The video is masked by the content, creating a dynamic animated text look.\n */\nexport function VideoText({\n  src,\n  children,\n  className = '',\n  autoPlay = true,\n  muted = true,\n  loop = true,\n  preload = 'auto',\n  fontSize = '20vw',\n  fontWeight = 'bold',\n  as: Component = 'div',\n  onPlay,\n  onPause,\n  onEnded,\n}: VideoTextProps) {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const textRef = useRef<HTMLDivElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    const textElement = textRef.current;\n    const container = containerRef.current;\n\n    if (!video || !canvas || !textElement || !container) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    let animationId: number;\n\n    const updateCanvas = () => {\n      // Get text dimensions first\n      const text = textElement.textContent || '';\n      ctx.font = `${fontWeight} ${typeof fontSize === 'number' ? `${fontSize}px` : fontSize} system-ui, -apple-system, sans-serif`;\n      const textMetrics = ctx.measureText(text);\n      const textWidth = textMetrics.width;\n      const textHeight = typeof fontSize === 'number' ? fontSize : parseFloat(fontSize.replace(/[^\\d.]/g, '')) || 100;\n\n      // Set canvas size to accommodate full text with padding\n      const padding = 40;\n      canvas.width = Math.max(textWidth + padding * 2, 400);\n      canvas.height = Math.max(textHeight + padding * 2, 200);\n\n      // Clear canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Draw video frame to fill canvas\n      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n      // Set up text masking\n      ctx.globalCompositeOperation = 'destination-in';\n\n      // Draw text as mask\n      ctx.fillStyle = 'white';\n      ctx.font = `${fontWeight} ${typeof fontSize === 'number' ? `${fontSize}px` : fontSize} system-ui, -apple-system, sans-serif`;\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n\n      ctx.fillText(text, canvas.width / 2, canvas.height / 2);\n\n      // Reset composite operation\n      ctx.globalCompositeOperation = 'source-over';\n\n      animationId = requestAnimationFrame(updateCanvas);\n    };\n\n    const handleVideoLoad = () => {\n      updateCanvas();\n    };\n\n    const handleResize = () => {\n      updateCanvas();\n    };\n\n    video.addEventListener('loadeddata', handleVideoLoad);\n    video.addEventListener('play', updateCanvas);\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      video.removeEventListener('loadeddata', handleVideoLoad);\n      video.removeEventListener('play', updateCanvas);\n      window.removeEventListener('resize', handleResize);\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n    };\n  }, [fontSize, fontWeight]);\n\n  const sources = Array.isArray(src) ? src : [src];\n  const content = React.Children.toArray(children).join('');\n\n  return (\n    <Component ref={containerRef} className={cn('relative inline-block overflow-hidden', className)}>\n      {/* Hidden video element */}\n      <video\n        ref={videoRef}\n        className=\"absolute opacity-0 pointer-events-none\"\n        autoPlay={autoPlay}\n        muted={muted}\n        loop={loop}\n        preload={preload}\n        playsInline\n        onPlay={onPlay}\n        onPause={onPause}\n        onEnded={onEnded}\n        crossOrigin=\"anonymous\"\n      >\n        {sources.map((source, index) => (\n          <source key={index} src={source} />\n        ))}\n        Your browser does not support the video tag.\n      </video>\n\n      {/* Canvas that shows the masked video */}\n      <canvas\n        ref={canvasRef}\n        className=\"block\"\n        style={{\n          width: '100%',\n          height: 'auto',\n        }}\n      />\n\n      {/* Hidden text for measuring and accessibility */}\n      <div\n        ref={textRef}\n        className=\"absolute opacity-0 pointer-events-none font-bold\"\n        style={{\n          fontSize: typeof fontSize === 'number' ? `${fontSize}px` : fontSize,\n          fontWeight,\n        }}\n        aria-label={content}\n      >\n        {children}\n      </div>\n\n      {/* Screen reader text */}\n      <span className=\"sr-only\">{content}</span>\n    </Component>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "lib/helpers.ts",
      "content": "/**\n * Throttles a function to limit its execution to once every specified duration.\n *\n * @param func - The function to throttle.\n * @param limit - The minimum delay in milliseconds between calls.\n * @returns A throttled version of the provided function.\n */\nexport const throttle = (func: (...args: unknown[]) => void, limit: number): ((...args: unknown[]) => void) => {\n  let lastFunc: ReturnType<typeof setTimeout> | null = null;\n  let lastRan: number | null = null;\n\n  return function (this: unknown, ...args: unknown[]) {\n    if (lastRan === null) {\n      func.apply(this, args);\n      lastRan = Date.now();\n    } else {\n      if (lastFunc !== null) {\n        clearTimeout(lastFunc);\n      }\n      lastFunc = setTimeout(\n        () => {\n          if (Date.now() - (lastRan as number) >= limit) {\n            func.apply(this, args);\n            lastRan = Date.now();\n          }\n        },\n        limit - (Date.now() - (lastRan as number)),\n      );\n    }\n  };\n};\n\n/**\n * Debounces a function to delay its execution until after a specified delay.\n *\n * @param func - The function to debounce.\n * @param wait - The delay in milliseconds.\n * @returns A debounced version of the provided function.\n */\nexport function debounce<T extends (...args: unknown[]) => unknown>(\n  func: T,\n  wait: number,\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout | null = null;\n\n  return function (...args: Parameters<T>): void {\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n\n    timeout = setTimeout(() => {\n      func(...args);\n    }, wait);\n  };\n}\n\n/**\n * Generates a unique identifier using the current timestamp and a random number.\n *\n * @returns A string representing the unique ID.\n */\nexport function uid(): string {\n  return (Date.now() + Math.floor(Math.random() * 1000)).toString();\n}\n\n/**\n * Extracts initials from a given name.\n *\n * @param name - The full name to extract initials from.\n * @param count - The number of initials to return. Defaults to all initials.\n * @returns A string of initials from the name.\n */\nexport const getInitials = (name: string | null | undefined, count?: number): string => {\n  if (!name || typeof name !== 'string') {\n    return '';\n  }\n\n  const initials = name\n    .split(' ')\n    .filter(Boolean)\n    .map((part) => part[0].toUpperCase());\n\n  return count && count > 0 ? initials.slice(0, count).join('') : initials.join('');\n};\n\n/**\n * Formats a date as a readable string in \"Month Day, Year\" format.\n *\n * @param input - A date string or timestamp to format.\n * @returns A string formatted as \"Month Day, Year\".\n */\nexport function formatDate(input: Date | string | number): string {\n  const date = new Date(input);\n  return date.toLocaleDateString('en-US', {\n    month: 'long',\n    day: 'numeric',\n    year: 'numeric',\n  });\n}\n\n/**\n * Formats a date and time as a readable string in \"Month Day, Year, Hour:Minute AM/PM\" format.\n *\n * @param input - A date string or timestamp to format.\n * @returns A string formatted as \"Month Day, Year, Hour:Minute AM/PM\".\n */\nexport function formatDateTime(input: Date | string | number): string {\n  const date = new Date(input);\n  return date.toLocaleString('en-US', {\n    month: 'long',\n    day: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true,\n  });\n}\n\n/**\n * Formats a number as a currency string.\n *\n * @param amount - The numeric value to format as currency.\n * @param currency - The currency code (e.g., \"USD\", \"EUR\"). Defaults to \"USD\".\n * @param locale - The locale for formatting (e.g., \"en-US\"). Defaults to \"en-US\".\n * @returns A string formatted as currency.\n */\nexport function formatCurrency(amount: number, currency: string = 'USD', locale: string = 'en-US'): string {\n  return new Intl.NumberFormat(locale, {\n    style: 'currency',\n    currency,\n  }).format(amount);\n}\n\n/**\n * Constructs an absolute URL based on the base application URL.\n *\n * @param path - The relative path to append to the base URL.\n * @returns A string representing the absolute URL.\n */\nexport function absoluteUrl(path: string): string {\n  return `${process.env.NEXT_PUBLIC_APP_URL}${path}`;\n}\n\n/**\n * Constructs an absolute URL for media assets.\n *\n * @param path - The relative path to the media asset (e.g., \"/media/avatars/1.png\").\n * @returns A string representing the absolute URL to the media asset.\n */\nexport function toAbsoluteUrl(path: string): string {\n  // Remove leading slash if present to avoid double slashes\n  const cleanPath = path.startsWith('/') ? path.slice(1) : path;\n  return `/${cleanPath}`;\n}\n\n/**\n\tRetrieves a list of supported time zones with their labels and values.\n\tThis function fetches the available time zones from the environment,\n\tformats their offsets (e.g., \"GMT+2\"), and returns them in a sorted array.\n*/\nexport const getTimeZones = (): { label: string; value: string }[] => {\n  // Fetch supported timezones\n  const timezones = Intl.supportedValuesOf('timeZone');\n\n  return timezones\n    .map((timezone) => {\n      const formatter = new Intl.DateTimeFormat('en', {\n        timeZone: timezone,\n        timeZoneName: 'shortOffset',\n      });\n      const parts = formatter.formatToParts(new Date());\n      const offset = parts.find((part) => part.type === 'timeZoneName')?.value || '';\n      const formattedOffset = offset === 'GMT' ? 'GMT+0' : offset;\n\n      return {\n        value: timezone,\n        label: `(${formattedOffset}) ${timezone.replace(/_/g, ' ')}`,\n        numericOffset: parseInt(formattedOffset.replace('GMT', '').replace('+', '') || '0'),\n      };\n    })\n    .sort((a, b) => a.numericOffset - b.numericOffset);\n};\n\n/**\n * Generates a URL-friendly slug from a given title.\n * @param title - The title to convert into a slug (e.g., \"Write a Proposal\")\n * @returns A slug string (e.g., \"write-a-proposal\")\n */\nexport function getSlug(title: string): string {\n  // Return empty string for invalid input\n  if (!title || typeof title !== 'string') {\n    return '';\n  }\n\n  return title\n    .toLowerCase() // Convert to lowercase for consistency\n    .trim() // Remove leading/trailing whitespace\n    .normalize('NFD') // Normalize unicode (e.g., \"é\" -> \"e\")\n    .replace(/[\\u0300-\\u036f]/g, '') // Remove diacritics\n    .replace(/[^a-z0-9\\s-]/g, '') // Remove special characters except spaces/hyphens\n    .replaceAll(/\\s+/g, '-') // Replace spaces with single hyphen\n    .replace(/-+/g, '-') // Collapse multiple hyphens\n    .replace(/^-|-$/g, ''); // Remove leading/trailing hyphens\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
