{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "switch-indicator",
  "type": "registry:component",
  "dependencies": ["clsx", "tailwind-merge", "class-variance-authority", "radix-ui"],
  "registryDependencies": ["https://reui.io/r/label.json", "https://reui.io/r/switch.json"],
  "files": [
    {
      "path": "registry/default/components/switch/indicator.tsx",
      "content": "import { useId } from 'react';\nimport { Label } from '@/registry/default/ui/label';\nimport { Switch, SwitchIndicator, SwitchWrapper } from '@/registry/default/ui/switch';\n\nexport default function SwitchDemo() {\n  const id = useId();\n\n  return (\n    <div className=\"flex items-center space-x-2.5\">\n      <SwitchWrapper>\n        <Switch id={id} size=\"xl\" />\n        <SwitchIndicator state=\"off\" className=\"text-[10px] font-medium text-muted-foreground uppercase\">\n          Off\n        </SwitchIndicator>\n        <SwitchIndicator state=\"on\" className=\"text-[10px] font-medium text-primary-foreground uppercase\">\n          On\n        </SwitchIndicator>\n      </SwitchWrapper>\n      <Label htmlFor={id}>Text Indicator</Label>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/label.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { Label as LabelPrimitive } from 'radix-ui';\n\nconst labelVariants = cva(\n  'text-sm leading-none text-foreground peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        primary: 'font-medium',\n        secondary: 'font-normal',\n      },\n    },\n    defaultVariants: {\n      variant: 'primary',\n    },\n  },\n);\n\nfunction Label({\n  className,\n  variant,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root> & VariantProps<typeof labelVariants>) {\n  return <LabelPrimitive.Root data-slot=\"label\" className={cn(labelVariants({ variant }), className)} {...props} />;\n}\n\nexport { Label };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/switch.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { Switch as SwitchPrimitive } from 'radix-ui';\n\n// Define a context for `permanent` state\nconst SwitchContext = React.createContext<{ permanent: boolean }>({\n  permanent: false,\n});\n\nconst useSwitchContext = () => {\n  const context = React.useContext(SwitchContext);\n  if (!context) {\n    throw new Error('SwitchIndicator must be used within a Switch component');\n  }\n  return context;\n};\n\n// Define classes for variants\nconst switchVariants = cva(\n  `\n    relative peer inline-flex shrink-0 cursor-pointer items-center rounded-full transition-colors \n    focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background \n    disabled:cursor-not-allowed disabled:opacity-50 data-[state=unchecked]:bg-input\n    aria-invalid:border aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n    [[data-invalid=true]_&]:border [[data-invalid=true]_&]:border-destructive/60 [[data-invalid=true]_&]:ring-destructive/10  dark:[[data-invalid=true]_&]:border-destructive dark:[[data-invalid=true]_&]:ring-destructive/20\n  `,\n  {\n    variants: {\n      shape: {\n        pill: 'rounded-full',\n        square: 'rounded-md',\n      },\n      size: {\n        sm: 'h-5 w-8',\n        md: 'h-6 w-10',\n        lg: 'h-8 w-14',\n        xl: 'h-9 w-16',\n      },\n      permanent: {\n        true: 'bg-input',\n        false: 'data-[state=checked]:bg-primary',\n      },\n    },\n    defaultVariants: {\n      shape: 'pill',\n      permanent: false,\n      size: 'md',\n    },\n  },\n);\n\nconst switchThumbVariants = cva(\n  'pointer-events-none block bg-white w-1/2 h-[calc(100%-4px)] shadow-lg ring-0 transition-transform start-0 data-[state=unchecked]:translate-x-[2px] data-[state=checked]:translate-x-[calc(100%-2px)] rtl:data-[state=unchecked]:-translate-x-[2px] rtl:data-[state=checked]:-translate-x-[calc(100%-2px)]',\n  {\n    variants: {\n      shape: {\n        pill: 'rounded-full',\n        square: 'rounded-md',\n      },\n      size: {\n        xs: '',\n        sm: '',\n        md: '',\n        lg: '',\n        xl: '',\n      },\n    },\n    compoundVariants: [\n      {\n        shape: 'square',\n        size: 'xs',\n        className: 'rounded-sm',\n      },\n    ],\n    defaultVariants: {\n      shape: 'pill',\n      size: 'md',\n    },\n  },\n);\n\nconst switchIndicatorVariants = cva(\n  'text-sm font-medium absolute mx-[2px] top-1/2 w-1/2 -translate-y-1/2 flex pointer-events-none items-center justify-center text-center transition-transform duration-300 [transition-timing-function:cubic-bezier(0.16,1,0.3,1)]',\n  {\n    variants: {\n      state: {\n        on: 'start-0',\n        off: 'end-0',\n      },\n      permanent: {\n        true: '',\n        false: '',\n      },\n    },\n    compoundVariants: [\n      {\n        state: 'on',\n        permanent: false,\n        className:\n          'text-primary-foreground peer-data-[state=unchecked]:invisible peer-data-[state=unchecked]:translate-x-full rtl:peer-data-[state=unchecked]:-translate-x-full',\n      },\n      {\n        state: 'off',\n        permanent: false,\n        className:\n          'peer-data-[state=checked]:invisible -translate-x-full rtl:translate-x-full peer-data-[state=unchecked]:translate-x-0',\n      },\n      {\n        state: 'on',\n        permanent: true,\n        className: 'start-0',\n      },\n      {\n        state: 'off',\n        permanent: true,\n        className: 'end-0',\n      },\n    ],\n    defaultVariants: {\n      state: 'off',\n      permanent: false,\n    },\n  },\n);\n\nfunction SwitchWrapper({\n  className,\n  children,\n  permanent = false,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & { permanent?: boolean }) {\n  return (\n    <SwitchContext.Provider value={{ permanent }}>\n      <div data-slot=\"switch-wrapper\" className={cn('relative inline-flex items-center', className)} {...props}>\n        {children}\n      </div>\n    </SwitchContext.Provider>\n  );\n}\n\nfunction Switch({\n  className,\n  thumbClassName = '',\n  shape,\n  size,\n  ...props\n}: React.ComponentProps<typeof SwitchPrimitive.Root> &\n  VariantProps<typeof switchVariants> & { thumbClassName?: string }) {\n  const context = useSwitchContext();\n  const permanent = context?.permanent ?? false;\n\n  return (\n    <SwitchPrimitive.Root\n      data-slot=\"switch\"\n      className={cn(switchVariants({ shape, size, permanent }), className)}\n      {...props}\n    >\n      <SwitchPrimitive.Thumb className={cn(switchThumbVariants({ shape, size }), thumbClassName)} />\n    </SwitchPrimitive.Root>\n  );\n}\n\nfunction SwitchIndicator({\n  className,\n  state,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement> & VariantProps<typeof switchIndicatorVariants>) {\n  const context = useSwitchContext();\n  const permanent = context?.permanent ?? false;\n\n  return (\n    <span\n      data-slot=\"switch-indicator\"\n      className={cn(switchIndicatorVariants({ state, permanent }), className)}\n      {...props}\n    />\n  );\n}\n\nexport { Switch, SwitchIndicator, SwitchWrapper };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
