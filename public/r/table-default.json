{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "table-default",
  "type": "registry:component",
  "dependencies": ["clsx", "tailwind-merge"],
  "registryDependencies": ["https://reui.io/r/table.json"],
  "files": [
    {
      "path": "registry/default/components/table/default.tsx",
      "content": "import {\n  Table,\n  TableBody,\n  TableCaption,\n  TableCell,\n  TableFooter,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/registry/default/ui/table';\n\nconst subscriptions = [\n  {\n    subscriptionId: 'SUB001',\n    customerName: 'John Doe',\n    plan: 'Pro',\n    status: 'Active',\n    renewalDate: '2024-02-15',\n    amount: '$49.99',\n  },\n  {\n    subscriptionId: 'SUB002',\n    customerName: 'Jane Smith',\n    plan: 'Basic',\n    status: 'Cancelled',\n    renewalDate: '2024-01-10',\n    amount: '$19.99',\n  },\n  {\n    subscriptionId: 'SUB003',\n    customerName: 'Michael Brown',\n    plan: 'Enterprise',\n    status: 'Pending',\n    renewalDate: '2024-03-01',\n    amount: '$99.99',\n  },\n  {\n    subscriptionId: 'SUB004',\n    customerName: 'Emily Johnson',\n    plan: 'Pro',\n    status: 'Active',\n    renewalDate: '2024-02-20',\n    amount: '$49.99',\n  },\n  {\n    subscriptionId: 'SUB005',\n    customerName: 'David Wilson',\n    plan: 'Basic',\n    status: 'Active',\n    renewalDate: '2024-02-05',\n    amount: '$19.99',\n  },\n];\n\nexport default function TableDemo() {\n  return (\n    <Table>\n      <TableCaption>A list of your active and past subscriptions.</TableCaption>\n      <TableHeader>\n        <TableRow>\n          <TableHead className=\"w-[120px]\">Ref ID</TableHead>\n          <TableHead>Customer Name</TableHead>\n          <TableHead>Plan</TableHead>\n          <TableHead>Status</TableHead>\n          <TableHead>Renewal Date</TableHead>\n          <TableHead className=\"text-right\">Amount</TableHead>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {subscriptions.map((sub) => (\n          <TableRow key={sub.subscriptionId}>\n            <TableCell className=\"font-medium\">{sub.subscriptionId}</TableCell>\n            <TableCell>{sub.customerName}</TableCell>\n            <TableCell>{sub.plan}</TableCell>\n            <TableCell>\n              <span\n                className={`${sub.status === 'Active' ? 'text-green-600' : sub.status === 'Cancelled' ? 'text-red-600' : 'text-yellow-600'}`}\n              >\n                {sub.status}\n              </span>\n            </TableCell>\n            <TableCell>{sub.renewalDate}</TableCell>\n            <TableCell className=\"text-right\">{sub.amount}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n      <TableFooter>\n        <TableRow>\n          <TableCell colSpan={5}>Total Revenue</TableCell>\n          <TableCell className=\"text-right\">\n            {subscriptions\n              .filter((sub) => sub.status === 'Active')\n              .reduce((total, sub) => total + parseFloat(sub.amount.slice(1)), 0)\n              .toLocaleString('en-US', {\n                style: 'currency',\n                currency: 'USD',\n              })}\n          </TableCell>\n        </TableRow>\n      </TableFooter>\n    </Table>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/table.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\n\nfunction Table({ className, ...props }: React.HTMLAttributes<HTMLTableElement>) {\n  return (\n    <div data-slot=\"table-wrapper\" className=\"relative w-full overflow-auto\">\n      <table data-slot=\"table\" className={cn('w-full caption-bottom text-foreground text-sm', className)} {...props} />\n    </div>\n  );\n}\n\nfunction TableHeader({ className, ...props }: React.HTMLAttributes<HTMLTableSectionElement>) {\n  return <thead data-slot=\"table-header\" className={cn('[&_tr]:border-b', className)} {...props} />;\n}\n\nfunction TableBody({ className, ...props }: React.HTMLAttributes<HTMLTableSectionElement>) {\n  return <tbody data-slot=\"table-body\" className={cn('[&_tr:last-child]:border-0', className)} {...props} />;\n}\n\nfunction TableFooter({ className, ...props }: React.HTMLAttributes<HTMLTableSectionElement>) {\n  return (\n    <tfoot\n      data-slot=\"table-footer\"\n      className={cn('border-t bg-muted/50 font-medium last:[&>tr]:border-b-0', className)}\n      {...props}\n    />\n  );\n}\n\nfunction TableRow({ className, ...props }: React.HTMLAttributes<HTMLTableRowElement>) {\n  return (\n    <tr\n      data-slot=\"table-row\"\n      className={cn(\n        'border-b transition-colors [&:has(td):hover]:bg-muted/50 data-[state=selected]:bg-muted',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction TableHead({ className, ...props }: React.ThHTMLAttributes<HTMLTableCellElement>) {\n  return (\n    <th\n      data-slot=\"table-head\"\n      className={cn(\n        'h-12 px-4 text-left rtl:text-right align-middle font-normal text-muted-foreground [&:has([role=checkbox])]:pe-0',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction TableCell({ className, ...props }: React.TdHTMLAttributes<HTMLTableCellElement>) {\n  return (\n    <td data-slot=\"table-cell\" className={cn('p-4 align-middle [&:has([role=checkbox])]:pe-0', className)} {...props} />\n  );\n}\n\nfunction TableCaption({ className, ...props }: React.HTMLAttributes<HTMLTableCaptionElement>) {\n  return (\n    <caption data-slot=\"table-caption\" className={cn('mt-4 text-sm text-muted-foreground', className)} {...props} />\n  );\n}\n\nexport { Table, TableBody, TableCaption, TableCell, TableFooter, TableHead, TableHeader, TableRow };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
