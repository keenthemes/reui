{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "typing-text-loop",
  "type": "registry:component",
  "dependencies": ["motion"],
  "registryDependencies": ["https://reui.io/r/typing-text.json"],
  "files": [
    {
      "path": "registry/default/components/typing-text/loop.tsx",
      "content": "import { TypingText } from '@/registry/default/ui/typing-text';\n\nexport default function Component() {\n  return (\n    <div className=\"flex items-center justify-center\">\n      <TypingText\n        texts={[\n          'Welcome to our platform',\n          'Build amazing projects',\n          'Create beautiful designs',\n          'Ship faster than ever',\n        ]}\n        className=\"text-2xl font-semibold\"\n        speed={100}\n        loop={true}\n        pauseDuration={1500}\n        showCursor={true}\n        cursor=\"_\"\n        cursorClassName=\"font-bold\"\n      />\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/typing-text.tsx",
      "content": "'use client';\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { motion, MotionProps, useInView, UseInViewOptions, Variants } from 'motion/react';\nimport { cn } from '@/lib/utils';\n\ntype AnimationVariant =\n  | 'fadeIn'\n  | 'blurIn'\n  | 'blurInUp'\n  | 'blurInDown'\n  | 'slideUp'\n  | 'slideDown'\n  | 'slideLeft'\n  | 'slideRight'\n  | 'scaleUp'\n  | 'scaleDown';\n\ninterface TypingTextProps extends Omit<MotionProps, 'children'> {\n  /** Text to animate */\n  text?: string;\n  /** Array of texts to cycle through */\n  texts?: string[];\n  /** Typing speed in milliseconds */\n  speed?: number;\n  /** Delay before starting animation */\n  delay?: number;\n  /** Whether to show cursor */\n  showCursor?: boolean;\n  /** Cursor character */\n  cursor?: string;\n  /** Cursor className */\n  cursorClassName?: string;\n  /** Whether to loop through texts */\n  loop?: boolean;\n  /** Pause duration between loops */\n  pauseDuration?: number;\n  /** Custom className */\n  className?: string;\n  /** Callback when typing completes */\n  onComplete?: () => void;\n  /** Whether to start animation when component enters viewport */\n  startOnView?: boolean;\n  /** Whether to animate only once */\n  once?: boolean;\n  /** The animation preset to use */\n  animation?: AnimationVariant;\n  /** Margin for in-view detection (rootMargin) */\n  inViewMargin?: UseInViewOptions['margin'];\n}\n\nconst cursorVariants: Variants = {\n  blinking: {\n    opacity: [0, 0, 1, 1],\n    transition: {\n      duration: 1,\n      repeat: Infinity,\n      repeatDelay: 0,\n      ease: 'linear',\n      times: [0, 0.5, 0.5, 1],\n    },\n  },\n};\n\nexport function TypingText({\n  text,\n  texts,\n  speed = 100,\n  delay = 0,\n  showCursor = true,\n  cursorClassName = '',\n  cursor = '|',\n  loop = false,\n  pauseDuration = 2000,\n  className,\n  onComplete,\n  startOnView = true,\n  once = false,\n  inViewMargin,\n  ...props\n}: TypingTextProps) {\n  const ref = useRef<HTMLSpanElement>(null);\n  const isInView = useInView(ref, { once, margin: inViewMargin as UseInViewOptions['margin'] });\n  const [hasAnimated, setHasAnimated] = useState(false);\n  const [displayText, setDisplayText] = useState('');\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isTyping, setIsTyping] = useState(false);\n  const [currentTextIndex, setCurrentTextIndex] = useState(0);\n\n  // Determine if we should start animation\n  const shouldStart = !startOnView || (isInView && (!once || !hasAnimated));\n\n  const textArray = texts && texts.length > 0 ? texts : [text];\n  const currentText = textArray[currentTextIndex] ?? '';\n\n  useEffect(() => {\n    if (!shouldStart) return;\n    const timeout = setTimeout(() => {\n      setIsTyping(true);\n      setHasAnimated(true);\n    }, delay);\n\n    return () => clearTimeout(timeout);\n  }, [delay, shouldStart]);\n\n  useEffect(() => {\n    if (!isTyping) return;\n\n    if (currentIndex < currentText.length) {\n      const timeout = setTimeout(() => {\n        setDisplayText(currentText.slice(0, currentIndex + 1));\n        setCurrentIndex(currentIndex + 1);\n      }, speed);\n\n      return () => clearTimeout(timeout);\n    } else {\n      // Typing complete\n      onComplete?.();\n\n      if (loop && texts && texts.length > 1) {\n        const timeout = setTimeout(() => {\n          setDisplayText('');\n          setCurrentIndex(0);\n          setCurrentTextIndex((prev) => (prev + 1) % texts.length);\n        }, pauseDuration);\n\n        return () => clearTimeout(timeout);\n      }\n    }\n  }, [currentIndex, currentText, isTyping, speed, loop, texts, pauseDuration, onComplete]);\n\n  // Animation variants for container (fadeIn by default, extendable)\n  const finalVariants = {\n    container: {\n      hidden: { opacity: 0, y: 10 },\n      show: { opacity: 1, y: 0, transition: { staggerChildren: 0.02 } },\n      exit: { opacity: 0 },\n    },\n  };\n  const MotionComponent = motion.span;\n\n  return (\n    <MotionComponent\n      ref={ref}\n      variants={finalVariants.container as Variants}\n      initial=\"hidden\"\n      whileInView={startOnView ? 'show' : undefined}\n      animate={startOnView ? undefined : 'show'}\n      exit=\"exit\"\n      className={cn('whitespace-pre-wrap', className)}\n      viewport={{ once }}\n      {...props}\n    >\n      <span style={{ display: 'inline-flex', alignItems: 'center' }}>\n        {displayText}\n        {showCursor && (\n          <motion.span\n            variants={cursorVariants}\n            animate=\"blinking\"\n            className={cn('inline-block ms-1 font-normal text-foreground select-none w-px', cursorClassName)}\n          >\n            {cursor}\n          </motion.span>\n        )}\n      </span>\n    </MotionComponent>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
