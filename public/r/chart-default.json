{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "chart-default",
  "type": "registry:component",
  "dependencies": ["recharts@2.15.1", "clsx", "tailwind-merge", "class-variance-authority", "recharts"],
  "registryDependencies": ["https://reui.io/r/card.json", "https://reui.io/r/chart.json"],
  "files": [
    {
      "path": "registry/default/components/chart/default.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/registry/default/ui/card';\nimport { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent } from '@/registry/default/ui/chart';\nimport { Bar, BarChart, CartesianGrid, XAxis } from 'recharts';\n\nexport const description = 'An interactive bar chart';\n\nconst chartData = [\n  { date: '2025-04-01', desktop: 222, mobile: 150 },\n  { date: '2025-04-02', desktop: 97, mobile: 180 },\n  { date: '2025-04-03', desktop: 167, mobile: 120 },\n  { date: '2025-04-04', desktop: 242, mobile: 260 },\n  { date: '2025-04-05', desktop: 373, mobile: 290 },\n  { date: '2025-04-06', desktop: 301, mobile: 340 },\n  { date: '2025-04-07', desktop: 245, mobile: 180 },\n  { date: '2025-04-08', desktop: 409, mobile: 320 },\n  { date: '2025-04-09', desktop: 59, mobile: 110 },\n  { date: '2025-04-10', desktop: 261, mobile: 190 },\n  { date: '2025-04-11', desktop: 327, mobile: 350 },\n  { date: '2025-04-12', desktop: 292, mobile: 210 },\n  { date: '2025-04-13', desktop: 342, mobile: 380 },\n  { date: '2025-04-14', desktop: 137, mobile: 220 },\n  { date: '2025-04-15', desktop: 120, mobile: 170 },\n  { date: '2025-04-16', desktop: 138, mobile: 190 },\n  { date: '2025-04-17', desktop: 446, mobile: 360 },\n  { date: '2025-04-18', desktop: 364, mobile: 410 },\n  { date: '2025-04-19', desktop: 243, mobile: 180 },\n  { date: '2025-04-20', desktop: 89, mobile: 150 },\n  { date: '2025-04-21', desktop: 137, mobile: 200 },\n  { date: '2025-04-22', desktop: 224, mobile: 170 },\n  { date: '2025-04-23', desktop: 138, mobile: 230 },\n  { date: '2025-04-24', desktop: 387, mobile: 290 },\n  { date: '2025-04-25', desktop: 215, mobile: 250 },\n  { date: '2025-04-26', desktop: 75, mobile: 130 },\n  { date: '2025-04-27', desktop: 383, mobile: 420 },\n  { date: '2025-04-28', desktop: 122, mobile: 180 },\n  { date: '2025-04-29', desktop: 315, mobile: 240 },\n  { date: '2025-04-30', desktop: 454, mobile: 380 },\n  { date: '2025-05-01', desktop: 165, mobile: 220 },\n  { date: '2025-05-02', desktop: 293, mobile: 310 },\n  { date: '2025-05-03', desktop: 247, mobile: 190 },\n  { date: '2025-05-04', desktop: 385, mobile: 420 },\n  { date: '2025-05-05', desktop: 481, mobile: 390 },\n  { date: '2025-05-06', desktop: 498, mobile: 520 },\n  { date: '2025-05-07', desktop: 388, mobile: 300 },\n  { date: '2025-05-08', desktop: 149, mobile: 210 },\n  { date: '2025-05-09', desktop: 227, mobile: 180 },\n  { date: '2025-05-10', desktop: 293, mobile: 330 },\n  { date: '2025-05-11', desktop: 335, mobile: 270 },\n  { date: '2025-05-12', desktop: 197, mobile: 240 },\n  { date: '2025-05-13', desktop: 197, mobile: 160 },\n  { date: '2025-05-14', desktop: 448, mobile: 490 },\n  { date: '2025-05-15', desktop: 473, mobile: 380 },\n  { date: '2025-05-16', desktop: 338, mobile: 400 },\n  { date: '2025-05-17', desktop: 499, mobile: 420 },\n  { date: '2025-05-18', desktop: 315, mobile: 350 },\n  { date: '2025-05-19', desktop: 235, mobile: 180 },\n  { date: '2025-05-20', desktop: 177, mobile: 230 },\n  { date: '2025-05-21', desktop: 82, mobile: 140 },\n  { date: '2025-05-22', desktop: 81, mobile: 120 },\n  { date: '2025-05-23', desktop: 252, mobile: 290 },\n  { date: '2025-05-24', desktop: 294, mobile: 220 },\n  { date: '2025-05-25', desktop: 201, mobile: 250 },\n  { date: '2025-05-26', desktop: 213, mobile: 170 },\n  { date: '2025-05-27', desktop: 420, mobile: 460 },\n  { date: '2025-05-28', desktop: 233, mobile: 190 },\n  { date: '2025-05-29', desktop: 78, mobile: 130 },\n  { date: '2025-05-30', desktop: 340, mobile: 280 },\n  { date: '2025-05-31', desktop: 178, mobile: 230 },\n  { date: '2025-06-01', desktop: 178, mobile: 200 },\n  { date: '2025-06-02', desktop: 470, mobile: 410 },\n  { date: '2025-06-03', desktop: 103, mobile: 160 },\n  { date: '2025-06-04', desktop: 439, mobile: 380 },\n  { date: '2025-06-05', desktop: 88, mobile: 140 },\n  { date: '2025-06-06', desktop: 294, mobile: 250 },\n  { date: '2025-06-07', desktop: 323, mobile: 370 },\n  { date: '2025-06-08', desktop: 385, mobile: 320 },\n  { date: '2025-06-09', desktop: 438, mobile: 480 },\n  { date: '2025-06-10', desktop: 155, mobile: 200 },\n  { date: '2025-06-11', desktop: 92, mobile: 150 },\n  { date: '2025-06-12', desktop: 492, mobile: 420 },\n  { date: '2025-06-13', desktop: 81, mobile: 130 },\n  { date: '2025-06-14', desktop: 426, mobile: 380 },\n  { date: '2025-06-15', desktop: 307, mobile: 350 },\n  { date: '2025-06-16', desktop: 371, mobile: 310 },\n  { date: '2025-06-17', desktop: 475, mobile: 520 },\n  { date: '2025-06-18', desktop: 107, mobile: 170 },\n  { date: '2025-06-19', desktop: 341, mobile: 290 },\n  { date: '2025-06-20', desktop: 408, mobile: 450 },\n  { date: '2025-06-21', desktop: 169, mobile: 210 },\n  { date: '2025-06-22', desktop: 317, mobile: 270 },\n  { date: '2025-06-23', desktop: 480, mobile: 530 },\n  { date: '2025-06-24', desktop: 132, mobile: 180 },\n  { date: '2025-06-25', desktop: 141, mobile: 190 },\n  { date: '2025-06-26', desktop: 434, mobile: 380 },\n  { date: '2025-06-27', desktop: 448, mobile: 490 },\n  { date: '2025-06-28', desktop: 149, mobile: 200 },\n  { date: '2025-06-29', desktop: 103, mobile: 160 },\n  { date: '2025-06-30', desktop: 446, mobile: 400 },\n];\n\nconst chartConfig = {\n  views: {\n    label: 'Page Views',\n  },\n  desktop: {\n    label: 'Desktop',\n    color: 'var(--chart-2)',\n  },\n  mobile: {\n    label: 'Mobile',\n    color: 'var(--chart-1)',\n  },\n} satisfies ChartConfig;\n\nexport default function Component() {\n  const [activeChart, setActiveChart] = React.useState<keyof typeof chartConfig>('desktop');\n\n  const total = React.useMemo(\n    () => ({\n      desktop: chartData.reduce((acc, curr) => acc + curr.desktop, 0),\n      mobile: chartData.reduce((acc, curr) => acc + curr.mobile, 0),\n    }),\n    [],\n  );\n\n  return (\n    <Card className=\"py-0\">\n      <CardHeader className=\"flex flex-col items-stretch border-b !p-0 sm:flex-row\">\n        <div className=\"flex flex-1 flex-col justify-center gap-1 px-6 pt-4 pb-3 sm:!py-0\">\n          <CardTitle>Bar Chart - Interactive</CardTitle>\n          <CardDescription>Showing total visitors for the last 3 months</CardDescription>\n        </div>\n        <div className=\"flex\">\n          {['desktop', 'mobile'].map((key) => {\n            const chart = key as keyof typeof chartConfig;\n            return (\n              <button\n                key={chart}\n                data-active={activeChart === chart}\n                className=\"data-[active=true]:bg-muted/50 relative z-30 flex flex-1 flex-col justify-center gap-1 border-t px-6 py-4 text-left even:border-l sm:border-t-0 sm:border-l sm:px-8 sm:py-6\"\n                onClick={() => setActiveChart(chart)}\n              >\n                <span className=\"text-muted-foreground text-xs\">{chartConfig[chart].label}</span>\n                <span className=\"text-lg leading-none font-bold sm:text-3xl\">\n                  {total[key as keyof typeof total].toLocaleString()}\n                </span>\n              </button>\n            );\n          })}\n        </div>\n      </CardHeader>\n      <CardContent className=\"px-2 sm:p-6\">\n        <ChartContainer config={chartConfig} className=\"aspect-auto h-[250px] w-full\">\n          <BarChart\n            accessibilityLayer\n            data={chartData}\n            margin={{\n              left: 12,\n              right: 12,\n            }}\n          >\n            <CartesianGrid vertical={false} />\n            <XAxis\n              dataKey=\"date\"\n              tickLine={false}\n              axisLine={false}\n              tickMargin={8}\n              minTickGap={32}\n              tickFormatter={(value) => {\n                const date = new Date(value);\n                return date.toLocaleDateString('en-US', {\n                  month: 'short',\n                  day: 'numeric',\n                });\n              }}\n            />\n            <ChartTooltip\n              content={\n                <ChartTooltipContent\n                  className=\"w-[150px]\"\n                  nameKey=\"views\"\n                  labelFormatter={(value) => {\n                    return new Date(value).toLocaleDateString('en-US', {\n                      month: 'short',\n                      day: 'numeric',\n                      year: 'numeric',\n                    });\n                  }}\n                />\n              }\n            />\n            <Bar dataKey={activeChart} fill={`var(--color-${activeChart})`} />\n          </BarChart>\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/card.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\n// Define CardContext\ntype CardContextType = {\n  variant: 'default' | 'accent';\n};\n\nconst CardContext = React.createContext<CardContextType>({\n  variant: 'default', // Default value\n});\n\n// Hook to use CardContext\nconst useCardContext = () => {\n  const context = React.useContext(CardContext);\n  if (!context) {\n    throw new Error('useCardContext must be used within a Card component');\n  }\n  return context;\n};\n\n// Variants\nconst cardVariants = cva('flex flex-col items-stretch text-card-foreground rounded-xl', {\n  variants: {\n    variant: {\n      default: 'bg-card border border-border shadow-xs black/5',\n      accent: 'bg-muted shadow-xs p-1',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardHeaderVariants = cva('flex items-center justify-between flex-wrap px-5 min-h-14 gap-2.5', {\n  variants: {\n    variant: {\n      default: 'border-b border-border',\n      accent: '',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardContentVariants = cva('grow p-5', {\n  variants: {\n    variant: {\n      default: '',\n      accent: 'bg-card rounded-t-xl [&:last-child]:rounded-b-xl',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardTableVariants = cva('grid grow', {\n  variants: {\n    variant: {\n      default: '',\n      accent: 'bg-card rounded-xl',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardFooterVariants = cva('flex items-center px-5 min-h-14', {\n  variants: {\n    variant: {\n      default: 'border-t border-border',\n      accent: 'bg-card rounded-b-xl mt-[2px]',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\n// Card Component\nfunction Card({\n  className,\n  variant = 'default',\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof cardVariants>) {\n  return (\n    <CardContext.Provider value={{ variant: variant || 'default' }}>\n      <div data-slot=\"card\" className={cn(cardVariants({ variant }), className)} {...props} />\n    </CardContext.Provider>\n  );\n}\n\n// CardHeader Component\nfunction CardHeader({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-header\" className={cn(cardHeaderVariants({ variant }), className)} {...props} />;\n}\n\n// CardContent Component\nfunction CardContent({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-content\" className={cn(cardContentVariants({ variant }), className)} {...props} />;\n}\n\n// CardTable Component\nfunction CardTable({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-table\" className={cn(cardTableVariants({ variant }), className)} {...props} />;\n}\n\n// CardFooter Component\nfunction CardFooter({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-footer\" className={cn(cardFooterVariants({ variant }), className)} {...props} />;\n}\n\n// Other Components\nfunction CardHeading({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-heading\" className={cn('space-y-1', className)} {...props} />;\n}\n\nfunction CardToolbar({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-toolbar\" className={cn('flex items-center gap-2.5', className)} {...props} />;\n}\n\nfunction CardTitle({ className, ...props }: React.HTMLAttributes<HTMLHeadingElement>) {\n  return (\n    <h3\n      data-slot=\"card-title\"\n      className={cn('text-base font-semibold leading-none tracking-tight', className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-description\" className={cn('text-sm text-muted-foreground', className)} {...props} />;\n}\n\n// Exports\nexport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardHeading, CardTable, CardTitle, CardToolbar };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/chart.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport * as RechartsPrimitive from 'recharts';\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: '', dark: '.dark' } as const;\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode;\n    icon?: React.ComponentType;\n  } & ({ color?: string; theme?: never } | { color?: never; theme: Record<keyof typeof THEMES, string> });\n};\n\ntype ChartContextProps = {\n  config: ChartConfig;\n};\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null);\n\nfunction useChart() {\n  const context = React.useContext(ChartContext);\n\n  if (!context) {\n    throw new Error('useChart must be used within a <ChartContainer />');\n  }\n\n  return context;\n}\n\nfunction ChartContainer({\n  id,\n  className,\n  children,\n  config,\n  ...props\n}: React.ComponentProps<'div'> & {\n  config: ChartConfig;\n  children: React.ComponentProps<typeof RechartsPrimitive.ResponsiveContainer>['children'];\n}) {\n  const uniqueId = React.useId();\n  const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`;\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-slot=\"chart\"\n        data-chart={chartId}\n        className={cn(\n          \"[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden\",\n          className,\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>{children}</RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  );\n}\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(([, config]) => config.theme || config.color);\n\n  if (!colorConfig.length) {\n    return null;\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color;\n    return color ? `  --color-${key}: ${color};` : null;\n  })\n  .join('\\n')}\n}\n`,\n          )\n          .join('\\n'),\n      }}\n    />\n  );\n};\n\nconst ChartTooltip = RechartsPrimitive.Tooltip;\n\nfunction ChartTooltipContent({\n  active,\n  payload,\n  className,\n  indicator = 'dot',\n  hideLabel = false,\n  hideIndicator = false,\n  label,\n  labelFormatter,\n  labelClassName,\n  formatter,\n  color,\n  nameKey,\n  labelKey,\n}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n  React.ComponentProps<'div'> & {\n    hideLabel?: boolean;\n    hideIndicator?: boolean;\n    indicator?: 'line' | 'dot' | 'dashed';\n    nameKey?: string;\n    labelKey?: string;\n  }) {\n  const { config } = useChart();\n\n  const tooltipLabel = React.useMemo(() => {\n    if (hideLabel || !payload?.length) {\n      return null;\n    }\n\n    const [item] = payload;\n    const key = `${labelKey || item?.dataKey || item?.name || 'value'}`;\n    const itemConfig = getPayloadConfigFromPayload(config, item, key);\n    const value =\n      !labelKey && typeof label === 'string' ? config[label as keyof typeof config]?.label || label : itemConfig?.label;\n\n    if (labelFormatter) {\n      return <div className={cn('font-medium', labelClassName)}>{labelFormatter(value, payload)}</div>;\n    }\n\n    if (!value) {\n      return null;\n    }\n\n    return <div className={cn('font-medium', labelClassName)}>{value}</div>;\n  }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey]);\n\n  if (!active || !payload?.length) {\n    return null;\n  }\n\n  const nestLabel = payload.length === 1 && indicator !== 'dot';\n\n  return (\n    <div\n      className={cn(\n        'border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl',\n        className,\n      )}\n    >\n      {!nestLabel ? tooltipLabel : null}\n      <div className=\"grid gap-1.5\">\n        {payload.map((item, index) => {\n          const key = `${nameKey || item.name || item.dataKey || 'value'}`;\n          const itemConfig = getPayloadConfigFromPayload(config, item, key);\n          const indicatorColor = color || item.payload.fill || item.color;\n\n          return (\n            <div\n              key={item.dataKey}\n              className={cn(\n                '[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5',\n                indicator === 'dot' && 'items-center',\n              )}\n            >\n              {formatter && item?.value !== undefined && item.name ? (\n                formatter(item.value, item.name, item, index, item.payload)\n              ) : (\n                <>\n                  {itemConfig?.icon ? (\n                    <itemConfig.icon />\n                  ) : (\n                    !hideIndicator && (\n                      <div\n                        className={cn('shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)', {\n                          'h-2.5 w-2.5': indicator === 'dot',\n                          'w-1': indicator === 'line',\n                          'w-0 border-[1.5px] border-dashed bg-transparent': indicator === 'dashed',\n                          'my-0.5': nestLabel && indicator === 'dashed',\n                        })}\n                        style={\n                          {\n                            '--color-bg': indicatorColor,\n                            '--color-border': indicatorColor,\n                          } as React.CSSProperties\n                        }\n                      />\n                    )\n                  )}\n                  <div\n                    className={cn('flex flex-1 justify-between leading-none', nestLabel ? 'items-end' : 'items-center')}\n                  >\n                    <div className=\"grid gap-1.5\">\n                      {nestLabel ? tooltipLabel : null}\n                      <span className=\"text-muted-foreground\">{itemConfig?.label || item.name}</span>\n                    </div>\n                    {item.value && (\n                      <span className=\"text-foreground font-mono font-medium tabular-nums\">\n                        {item.value.toLocaleString()}\n                      </span>\n                    )}\n                  </div>\n                </>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nconst ChartLegend = RechartsPrimitive.Legend;\n\nfunction ChartLegendContent({\n  className,\n  hideIcon = false,\n  payload,\n  verticalAlign = 'bottom',\n  nameKey,\n}: React.ComponentProps<'div'> &\n  Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {\n    hideIcon?: boolean;\n    nameKey?: string;\n  }) {\n  const { config } = useChart();\n\n  if (!payload?.length) {\n    return null;\n  }\n\n  return (\n    <div className={cn('flex items-center justify-center gap-4', verticalAlign === 'top' ? 'pb-3' : 'pt-3', className)}>\n      {payload.map((item) => {\n        const key = `${nameKey || item.dataKey || 'value'}`;\n        const itemConfig = getPayloadConfigFromPayload(config, item, key);\n\n        return (\n          <div\n            key={item.value}\n            className={cn('[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3')}\n          >\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                style={{\n                  backgroundColor: item.color,\n                }}\n              />\n            )}\n            {itemConfig?.label}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(config: ChartConfig, payload: unknown, key: string) {\n  if (typeof payload !== 'object' || payload === null) {\n    return undefined;\n  }\n\n  const payloadPayload =\n    'payload' in payload && typeof payload.payload === 'object' && payload.payload !== null\n      ? payload.payload\n      : undefined;\n\n  let configLabelKey: string = key;\n\n  if (key in payload && typeof payload[key as keyof typeof payload] === 'string') {\n    configLabelKey = payload[key as keyof typeof payload] as string;\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'\n  ) {\n    configLabelKey = payloadPayload[key as keyof typeof payloadPayload] as string;\n  }\n\n  return configLabelKey in config ? config[configLabelKey] : config[key as keyof typeof config];\n}\n\nexport { ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent, ChartStyle };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
