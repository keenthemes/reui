{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "github-button-separator",
  "type": "registry:component",
  "dependencies": ["class-variance-authority", "lucide-react", "motion"],
  "registryDependencies": ["https://reui.io/r/github-button.json"],
  "files": [
    {
      "path": "registry/default/components/github-button/separator.tsx",
      "content": "import { GithubButton } from '@/registry/default/ui/github-button';\n\nexport default function Component() {\n  return (\n    <div className=\"flex gap-4 flex-wrap\">\n      <GithubButton\n        initialStars={8889}\n        targetStars={80890}\n        separator={true}\n        label=\"\"\n        roundStars={true}\n        repoUrl=\"https://github.com/keenthemes/reui\"\n        variant=\"outline\"\n      />\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/github-button.tsx",
      "content": "'use client';\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { Star } from 'lucide-react';\nimport { motion, useInView, type SpringOptions, type UseInViewOptions } from 'motion/react';\nimport { cn } from '@/lib/utils';\n\nconst githubButtonVariants = cva(\n  'cursor-pointer relative overflow-hidden will-change-transform backface-visibility-hidden transform-gpu transition-transform duration-200 ease-out hover:scale-105 group whitespace-nowrap focus-visible:outline-hidden inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background disabled:pointer-events-none disabled:opacity-60 [&_svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-zinc-950 hover:bg-zinc-900 text-white border-gray-700 dark:bg-zinc-50 dark:border-gray-300 dark:text-zinc-950 dark:hover:bg-zinc-50',\n        outline: 'bg-background text-accent-foreground border border-input hover:bg-accent',\n      },\n      size: {\n        default: 'h-8.5 rounded-md px-3 gap-2 text-[0.8125rem] leading-none [&_svg]:size-4 gap-2',\n        sm: 'h-7 rounded-md px-2.5 gap-1.5 text-xs leading-none [&_svg]:size-3.5 gap-1.5',\n        lg: 'h-10 rounded-md px-4 gap-2.5 text-sm leading-none [&_svg]:size-5 gap-2.5',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\ninterface GithubButtonProps extends React.ComponentProps<'button'>, VariantProps<typeof githubButtonVariants> {\n  /** Whether to round stars */\n  roundStars?: boolean;\n  /** Whether to show Github icon */\n  fixedWidth?: boolean;\n  /** Initial number of stars */\n  initialStars?: number;\n  /** Class for stars */\n  starsClass?: string;\n  /** Target number of stars to animate to */\n  targetStars?: number;\n  /** Animation duration in seconds */\n  animationDuration?: number;\n  /** Animation delay in seconds */\n  animationDelay?: number;\n  /** Whether to start animation automatically */\n  autoAnimate?: boolean;\n  /** Callback when animation completes */\n  onAnimationComplete?: () => void;\n  /** Whether to show Github icon */\n  showGithubIcon?: boolean;\n  /** Whether to show star icon */\n  showStarIcon?: boolean;\n  /** Whether to show separator */\n  separator?: boolean;\n  /** Whether stars should be filled */\n  filled?: boolean;\n  /** Repository URL for actual Github integration */\n  repoUrl?: string;\n  /** Button text label */\n  label?: string;\n  /** Use in-view detection to trigger animation */\n  useInViewTrigger?: boolean;\n  /** In-view options */\n  inViewOptions?: UseInViewOptions;\n  /** Spring transition options */\n  transition?: SpringOptions;\n}\n\nfunction GithubButton({\n  initialStars = 0,\n  targetStars = 0,\n  starsClass = '',\n  fixedWidth = true,\n  animationDuration = 2,\n  animationDelay = 0,\n  autoAnimate = true,\n  className,\n  variant = 'default',\n  size = 'default',\n  showGithubIcon = true,\n  showStarIcon = true,\n  roundStars = false,\n  separator = false,\n  filled = false,\n  repoUrl,\n  onClick,\n  label = '',\n  useInViewTrigger = false,\n  inViewOptions = { once: true },\n  transition,\n  ...props\n}: GithubButtonProps) {\n  const [currentStars, setCurrentStars] = useState(initialStars);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const [starProgress, setStarProgress] = useState(filled ? 100 : 0);\n  const [hasAnimated, setHasAnimated] = useState(false);\n\n  // Format number with units\n  const formatNumber = (num: number) => {\n    const units = ['k', 'M', 'B', 'T'];\n\n    if (roundStars && num >= 1000) {\n      let unitIndex = -1;\n      let value = num;\n\n      while (value >= 1000 && unitIndex < units.length - 1) {\n        value /= 1000;\n        unitIndex++;\n      }\n\n      // Format to 1 decimal place if needed, otherwise show whole number\n      const formatted = value % 1 === 0 ? value.toString() : value.toFixed(1);\n      return `${formatted}${units[unitIndex]}`;\n    }\n\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  };\n\n  // Start animation\n  const startAnimation = useCallback(() => {\n    if (isAnimating || hasAnimated) return;\n\n    setIsAnimating(true);\n    const startTime = Date.now();\n    const startValue = 0; // Always start from 0 for number animation\n    const endValue = targetStars;\n    const duration = animationDuration * 1000;\n\n    const animate = () => {\n      const elapsed = Date.now() - startTime;\n      const progress = Math.min(elapsed / duration, 1);\n\n      // Easing function for smooth animation\n      const easeOutQuart = 1 - Math.pow(1 - progress, 4);\n\n      // Update star count from 0 to target with more frequent updates\n      const newStars = Math.round(startValue + (endValue - startValue) * easeOutQuart);\n      setCurrentStars(newStars);\n\n      // Update star fill progress (0 to 100)\n      setStarProgress(progress * 100);\n\n      if (progress < 1) {\n        requestAnimationFrame(animate);\n      } else {\n        setCurrentStars(endValue);\n        setStarProgress(100);\n        setIsAnimating(false);\n        setHasAnimated(true);\n      }\n    };\n\n    setTimeout(() => {\n      requestAnimationFrame(animate);\n    }, animationDelay * 1000);\n  }, [isAnimating, hasAnimated, targetStars, animationDuration, animationDelay]);\n\n  // Use in-view detection if enabled\n  const ref = React.useRef(null);\n  const isInView = useInView(ref, inViewOptions);\n\n  // Reset animation state when targetStars changes\n  useEffect(() => {\n    setHasAnimated(false);\n    setCurrentStars(initialStars);\n  }, [targetStars, initialStars]);\n\n  // Auto-start animation or use in-view trigger\n  useEffect(() => {\n    if (useInViewTrigger) {\n      if (isInView && !hasAnimated) {\n        startAnimation();\n      }\n    } else if (autoAnimate && !hasAnimated) {\n      startAnimation();\n    }\n  }, [autoAnimate, useInViewTrigger, isInView, hasAnimated, startAnimation]);\n\n  const navigateToRepo = () => {\n    if (!repoUrl) {\n      return;\n    }\n\n    // Next.js compatible navigation approach\n    try {\n      // Create a temporary anchor element for reliable navigation\n      const link = document.createElement('a');\n      link.href = repoUrl;\n      link.target = '_blank';\n      link.rel = 'noopener noreferrer';\n\n      // Temporarily add to DOM and click\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } catch {\n      // Fallback to window.open\n      try {\n        window.open(repoUrl, '_blank', 'noopener,noreferrer');\n      } catch {\n        // Final fallback\n        window.location.href = repoUrl;\n      }\n    }\n  };\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    if (onClick) {\n      onClick(event);\n      return;\n    }\n\n    if (repoUrl) {\n      navigateToRepo();\n    } else if (!hasAnimated) {\n      startAnimation();\n    }\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLButtonElement>) => {\n    // Handle Enter and Space key presses for accessibility\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n\n      if (repoUrl) {\n        navigateToRepo();\n      } else if (!hasAnimated) {\n        startAnimation();\n      }\n    }\n  };\n\n  return (\n    <button\n      ref={ref}\n      className={cn(githubButtonVariants({ variant, size, className }), separator && 'ps-0')}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n      role=\"button\"\n      tabIndex={0}\n      aria-label={repoUrl ? `Star ${label} on GitHub` : label}\n      {...props}\n    >\n      {showGithubIcon && (\n        <div\n          className={cn(\n            'h-full relative flex items-center justify-center',\n            separator && 'w-9 bg-muted/60 border-e border-input',\n          )}\n        >\n          <svg role=\"img\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n            <path d=\"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\" />\n          </svg>\n        </div>\n      )}\n\n      {label && <span>{label}</span>}\n\n      {/* Animated Star Icon */}\n      {showStarIcon && (\n        <div className=\"relative inline-flex shrink-0\">\n          <Star className=\"fill-muted-foreground text-muted-foreground\" aria-hidden=\"true\" />\n          <Star\n            className=\"absolute top-0 start-0 text-yellow-400 fill-yellow-400\"\n            size={18}\n            aria-hidden=\"true\"\n            style={{\n              clipPath: `inset(${100 - starProgress}% 0 0 0)`,\n            }}\n          />\n        </div>\n      )}\n\n      {/* Animated Number Counter with Ticker Effect */}\n      <div className={cn('flex flex-col font-semibold relative overflow-hidden', starsClass)}>\n        <motion.div\n          animate={{ opacity: 1 }}\n          transition={{\n            type: 'spring',\n            stiffness: 300,\n            damping: 30,\n            ...transition,\n          }}\n          className=\"tabular-nums\"\n        >\n          <span>{currentStars > 0 && formatNumber(currentStars)}</span>\n        </motion.div>\n        {fixedWidth && <span className=\"opacity-0 h-0 overflow-hidden tabular-nums\">{formatNumber(targetStars)}</span>}\n      </div>\n    </button>\n  );\n}\n\nexport { GithubButton, githubButtonVariants };\nexport type { GithubButtonProps };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
