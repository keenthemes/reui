{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sliding-number-slider",
  "type": "registry:component",
  "dependencies": ["clsx", "tailwind-merge", "radix-ui", "framer-motion"],
  "registryDependencies": ["https://reui.io/r/slider.json", "https://reui.io/r/sliding-number.json"],
  "files": [
    {
      "path": "registry/default/components/sliding-number/slider.tsx",
      "content": "'use client';\n\nimport { useState } from 'react';\nimport { Slider, SliderThumb } from '@/registry/default/ui/slider';\nimport { SlidingNumber } from '@/registry/default/ui/sliding-number';\n\nexport default function SlidingNumberSliderDemo() {\n  const [value, setValue] = useState(100);\n  const [previousValue, setPreviousValue] = useState(100);\n\n  const handleSliderChange = (newValue: number[]) => {\n    const currentValue = newValue[0] * 10; // Convert 0-100 to 0-1000\n    setPreviousValue(value);\n    setValue(currentValue);\n  };\n\n  return (\n    <div className=\"w-full max-w-md mx-auto space-y-2.5 lg:w-40\">\n      <div className=\"flex flex-col items-start justify-start\">\n        <p className=\"text-sm text-muted-foreground\">Current ARR:</p>\n        <div className=\"inline-flex items-center gap-0.5 text-3xl font-bold\">\n          $\n          <SlidingNumber from={previousValue} to={value} duration={0.5} startOnView={false} />\n        </div>\n      </div>\n      <div className=\"space-y-2\">\n        <Slider defaultValue={[10]} min={0} max={100} step={1} onValueChange={handleSliderChange} className=\"w-full\">\n          <SliderThumb />\n        </Slider>\n        <div className=\"flex justify-between text-xs text-muted-foreground\">\n          <span>$0</span>\n          <span>$1,000</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/slider.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Slider as SliderPrimitive } from 'radix-ui';\n\nfunction Slider({ className, children, ...props }: React.ComponentProps<typeof SliderPrimitive.Root>) {\n  return (\n    <SliderPrimitive.Root\n      data-slot=\"slider\"\n      className={cn('relative flex h-4 w-full touch-none select-none items-center', className)}\n      {...props}\n    >\n      <SliderPrimitive.Track className=\"relative h-1.5 w-full overflow-hidden rounded-full bg-accent\">\n        <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n      </SliderPrimitive.Track>\n      {children}\n    </SliderPrimitive.Root>\n  );\n}\n\nfunction SliderThumb({ className, ...props }: React.ComponentProps<typeof SliderPrimitive.Thumb>) {\n  return (\n    <SliderPrimitive.Thumb\n      data-slot=\"slider-thumb\"\n      className={cn(\n        'box-content block size-4 shrink-0 cursor-pointer rounded-full border-[2px] border-primary bg-primary-foreground shadow-xs shadow-black/5 outline-hidden focus:outline-hidden',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Slider, SliderThumb };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/sliding-number.tsx",
      "content": "'use client';\n\nimport { useEffect, useRef, useState } from 'react';\nimport { motion, MotionValue, useInView, useSpring, useTransform } from 'framer-motion';\n\nfunction Digit({\n  place,\n  value,\n  digitHeight,\n  duration,\n}: {\n  place: number;\n  value: number;\n  digitHeight: number;\n  duration: number;\n}) {\n  const valueRoundedToPlace = Math.floor(value / place);\n  const animatedValue = useSpring(valueRoundedToPlace, {\n    duration: duration * 1000, // Convert to milliseconds\n  });\n\n  useEffect(() => {\n    animatedValue.set(valueRoundedToPlace);\n  }, [animatedValue, valueRoundedToPlace]);\n\n  return (\n    <div style={{ height: digitHeight }} className=\"relative w-[1ch] tabular-nums overflow-hidden\">\n      {Array.from({ length: 10 }, (_, i) => (\n        <Number key={i} mv={animatedValue} number={i} digitHeight={digitHeight} />\n      ))}\n    </div>\n  );\n}\n\nfunction Number({ mv, number, digitHeight }: { mv: MotionValue<number>; number: number; digitHeight: number }) {\n  const y = useTransform(mv, (latest: number) => {\n    const placeValue = latest % 10;\n    const offset = (10 + number - placeValue) % 10;\n\n    let memo = offset * digitHeight;\n\n    if (offset > 5) {\n      memo -= 10 * digitHeight;\n    }\n\n    return memo;\n  });\n\n  return (\n    <motion.span style={{ y }} className=\"absolute inset-0 flex items-center justify-center\">\n      {number}\n    </motion.span>\n  );\n}\n\ninterface SlidingNumberProps {\n  from: number;\n  to: number;\n  duration?: number;\n  delay?: number;\n  startOnView?: boolean;\n  once?: boolean;\n  className?: string;\n  onComplete?: () => void;\n  digitHeight?: number;\n}\n\nexport function SlidingNumber({\n  from,\n  to,\n  duration = 2,\n  delay = 0,\n  startOnView = true,\n  once = false,\n  className = '',\n  onComplete,\n  digitHeight = 40,\n}: SlidingNumberProps) {\n  const ref = useRef(null);\n  const isInView = useInView(ref, { once: false }); // Always use false, manage once manually\n  const [currentValue, setCurrentValue] = useState(from);\n  const [hasAnimated, setHasAnimated] = useState(false);\n  const [animationKey, setAnimationKey] = useState(0);\n\n  // Reset animation state on component mount (route changes)\n  useEffect(() => {\n    setCurrentValue(from);\n    setHasAnimated(false);\n    setAnimationKey((prev) => prev + 1);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Empty dependency array - runs on every mount\n\n  // Reset animation state when from/to values change\n  useEffect(() => {\n    setCurrentValue(from);\n    setHasAnimated(false);\n    setAnimationKey((prev) => prev + 1);\n  }, [from, to]);\n\n  // Manage animation triggering manually\n  useEffect(() => {\n    if (!startOnView || !isInView) return;\n\n    // If once=true and already animated on this mount, don't animate again\n    if (once && hasAnimated) return;\n\n    // Trigger animation\n    const timer = setTimeout(() => {\n      setAnimationKey((prev) => prev + 1);\n    }, 50);\n\n    return () => clearTimeout(timer);\n  }, [isInView, startOnView, once, hasAnimated]);\n\n  const shouldStart = !startOnView || (isInView && (!once || !hasAnimated));\n\n  useEffect(() => {\n    if (!shouldStart) return;\n    setHasAnimated(true);\n\n    const timer = setTimeout(() => {\n      const startTime = Date.now();\n      const startValue = currentValue;\n      const difference = to - startValue;\n\n      const animate = () => {\n        const elapsed = Date.now() - startTime;\n        const progress = Math.min(elapsed / (duration * 1000), 1);\n        const easeOutCubic = 1 - Math.pow(1 - progress, 3);\n        const newValue = startValue + difference * easeOutCubic;\n\n        setCurrentValue(newValue);\n\n        if (progress < 1) {\n          requestAnimationFrame(animate);\n        } else {\n          setCurrentValue(to);\n          onComplete?.();\n        }\n      };\n\n      requestAnimationFrame(animate);\n    }, delay * 1000);\n\n    return () => clearTimeout(timer);\n  }, [shouldStart, currentValue, to, duration, delay, onComplete]);\n\n  // Round the current value to avoid showing decimals during animation\n  const roundedValue = Math.round(currentValue);\n  const absValue = Math.abs(roundedValue);\n\n  // Determine the maximum number of digits needed\n  const maxDigits = Math.max(Math.abs(from).toString().length, Math.abs(to).toString().length);\n\n  // Create array of place values (1, 10, 100, 1000, etc.)\n  const places = Array.from({ length: maxDigits }, (_, i) => Math.pow(10, maxDigits - i - 1));\n\n  return (\n    <div ref={ref} className={`flex items-center ${className}`}>\n      {roundedValue < 0 && '-'}\n      {places.map((place) => (\n        <Digit\n          key={`${place}-${animationKey}`}\n          place={place}\n          value={absValue}\n          digitHeight={digitHeight}\n          duration={duration}\n        />\n      ))}\n    </div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
