{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "text-reveal-slide-variants",
  "type": "registry:component",
  "dependencies": ["motion"],
  "registryDependencies": ["https://reui.io/r/text-reveal.json"],
  "files": [
    {
      "path": "registry/default/components/text-reveal/slide-variants.tsx",
      "content": "import { TextReveal } from '@/registry/default/ui/text-reveal';\n\nexport default function SlideVariantsExample() {\n  return (\n    <div className=\"py-12 space-y-8\">\n      <div>\n        <TextReveal\n          variant=\"slideUp\"\n          className=\"text-xl font-bold text-foreground\"\n          staggerDelay={0.06}\n          delay={0}\n          startOnView={false}\n        >\n          Slide Up Animation\n        </TextReveal>\n      </div>\n\n      <div>\n        <TextReveal\n          variant=\"slideDown\"\n          className=\"text-xl font-bold text-foreground\"\n          staggerDelay={0.04}\n          delay={1.5}\n          startOnView={false}\n        >\n          Slide Down Animation\n        </TextReveal>\n      </div>\n\n      <div>\n        <TextReveal\n          variant=\"slideLeft\"\n          className=\"text-xl font-bold text-foreground\"\n          staggerDelay={0.05}\n          delay={3}\n          startOnView={false}\n        >\n          Slide Left Animation\n        </TextReveal>\n      </div>\n\n      <div>\n        <TextReveal\n          variant=\"slideRight\"\n          className=\"text-xl font-bold text-foreground\"\n          staggerDelay={0.05}\n          delay={4.5}\n          startOnView={false}\n        >\n          Slide Right Animation\n        </TextReveal>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/text-reveal.tsx",
      "content": "'use client';\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { motion, useInView, Variants } from 'motion/react';\nimport { cn } from '@/lib/utils';\n\ntype RevealVariant =\n  | 'fade'\n  | 'slideUp'\n  | 'slideDown'\n  | 'slideLeft'\n  | 'slideRight'\n  | 'scale'\n  | 'blur'\n  | 'typewriter'\n  | 'wave'\n  | 'stagger'\n  | 'rotate'\n  | 'elastic';\n\ninterface TextRevealProps {\n  children: string;\n  variant?: RevealVariant;\n  className?: string;\n  style?: React.CSSProperties;\n  delay?: number;\n  duration?: number;\n  staggerDelay?: number;\n  once?: boolean;\n  startOnView?: boolean;\n  wordLevel?: boolean;\n  onComplete?: () => void;\n}\n\nconst containerVariants: Record<RevealVariant, Variants> = {\n  fade: {\n    hidden: {},\n    visible: {\n      transition: { staggerChildren: 0.02 },\n    },\n  },\n  slideUp: {\n    hidden: {},\n    visible: {\n      transition: { staggerChildren: 0.04 },\n    },\n  },\n  slideDown: {\n    hidden: {},\n    visible: {\n      transition: { staggerChildren: 0.04 },\n    },\n  },\n  slideLeft: {\n    hidden: {},\n    visible: {\n      transition: { staggerChildren: 0.04 },\n    },\n  },\n  slideRight: {\n    hidden: {},\n    visible: {\n      transition: { staggerChildren: 0.04 },\n    },\n  },\n  scale: {\n    hidden: {},\n    visible: {\n      transition: { staggerChildren: 0.06 },\n    },\n  },\n  blur: {\n    hidden: {},\n    visible: {\n      transition: { staggerChildren: 0.03 },\n    },\n  },\n  typewriter: {\n    hidden: {},\n    visible: {\n      transition: { staggerChildren: 0.15 },\n    },\n  },\n  wave: {\n    hidden: {},\n    visible: {\n      transition: { staggerChildren: 0.12 },\n    },\n  },\n  stagger: {\n    hidden: {},\n    visible: {\n      transition: { staggerChildren: 0.08 },\n    },\n  },\n  rotate: {\n    hidden: {},\n    visible: {\n      transition: { staggerChildren: 0.05 },\n    },\n  },\n  elastic: {\n    hidden: {},\n    visible: {\n      transition: { staggerChildren: 0.07 },\n    },\n  },\n};\n\nconst itemVariants: Record<RevealVariant, Variants> = {\n  fade: {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: { duration: 0.6, ease: 'easeOut' },\n    },\n  },\n  slideUp: {\n    hidden: { opacity: 0, y: 50, scale: 0.95 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      scale: 1,\n      transition: { duration: 0.7, ease: [0.22, 1, 0.36, 1] },\n    },\n  },\n  slideDown: {\n    hidden: { opacity: 0, y: -30, scale: 0.98 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      scale: 1,\n      transition: { duration: 0.5, ease: [0.25, 0.46, 0.45, 0.94] },\n    },\n  },\n  slideLeft: {\n    hidden: { opacity: 0, x: 60, rotateY: 15 },\n    visible: {\n      opacity: 1,\n      x: 0,\n      rotateY: 0,\n      transition: { duration: 0.65, ease: [0.16, 1, 0.3, 1] },\n    },\n  },\n  slideRight: {\n    hidden: { opacity: 0, x: -60, rotateY: -15 },\n    visible: {\n      opacity: 1,\n      x: 0,\n      rotateY: 0,\n      transition: { duration: 0.65, ease: [0.16, 1, 0.3, 1] },\n    },\n  },\n  scale: {\n    hidden: { opacity: 0, scale: 0.8 },\n    visible: {\n      opacity: 1,\n      scale: 1,\n      transition: { duration: 0.4, ease: [0.34, 1.56, 0.64, 1] },\n    },\n  },\n  blur: {\n    hidden: { opacity: 0, filter: 'blur(4px)' },\n    visible: {\n      opacity: 1,\n      filter: 'blur(0px)',\n      transition: { duration: 0.6, ease: 'easeOut' },\n    },\n  },\n  typewriter: {\n    hidden: { width: 0 },\n    visible: {\n      width: 'auto',\n      transition: { duration: 0.3, ease: 'easeInOut' },\n    },\n  },\n  wave: {\n    hidden: { opacity: 0, y: 20, rotateZ: -5 },\n    visible: {\n      opacity: 1,\n      y: [20, -10, 0],\n      rotateZ: [-5, 5, 0],\n      transition: {\n        duration: 0.8,\n        ease: [0.34, 1.56, 0.64, 1],\n        times: [0, 0.5, 1],\n      },\n    },\n  },\n  stagger: {\n    hidden: { opacity: 0, y: 30, scale: 0.9 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      scale: 1,\n      transition: { duration: 0.6, ease: [0.25, 0.46, 0.45, 0.94] },\n    },\n  },\n  rotate: {\n    hidden: { opacity: 0, rotateY: -90 },\n    visible: {\n      opacity: 1,\n      rotateY: 0,\n      transition: { duration: 0.6, ease: [0.25, 0.46, 0.45, 0.94] },\n    },\n  },\n  elastic: {\n    hidden: { opacity: 0, scale: 0 },\n    visible: {\n      opacity: 1,\n      scale: [0, 1.2, 1],\n      transition: {\n        duration: 0.8,\n        ease: [0.68, -0.55, 0.265, 1.55],\n        times: [0, 0.6, 1],\n      },\n    },\n  },\n};\n\nexport function TextReveal({\n  children,\n  variant = 'fade',\n  className,\n  style,\n  delay = 0,\n  duration = 0.6,\n  staggerDelay = 0.03,\n  once = true,\n  startOnView = true,\n  wordLevel = false,\n}: TextRevealProps) {\n  const ref = useRef<HTMLDivElement>(null);\n  const isInView = useInView(ref, { once, margin: '-10%' });\n  const [hasAnimated, setHasAnimated] = useState(false);\n\n  const shouldAnimate = startOnView ? isInView : true;\n\n  // Split text into words or characters\n  const elements = wordLevel\n    ? children.split(' ').map((word, i, arr) => (i < arr.length - 1 ? `${word} ` : word))\n    : children.split('');\n\n  // Update container variants with custom stagger delay\n  const customContainerVariants = {\n    ...containerVariants[variant],\n    visible: {\n      transition: {\n        staggerChildren: staggerDelay,\n        delayChildren: delay,\n      },\n    },\n  };\n\n  // Use original item variants - only override duration if explicitly different from default\n  const originalVariant = itemVariants[variant];\n  const customItemVariants =\n    duration === 0.6\n      ? originalVariant // Use original variant unchanged if default duration\n      : {\n          hidden: originalVariant.hidden,\n          visible: {\n            ...originalVariant.visible,\n            transition: {\n              ...((originalVariant.visible as Record<string, unknown>).transition as Record<string, unknown>),\n              duration,\n            },\n          },\n        };\n\n  useEffect(() => {\n    if (shouldAnimate && !hasAnimated) {\n      setHasAnimated(true);\n    }\n  }, [shouldAnimate, hasAnimated]);\n\n  const MotionComponent = variant === 'typewriter' ? motion.div : motion.span;\n\n  return (\n    <motion.div\n      ref={ref}\n      className={cn('inline-block', className)}\n      variants={customContainerVariants}\n      initial=\"hidden\"\n      animate={shouldAnimate ? 'visible' : 'hidden'}\n      style={{\n        willChange: 'transform, opacity',\n        WebkitBackfaceVisibility: 'hidden',\n        backfaceVisibility: 'hidden',\n        WebkitTransform: 'translate3d(0,0,0)',\n        transform: 'translate3d(0,0,0)',\n        isolation: 'isolate',\n        contain: 'layout style paint',\n        ...style,\n      }}\n    >\n      {variant === 'typewriter' ? (\n        <motion.span\n          className=\"inline-block overflow-hidden whitespace-nowrap\"\n          variants={customItemVariants}\n          style={{\n            display: 'inline-block',\n            whiteSpace: 'nowrap',\n          }}\n        >\n          {children}\n        </motion.span>\n      ) : (\n        elements.map((element, index) => (\n          <MotionComponent\n            key={index}\n            className={cn('inline-block', {\n              'whitespace-pre': !wordLevel,\n            })}\n            variants={customItemVariants}\n            style={{\n              display: 'inline-block',\n              transformOrigin: variant === 'rotate' ? 'center center' : undefined,\n              willChange: 'transform, opacity',\n              WebkitBackfaceVisibility: 'hidden',\n              backfaceVisibility: 'hidden',\n              WebkitTransform: 'translate3d(0,0,0)',\n              transform: 'translate3d(0,0,0)',\n              isolation: 'isolate',\n            }}\n          >\n            {element === ' ' ? '\\u00A0' : element}\n          </MotionComponent>\n        ))\n      )}\n    </motion.div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
