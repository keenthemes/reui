{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "base-autocomplete-default",
  "type": "registry:component",
  "dependencies": ["clsx", "tailwind-merge", "@base-ui-components/react", "class-variance-authority", "lucide-react"],
  "registryDependencies": [
    "https://reui.io/r/base-autocomplete.json",
    "https://reui.io/r/base-badge.json",
    "https://reui.io/r/base-label.json"
  ],
  "files": [
    {
      "path": "registry/default/components/base-autocomplete/default.tsx",
      "content": "import { useState } from 'react';\nimport {\n  Autocomplete,\n  AutocompleteInput,\n  AutocompletePortal,\n  AutocompletePositioner,\n  AutocompletePopup,\n  AutocompleteList,\n  AutocompleteItem,\n  AutocompleteEmpty,\n  AutocompleteClear,\n  AutocompleteControl,\n} from '@/registry/default/ui/base-autocomplete';\nimport { Badge } from '@/registry/default/ui/base-badge';\nimport { Label } from '@/registry/default/ui/base-label';\n\nexport default function AutocompleteDemo() {\n  const [value, setValue] = useState<string>('');\n\n  const filteredItems = techStacks.filter((item) =>\n    item.name.toLowerCase().includes(value.toLowerCase()) ||\n    item.category.toLowerCase().includes(value.toLowerCase()) ||\n    item.description.toLowerCase().includes(value.toLowerCase())\n  );\n\n  return (\n    <div className=\"w-full max-w-sm\">\n      <Autocomplete\n        value={value}\n        onValueChange={setValue}\n        items={filteredItems}\n        itemToStringValue={(item: unknown) => (item as TechStack).name}\n      >\n        <Label className=\"flex flex-col gap-2.5\">\n\t\t\t\t\tSearch Tech Stack\n\t\t\t\t\t<AutocompleteControl>\n\t\t\t\t\t\t<AutocompleteInput\n\t\t\t\t\t\t\tplaceholder=\"Type to search frameworks, libraries...\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{value && (\n\t\t\t\t\t\t\t<AutocompleteClear/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</AutocompleteControl>\n\t\t\t\t</Label>\n        <AutocompletePortal>\n          <AutocompletePositioner sideOffset={4}>\n            <AutocompletePopup>\n              <AutocompleteList>\n                {filteredItems.map((item) => (\n                  <AutocompleteItem key={item.id} value={item} className=\"group/autocomplete-item\">\n                    <div className=\"flex flex-col items-stretch grow\">\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"font-medium\">{item.name}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t<Badge variant=\"outline\" size=\"sm\" className=\"group-data-[highlighted]/autocomplete-item:bg-background group-data-[highlighted]/autocomplete-item:border-intput\">{item.category}</Badge>\n                      </div>\n                      <span className=\"text-xs text-muted-foreground roup-data-[highlighted]/autocomplete-item:text-secondary-foreground\">{item.description}</span>\n                    </div>\n                  </AutocompleteItem>\n                ))}\n                {filteredItems.length === 0 && value && (\n                  <AutocompleteEmpty>No tech stacks found.</AutocompleteEmpty>\n                )}\n              </AutocompleteList>\n            </AutocompletePopup>\n          </AutocompletePositioner>\n        </AutocompletePortal>\n      </Autocomplete>\n    </div>\n  );\n}\n\ninterface TechStack {\n  id: string;\n  name: string;\n  category: string;\n  description: string;\n}\n\nconst techStacks: TechStack[] = [\n  {\n    id: 'react',\n    name: 'React',\n    category: 'Frontend',\n    description: 'A JavaScript library for building user interfaces',\n  },\n  {\n    id: 'nextjs',\n    name: 'Next.js',\n    category: 'Framework',\n    description: 'The React framework for production with hybrid static & server rendering',\n  },\n  {\n    id: 'vue',\n    name: 'Vue.js',\n    category: 'Frontend',\n    description: 'Progressive JavaScript framework for building UIs',\n  },\n  {\n    id: 'nuxt',\n    name: 'Nuxt.js',\n    category: 'Framework',\n    description: 'The intuitive Vue framework for building modern web applications',\n  },\n  {\n    id: 'angular',\n    name: 'Angular',\n    category: 'Frontend',\n    description: 'Platform for building mobile and desktop web applications',\n  },\n  {\n    id: 'svelte',\n    name: 'Svelte',\n    category: 'Frontend',\n    description: 'Cybernetically enhanced web apps with compile-time optimizations',\n  },\n  {\n    id: 'solid',\n    name: 'Solid.js',\n    category: 'Frontend',\n    description: 'A reactive JavaScript library for building user interfaces',\n  },\n  {\n    id: 'nodejs',\n    name: 'Node.js',\n    category: 'Backend',\n    description: 'JavaScript runtime built on Chrome\\'s V8 JavaScript engine',\n  },\n  {\n    id: 'express',\n    name: 'Express.js',\n    category: 'Backend',\n    description: 'Fast, unopinionated, minimalist web framework for Node.js',\n  },\n  {\n    id: 'fastify',\n    name: 'Fastify',\n    category: 'Backend',\n    description: 'Fast and low overhead web framework for Node.js',\n  },\n  {\n    id: 'nestjs',\n    name: 'NestJS',\n    category: 'Backend',\n    description: 'A progressive Node.js framework for building efficient server-side applications',\n  },\n  {\n    id: 'prisma',\n    name: 'Prisma',\n    category: 'Database',\n    description: 'Next-generation ORM for Node.js and TypeScript',\n  },\n  {\n    id: 'mongodb',\n    name: 'MongoDB',\n    category: 'Database',\n    description: 'Document-oriented NoSQL database program',\n  },\n  {\n    id: 'postgresql',\n    name: 'PostgreSQL',\n    category: 'Database',\n    description: 'Open source object-relational database system',\n  },\n  {\n    id: 'redis',\n    name: 'Redis',\n    category: 'Database',\n    description: 'In-memory data structure store used as a database, cache, and message broker',\n  },\n  {\n    id: 'tailwind',\n    name: 'Tailwind CSS',\n    category: 'Styling',\n    description: 'Utility-first CSS framework for rapidly building custom user interfaces',\n  },\n  {\n    id: 'styled-components',\n    name: 'Styled Components',\n    category: 'Styling',\n    description: 'Visual primitives for the component age with CSS-in-JS',\n  },\n  {\n    id: 'emotion',\n    name: 'Emotion',\n    category: 'Styling',\n    description: 'CSS-in-JS library designed for high performance style composition',\n  },\n  {\n    id: 'framer-motion',\n    name: 'Framer Motion',\n    category: 'Animation',\n    description: 'Production-ready motion library for React',\n  },\n  {\n    id: 'gsap',\n    name: 'GSAP',\n    category: 'Animation',\n    description: 'Professional-grade animation library for the modern web',\n  },\n  {\n    id: 'three',\n    name: 'Three.js',\n    category: '3D',\n    description: 'JavaScript 3D library for creating and displaying animated 3D computer graphics',\n  },\n  {\n    id: 'react-three-fiber',\n    name: 'React Three Fiber',\n    category: '3D',\n    description: 'React renderer for Three.js on the web and react-native',\n  },\n  {\n    id: 'webpack',\n    name: 'Webpack',\n    category: 'Build Tool',\n    description: 'Static module bundler for modern JavaScript applications',\n  },\n  {\n    id: 'vite',\n    name: 'Vite',\n    category: 'Build Tool',\n    description: 'Next generation frontend tooling with fast HMR and optimized builds',\n  },\n  {\n    id: 'esbuild',\n    name: 'esbuild',\n    category: 'Build Tool',\n    description: 'An extremely fast JavaScript bundler and minifier',\n  },\n  {\n    id: 'typescript',\n    name: 'TypeScript',\n    category: 'Language',\n    description: 'Strongly typed programming language that builds on JavaScript',\n  },\n  {\n    id: 'rust',\n    name: 'Rust',\n    category: 'Language',\n    description: 'Systems programming language focused on safety, speed, and concurrency',\n  },\n  {\n    id: 'go',\n    name: 'Go',\n    category: 'Language',\n    description: 'Open source programming language that makes it easy to build simple, reliable software',\n  },\n  {\n    id: 'python',\n    name: 'Python',\n    category: 'Language',\n    description: 'High-level programming language with dynamic semantics',\n  },\n  {\n    id: 'docker',\n    name: 'Docker',\n    category: 'DevOps',\n    description: 'Platform for developing, shipping, and running applications in containers',\n  },\n  {\n    id: 'kubernetes',\n    name: 'Kubernetes',\n    category: 'DevOps',\n    description: 'Container orchestration system for automating software deployment',\n  },\n];\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/base-autocomplete.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Autocomplete as BaseUIAutocomplete } from '@base-ui-components/react/autocomplete';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { X } from 'lucide-react';\n\n// Define input size variants (without file: part)\nconst inputVariants = cva(\n  `\n    flex w-full bg-background border border-input shadow-xs shadow-black/5 transition-[color,box-shadow] text-foreground placeholder:text-muted-foreground/80 \n    focus-visible:ring-ring/30 focus-visible:border-ring focus-visible:outline-none focus-visible:ring-[3px]     \n    disabled:cursor-not-allowed disabled:opacity-60 \n    [&[readonly]]:bg-muted/80 [&[readonly]]:cursor-not-allowed\n    aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n  `,\n  {\n    variants: {\n      variant: {\n        lg: 'h-10 px-4 text-sm rounded-md',\n        md: 'h-8.5 px-3 text-[0.8125rem] leading-(--text-sm--line-height) rounded-md',\n        sm: 'h-7 px-2.5 text-xs rounded-md',\n      },\n    },\n    defaultVariants: {\n      variant: 'md',\n    },\n  },\n);\n\n// Root - Groups all parts of the autocomplete\nfunction Autocomplete({ ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Root>) {\n  return <BaseUIAutocomplete.Root data-slot=\"autocomplete\" {...props} />;\n}\n\n// Value - Displays the selected value\nfunction AutocompleteValue({ ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Value>) {\n  return (\n    <BaseUIAutocomplete.Value\n      data-slot=\"autocomplete-value\"\n      {...props}\n    />\n  );\n}\n\n// Input and Clear controls\nfunction AutocompleteControl({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <span\n      data-slot=\"autocomplete-control\"\n      className={cn('relative', className)}\n      {...props}\n    />\n  );\n}\n\n// Trigger - A button that opens the autocomplete\nfunction AutocompleteTrigger({ ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Trigger>) {\n  return (\n    <BaseUIAutocomplete.Trigger\n      data-slot=\"autocomplete-trigger\"\n      {...props}\n    />\n  );\n}\n\n// Input - The input element for typing\nfunction AutocompleteInput({\n  className,\n  variant = 'md',\n  ...props\n}: React.ComponentProps<typeof BaseUIAutocomplete.Input> & VariantProps<typeof inputVariants>) {\n  return (\n    <BaseUIAutocomplete.Input\n      data-slot=\"autocomplete-input\"\n      className={cn(inputVariants({ variant }), className)}\n      {...props}\n    />\n  );\n}\n\n// Icon - An icon element for the autocomplete\nfunction AutocompleteIcon({ className, ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Icon>) {\n  return (\n    <BaseUIAutocomplete.Icon\n      data-slot=\"autocomplete-icon\"\n      className={cn('h-4 w-4 opacity-50', className)}\n      {...props}\n    />\n  );\n}\n\n\n// Status - Displays the status of the autocomplete\nfunction AutocompleteStatus({ className, ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Status>) {\n  return (\n    <BaseUIAutocomplete.Status\n      data-slot=\"autocomplete-status\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  );\n}\n\n// Portal - A portal element that moves the popup to a different part of the DOM\nfunction AutocompletePortal({ ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Portal>) {\n  return <BaseUIAutocomplete.Portal data-slot=\"autocomplete-portal\" {...props} />;\n}\n\n// Backdrop - An overlay displayed beneath the autocomplete popup\nfunction AutocompleteBackdrop({ ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Backdrop>) {\n  return <BaseUIAutocomplete.Backdrop data-slot=\"autocomplete-backdrop\" {...props} />;\n}\n\n// Positioner - Positions the autocomplete popup against the input\nfunction AutocompletePositioner({ className, ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Positioner>) {\n  return (\n    <BaseUIAutocomplete.Positioner\n      data-slot=\"autocomplete-positioner\"\n      className={cn('outline-none', className)}\n      {...props}\n    />\n  );\n}\n\n// Popup - A container for the autocomplete options\nfunction AutocompletePopup({ className, ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Popup>) {\n  return (\n    <BaseUIAutocomplete.Popup\n      data-slot=\"autocomplete-popup\"\n      className={cn(\n\t\t\t\t'w-[var(--anchor-width)] max-h-[min(var(--available-height),23rem)] max-w-[var(--available-width)]',\n\t\t\t\t'overflow-y-auto scroll-pt-2 scroll-pb-2 overscroll-contain bg-[canvas]',\n        'rounded-md border border-border bg-popover p-2 text-popover-foreground shadow-md shadow-black/5',\n        'origin-[var(--transform-origin)] transition-[transform,scale,opacity] data-[ending-style]:scale-90 data-[ending-style]:opacity-0 data-[starting-style]:scale-90 data-[starting-style]:opacity-0',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\n// List - A container for the autocomplete options\nfunction AutocompleteList({ className, ...props }: React.ComponentProps<typeof BaseUIAutocomplete.List>) {\n  return (\n    <BaseUIAutocomplete.List\n      data-slot=\"autocomplete-list\"\n      className={cn('space-y-0.5', className)}\n      {...props}\n    />\n  );\n}\n\n// Collection - A collection of autocomplete items\nfunction AutocompleteCollection({ ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Collection>) {\n  return <BaseUIAutocomplete.Collection data-slot=\"autocomplete-collection\" {...props} />;\n}\n\n// Row - A row container for autocomplete items\nfunction AutocompleteRow({ className, ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Row>) {\n  return (\n    <BaseUIAutocomplete.Row\n      data-slot=\"autocomplete-row\"\n      className={cn('flex items-center gap-2', className)}\n      {...props}\n    />\n  );\n}\n\n// Item - An individual selectable option in the autocomplete\nfunction AutocompleteItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof BaseUIAutocomplete.Item>) {\n  return (\n    <BaseUIAutocomplete.Item\n      data-slot=\"autocomplete-item\"\n      className={cn(\n        'text-foreground relative flex cursor-default select-none items-center gap-2 rounded-md px-2 py-1.5 text-sm outline-hidden transition-colors data-disabled:pointer-events-none data-disabled:opacity-50',\n        '[&_svg]:pointer-events-none [&_svg:not([role=img]):not([class*=text-])]:opacity-60 [&_svg:not([class*=size-])]:size-4 [&_svg]:shrink-0',\n        'data-[highlighted]:relative data-[highlighted]:z-0 data-[highlighted]:text-foreground',\n        'data-[highlighted]:before:absolute data-[highlighted]:before:inset-x-1 data-[highlighted]:before:inset-y-0 data-[highlighted]:before:z-[-1] data-[highlighted]:before:rounded-sm data-[highlighted]:before:bg-accent',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\n// Group - Groups related autocomplete items with the corresponding label\nfunction AutocompleteGroup({ ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Group>) {\n  return <BaseUIAutocomplete.Group data-slot=\"autocomplete-group\" {...props} />;\n}\n\n// GroupLabel - An accessible label that is automatically associated with its parent group\nfunction AutocompleteGroupLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof BaseUIAutocomplete.GroupLabel>) {\n  return (\n    <BaseUIAutocomplete.GroupLabel\n      data-slot=\"autocomplete-group-label\"\n      className={cn('px-2 py-1.5 text-xs text-muted-foreground font-medium', className)}\n      {...props}\n    />\n  );\n}\n\n// Empty - A component to display when no options are available\nfunction AutocompleteEmpty({ className, ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Empty>) {\n  return (\n    <BaseUIAutocomplete.Empty\n      data-slot=\"autocomplete-empty\"\n      className={cn('px-2 py-1.5 text-sm text-muted-foreground', className)}\n      {...props}\n    />\n  );\n}\n\n// Clear - A button to clear the input value\nfunction AutocompleteClear({ className, children, ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Clear>) {\n  return (\n    <BaseUIAutocomplete.Clear\n      data-slot=\"autocomplete-clear\"\n      className={cn(\n        'absolute cursor-pointer right-2 top-1/2 -translate-y-1/2 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none',\n        'data-[disabled]:pointer-events-none',\n        className,\n      )}\n      {...props}\n    >\n\t\t\t{children ? children : <X className=\"size-3.5\" />}\n\t\t</BaseUIAutocomplete.Clear>\n\t);\n}\n\n// Arrow - Displays an element positioned against the autocomplete anchor\nfunction AutocompleteArrow({ ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Arrow>) {\n  return <BaseUIAutocomplete.Arrow data-slot=\"autocomplete-arrow\" {...props} />;\n}\n\n// Separator - A separator element accessible to screen readers\nfunction AutocompleteSeparator({ className, ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Separator>) {\n  return (\n    <BaseUIAutocomplete.Separator\n      data-slot=\"autocomplete-separator\"\n      className={cn('-mx-2 my-1.5 h-px bg-muted', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Autocomplete,\n  AutocompleteControl,\n  AutocompleteValue,\n  AutocompleteTrigger,\n  AutocompleteInput,\n  AutocompleteIcon,\n  AutocompleteStatus,\n  AutocompletePortal,\n  AutocompleteBackdrop,\n  AutocompletePositioner,\n  AutocompletePopup,\n  AutocompleteList,\n  AutocompleteCollection,\n  AutocompleteRow,\n  AutocompleteItem,\n  AutocompleteGroup,\n  AutocompleteGroupLabel,\n  AutocompleteEmpty,\n  AutocompleteClear,\n  AutocompleteArrow,\n  AutocompleteSeparator,\n};",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/base-badge.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { mergeProps } from '@base-ui-components/react/merge-props';\nimport { useRender } from '@base-ui-components/react/use-render';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nexport interface BadgeProps extends useRender.ComponentProps<'span'>, VariantProps<typeof badgeVariants> {\n  asChild?: boolean;\n  dotClassName?: string;\n  disabled?: boolean;\n}\n\nexport interface BadgeButtonProps extends useRender.ComponentProps<'button'>, VariantProps<typeof badgeButtonVariants> {\n  asChild?: boolean;\n}\n\nexport type BadgeDotProps = React.HTMLAttributes<HTMLSpanElement>;\n\nconst badgeVariants = cva(\n  'inline-flex items-center justify-center border border-transparent font-medium focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2 [&_svg]:-ms-px [&_svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        primary: 'bg-primary text-primary-foreground',\n        secondary: 'bg-secondary text-secondary-foreground',\n        success:\n          'bg-[var(--color-success-accent,var(--color-green-500))] text-[var(--color-success-foreground,var(--color-white))]',\n        warning:\n          'bg-[var(--color-warning-accent,var(--color-yellow-500))] text-[var(--color-warning-foreground,var(--color-white))]',\n        info: 'bg-[var(--color-info-accent,var(--color-violet-500))] text-[var(--color-info-foreground,var(--color-white))]',\n        outline: 'bg-transparent border border-border text-secondary-foreground',\n        destructive: 'bg-destructive text-destructive-foreground',\n      },\n      appearance: {\n        default: '',\n        light: '',\n        outline: '',\n        ghost: 'border-transparent bg-transparent',\n      },\n      disabled: {\n        true: 'opacity-50 pointer-events-none',\n      },\n      size: {\n        lg: 'rounded-md px-[0.5rem] h-7 min-w-7 gap-1.5 text-xs [&_svg]:size-3.5',\n        md: 'rounded-md px-[0.45rem] h-6 min-w-6 gap-1.5 text-xs [&_svg]:size-3.5 ',\n        sm: 'rounded-sm px-[0.325rem] h-5 min-w-5 gap-1 text-[0.6875rem] leading-[0.75rem] [&_svg]:size-3',\n        xs: 'rounded-sm px-[0.25rem] h-4 min-w-4 gap-1 text-[0.625rem] leading-[0.5rem] [&_svg]:size-3',\n      },\n      shape: {\n        default: '',\n        circle: 'rounded-full',\n      },\n    },\n    compoundVariants: [\n      /* Light */\n      {\n        variant: 'primary',\n        appearance: 'light',\n        className:\n          'text-[var(--color-primary-accent,var(--color-blue-700))] bg-[var(--color-primary-soft,var(--color-blue-50))] dark:bg-[var(--color-primary-soft,var(--color-blue-950))] dark:text-[var(--color-primary-soft,var(--color-blue-600))]',\n      },\n      {\n        variant: 'secondary',\n        appearance: 'light',\n        className: 'bg-secondary dark:bg-secondary/50 text-secondary-foreground',\n      },\n      {\n        variant: 'success',\n        appearance: 'light',\n        className:\n          'text-[var(--color-success-accent,var(--color-green-800))] bg-[var(--color-success-soft,var(--color-green-100))] dark:bg-[var(--color-success-soft,var(--color-green-950))] dark:text-[var(--color-success-soft,var(--color-green-600))]',\n      },\n      {\n        variant: 'warning',\n        appearance: 'light',\n        className:\n          'text-[var(--color-warning-accent,var(--color-yellow-700))] bg-[var(--color-warning-soft,var(--color-yellow-100))] dark:bg-[var(--color-warning-soft,var(--color-yellow-950))] dark:text-[var(--color-warning-soft,var(--color-yellow-600))]',\n      },\n      {\n        variant: 'info',\n        appearance: 'light',\n        className:\n          'text-[var(--color-info-accent,var(--color-violet-700))] bg-[var(--color-info-soft,var(--color-violet-100))] dark:bg-[var(--color-info-soft,var(--color-violet-950))] dark:text-[var(--color-info-soft,var(--color-violet-400))]',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'light',\n        className:\n          'text-[var(--color-destructive-accent,var(--color-red-700))] bg-[var(--color-destructive-soft,var(--color-red-50))] dark:bg-[var(--color-destructive-soft,var(--color-red-950))] dark:text-[var(--color-destructive-soft,var(--color-red-600))]',\n      },\n      /* Outline */\n      {\n        variant: 'primary',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-primary-accent,var(--color-blue-700))] border-[var(--color-primary-soft,var(--color-blue-100))] bg-[var(--color-primary-soft,var(--color-blue-50))] dark:bg-[var(--color-primary-soft,var(--color-blue-950))] dark:border-[var(--color-primary-soft,var(--color-blue-900))] dark:text-[var(--color-primary-soft,var(--color-blue-600))]',\n      },\n      {\n        variant: 'success',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-success-accent,var(--color-green-700))] border-[var(--color-success-soft,var(--color-green-200))] bg-[var(--color-success-soft,var(--color-green-50))] dark:bg-[var(--color-success-soft,var(--color-green-950))] dark:border-[var(--color-success-soft,var(--color-green-900))] dark:text-[var(--color-success-soft,var(--color-green-600))]',\n      },\n      {\n        variant: 'warning',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-warning-accent,var(--color-yellow-700))] border-[var(--color-warning-soft,var(--color-yellow-200))] bg-[var(--color-warning-soft,var(--color-yellow-50))] dark:bg-[var(--color-warning-soft,var(--color-yellow-950))] dark:border-[var(--color-warning-soft,var(--color-yellow-900))] dark:text-[var(--color-warning-soft,var(--color-yellow-600))]',\n      },\n      {\n        variant: 'info',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-info-accent,var(--color-violet-700))] border-[var(--color-info-soft,var(--color-violet-100))] bg-[var(--color-info-soft,var(--color-violet-50))] dark:bg-[var(--color-info-soft,var(--color-violet-950))] dark:border-[var(--color-info-soft,var(--color-violet-900))] dark:text-[var(--color-info-soft,var(--color-violet-400))]',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-destructive-accent,var(--color-red-700))] border-[var(--color-destructive-soft,var(--color-red-100))] bg-[var(--color-destructive-soft,var(--color-red-50))] dark:bg-[var(--color-destructive-soft,var(--color-red-950))] dark:border-[var(--color-destructive-soft,var(--color-red-900))] dark:text-[var(--color-destructive-soft,var(--color-red-600))]',\n      },\n      /* Ghost */\n      {\n        variant: 'primary',\n        appearance: 'ghost',\n        className: 'text-primary',\n      },\n      {\n        variant: 'secondary',\n        appearance: 'ghost',\n        className: 'text-secondary-foreground',\n      },\n      {\n        variant: 'success',\n        appearance: 'ghost',\n        className: 'text-[var(--color-success-accent,var(--color-green-500))]',\n      },\n      {\n        variant: 'warning',\n        appearance: 'ghost',\n        className: 'text-[var(--color-warning-accent,var(--color-yellow-500))]',\n      },\n      {\n        variant: 'info',\n        appearance: 'ghost',\n        className: 'text-[var(--color-info-accent,var(--color-violet-500))]',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'ghost',\n        className: 'text-destructive',\n      },\n\n      { size: 'lg', appearance: 'ghost', className: 'px-0' },\n      { size: 'md', appearance: 'ghost', className: 'px-0' },\n      { size: 'sm', appearance: 'ghost', className: 'px-0' },\n      { size: 'xs', appearance: 'ghost', className: 'px-0' },\n    ],\n    defaultVariants: {\n      variant: 'primary',\n      appearance: 'default',\n      size: 'md',\n    },\n  },\n);\n\nconst badgeButtonVariants = cva(\n  'cursor-pointer transition-all inline-flex items-center justify-center leading-none size-3.5 [&>svg]:opacity-100! [&>svg]:size-3.5 p-0 rounded-md -me-0.5 opacity-60 hover:opacity-100',\n  {\n    variants: {\n      variant: {\n        default: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nfunction Badge({\n  render,\n  asChild = false,\n  children,\n  className,\n  variant,\n  size,\n  appearance,\n  shape,\n  disabled,\n  ...props\n}: BadgeProps) {\n  const defaultProps = {\n    className: cn(badgeVariants({ variant, size, appearance, shape, disabled }), className),\n    'data-slot': 'badge',\n  };\n\n  // Determine render element based on asChild prop\n  const renderElement =\n    asChild && React.isValidElement(children)\n      ? (children as React.ReactElement<Record<string, unknown>, string | React.JSXElementConstructor<unknown>>)\n      : render || <span />;\n\n  // When using asChild, children becomes the element props, otherwise use children normally\n  const finalProps =\n    asChild && React.isValidElement(children)\n      ? mergeProps(defaultProps, props)\n      : mergeProps(defaultProps, { ...props, children });\n\n  const element = useRender({\n    render: renderElement,\n    props: finalProps,\n  });\n\n  return element;\n}\n\nfunction BadgeButton({ render, asChild = false, children, className, variant, ...props }: BadgeButtonProps) {\n  const defaultProps = {\n    className: cn(badgeButtonVariants({ variant, className })),\n    role: 'button' as const,\n    'data-slot': 'badge-button',\n  };\n\n  // Determine render element based on asChild prop\n  const renderElement =\n    asChild && React.isValidElement(children)\n      ? (children as React.ReactElement<Record<string, unknown>, string | React.JSXElementConstructor<unknown>>)\n      : render || <button />;\n\n  // When using asChild, children becomes the element props, otherwise use children normally\n  const finalProps =\n    asChild && React.isValidElement(children)\n      ? mergeProps(defaultProps, props)\n      : mergeProps(defaultProps, { ...props, children });\n\n  const element = useRender({\n    render: renderElement,\n    props: finalProps,\n  });\n\n  return element;\n}\n\nfunction BadgeDot({ className, ...props }: BadgeDotProps) {\n  return (\n    <span\n      data-slot=\"badge-dot\"\n      className={cn('size-1.5 rounded-full bg-[currentColor] opacity-75', className)}\n      {...props}\n    />\n  );\n}\n\nexport { Badge, BadgeButton, BadgeDot, badgeVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/base-label.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nconst labelVariants = cva(\n  'text-sm leading-none text-foreground peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        primary: 'font-medium',\n        secondary: 'font-normal',\n      },\n    },\n    defaultVariants: {\n      variant: 'primary',\n    },\n  },\n);\n\nfunction Label({ className, variant, ...props }: React.ComponentProps<'label'> & VariantProps<typeof labelVariants>) {\n  return <label data-slot=\"label\" className={cn(labelVariants({ variant }), className)} {...props} />;\n}\n\nexport { Label };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
