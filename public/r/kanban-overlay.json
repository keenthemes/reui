{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "kanban-overlay",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "tailwind-merge",
    "class-variance-authority",
    "radix-ui",
    "lucide-react",
    "@dnd-kit/core",
    "@dnd-kit/sortable",
    "@dnd-kit/utilities",
    "@radix-ui/react-slot"
  ],
  "registryDependencies": [
    "https://reui.io/r/avatar.json",
    "https://reui.io/r/badge.json",
    "https://reui.io/r/button.json",
    "https://reui.io/r/kanban.json"
  ],
  "files": [
    {
      "path": "registry/default/components/kanban/overlay.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/registry/default/ui/avatar';\nimport { Badge } from '@/registry/default/ui/badge';\nimport { Button } from '@/registry/default/ui/button';\nimport {\n  Kanban,\n  KanbanBoard,\n  KanbanColumn,\n  KanbanColumnContent,\n  KanbanColumnHandle,\n  KanbanItem,\n  KanbanItemHandle,\n  KanbanOverlay,\n} from '@/registry/default/ui/kanban';\nimport { GripVertical } from 'lucide-react';\n\ninterface Task {\n  id: string;\n  title: string;\n  priority: 'low' | 'medium' | 'high';\n  description?: string;\n  assignee?: string;\n  assigneeAvatar?: string;\n  dueDate?: string;\n}\n\nconst COLUMN_TITLES: Record<string, string> = {\n  backlog: 'Backlog',\n  inProgress: 'In Progress',\n  review: 'Review',\n  done: 'Done',\n};\n\ninterface TaskCardProps extends Omit<React.ComponentProps<typeof KanbanItem>, 'value' | 'children'> {\n  task: Task;\n  asHandle?: boolean;\n}\n\nfunction TaskCard({ task, asHandle, ...props }: TaskCardProps) {\n  const cardContent = (\n    <div className=\"rounded-md border bg-card p-3 shadow-xs\">\n      <div className=\"flex flex-col gap-2.5\">\n        <div className=\"flex items-center justify-between gap-2\">\n          <span className=\"line-clamp-1 font-medium text-sm\">{task.title}</span>\n          <Badge\n            variant={task.priority === 'high' ? 'destructive' : task.priority === 'medium' ? 'primary' : 'warning'}\n            appearance=\"outline\"\n            className=\"pointer-events-none h-5 rounded-sm px-1.5 text-[11px] capitalize shrink-0\"\n          >\n            {task.priority}\n          </Badge>\n        </div>\n        <div className=\"flex items-center justify-between text-muted-foreground text-xs\">\n          {task.assignee && (\n            <div className=\"flex items-center gap-1\">\n              <Avatar className=\"size-4\">\n                <AvatarImage src={task.assigneeAvatar} />\n                <AvatarFallback>{task.assignee.charAt(0)}</AvatarFallback>\n              </Avatar>\n              <span className=\"line-clamp-1\">{task.assignee}</span>\n            </div>\n          )}\n          {task.dueDate && <time className=\"text-[10px] tabular-nums whitespace-nowrap\">{task.dueDate}</time>}\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <KanbanItem value={task.id} {...props}>\n      {asHandle ? <KanbanItemHandle>{cardContent}</KanbanItemHandle> : cardContent}\n    </KanbanItem>\n  );\n}\n\ninterface TaskColumnProps extends Omit<React.ComponentProps<typeof KanbanColumn>, 'children'> {\n  tasks: Task[];\n  isOverlay?: boolean;\n}\n\nfunction TaskColumn({ value, tasks, isOverlay, ...props }: TaskColumnProps) {\n  return (\n    <KanbanColumn value={value} {...props} className=\"rounded-md border bg-card p-2.5 shadow-xs\">\n      <div className=\"flex items-center justify-between mb-2.5\">\n        <div className=\"flex items-center gap-2.5\">\n          <span className=\"font-semibold text-sm\">{COLUMN_TITLES[value]}</span>\n          <Badge variant=\"secondary\">{tasks.length}</Badge>\n        </div>\n        <KanbanColumnHandle asChild>\n          <Button variant=\"dim\" size=\"sm\" mode=\"icon\">\n            <GripVertical />\n          </Button>\n        </KanbanColumnHandle>\n      </div>\n      <KanbanColumnContent value={value} className=\"flex flex-col gap-2.5 p-0.5\">\n        {tasks.map((task) => (\n          <TaskCard key={task.id} task={task} asHandle={!isOverlay} />\n        ))}\n      </KanbanColumnContent>\n    </KanbanColumn>\n  );\n}\n\nexport default function Component() {\n  const [columns, setColumns] = React.useState<Record<string, Task[]>>({\n    backlog: [\n      {\n        id: '1',\n        title: 'Add authentication',\n        priority: 'high',\n        assignee: 'John Doe',\n        assigneeAvatar: 'https://randomuser.me/api/portraits/men/1.jpg',\n        dueDate: 'Jan 10, 2025',\n      },\n      {\n        id: '2',\n        title: 'Create API endpoints',\n        priority: 'medium',\n        assignee: 'Jane Smith',\n        assigneeAvatar: 'https://randomuser.me/api/portraits/women/2.jpg',\n        dueDate: 'Jan 15, 2025',\n      },\n      {\n        id: '3',\n        title: 'Write documentation',\n        priority: 'low',\n        assignee: 'Bob Johnson',\n        assigneeAvatar: 'https://randomuser.me/api/portraits/men/3.jpg',\n        dueDate: 'Jan 20, 2025',\n      },\n    ],\n    inProgress: [\n      {\n        id: '4',\n        title: 'Design system updates',\n        priority: 'high',\n        assignee: 'Alice Brown',\n        assigneeAvatar: 'https://randomuser.me/api/portraits/women/4.jpg',\n        dueDate: 'Aug 25, 2025',\n      },\n      {\n        id: '5',\n        title: 'Implement dark mode',\n        priority: 'medium',\n        assignee: 'Charlie Wilson',\n        assigneeAvatar: 'https://randomuser.me/api/portraits/men/5.jpg',\n        dueDate: 'Aug 25, 2025',\n      },\n    ],\n    done: [\n      {\n        id: '7',\n        title: 'Setup project',\n        priority: 'high',\n        assignee: 'Eve Davis',\n        assigneeAvatar: 'https://randomuser.me/api/portraits/women/6.jpg',\n        dueDate: 'Sep 25, 2025',\n      },\n      {\n        id: '8',\n        title: 'Initial commit',\n        priority: 'low',\n        assignee: 'Frank White',\n        assigneeAvatar: 'https://randomuser.me/api/portraits/men/7.jpg',\n        dueDate: 'Sep 20, 2025',\n      },\n    ],\n  });\n\n  return (\n    <Kanban value={columns} onValueChange={setColumns} getItemValue={(item) => item.id}>\n      <KanbanBoard className=\"grid auto-rows-fr grid-cols-3\">\n        {Object.entries(columns).map(([columnValue, tasks]) => (\n          <TaskColumn key={columnValue} value={columnValue} tasks={tasks} />\n        ))}\n      </KanbanBoard>\n      <KanbanOverlay>\n        {({ value, variant }) => {\n          if (variant === 'column') {\n            const tasks = columns[value] ?? [];\n            return <TaskColumn value={String(value)} tasks={tasks} isOverlay />;\n          }\n\n          const task = Object.values(columns)\n            .flat()\n            .find((task) => task.id === value);\n\n          if (!task) return null;\n\n          return <TaskCard task={task} />;\n        }}\n      </KanbanOverlay>\n    </Kanban>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/avatar.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport { Avatar as AvatarPrimitive } from 'radix-ui';\n\nconst avatarStatusVariants = cva('flex items-center rounded-full size-2 border-2 border-background', {\n  variants: {\n    variant: {\n      online: 'bg-green-600',\n      offline: 'bg-zinc-600 dark:bg-zinc-300',\n      busy: 'bg-yellow-600',\n      away: 'bg-blue-600',\n    },\n  },\n  defaultVariants: {\n    variant: 'online',\n  },\n});\n\nfunction Avatar({ className, ...props }: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root data-slot=\"avatar\" className={cn('relative flex shrink-0 size-10', className)} {...props} />\n  );\n}\n\nfunction AvatarImage({ className, ...props }: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <div className={cn('relative overflow-hidden rounded-full', className)}>\n      <AvatarPrimitive.Image data-slot=\"avatar-image\" className={cn('aspect-square h-full w-full')} {...props} />\n    </div>\n  );\n}\n\nfunction AvatarFallback({ className, ...props }: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        'flex h-full w-full items-center justify-center rounded-full border border-border bg-accent text-accent-foreground text-xs',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction AvatarIndicator({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      data-slot=\"avatar-indicator\"\n      className={cn('absolute flex size-6 items-center justify-center', className)}\n      {...props}\n    />\n  );\n}\n\nfunction AvatarStatus({\n  className,\n  variant,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof avatarStatusVariants>) {\n  return <div data-slot=\"avatar-status\" className={cn(avatarStatusVariants({ variant }), className)} {...props} />;\n}\n\nexport { Avatar, AvatarFallback, AvatarImage, AvatarIndicator, AvatarStatus, avatarStatusVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/badge.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { Slot as SlotPrimitive } from 'radix-ui';\n\nexport interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {\n  asChild?: boolean;\n  dotClassName?: string;\n  disabled?: boolean;\n}\n\nexport interface BadgeButtonProps\n  extends React.ButtonHTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeButtonVariants> {\n  asChild?: boolean;\n}\n\nexport type BadgeDotProps = React.HTMLAttributes<HTMLSpanElement>;\n\nconst badgeVariants = cva(\n  'inline-flex items-center justify-center border border-transparent font-medium focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2 [&_svg]:-ms-px [&_svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        primary: 'bg-primary text-primary-foreground',\n        secondary: 'bg-secondary text-secondary-foreground',\n        success:\n          'bg-[var(--color-success-accent,var(--color-green-500))] text-[var(--color-success-foreground,var(--color-white))]',\n        warning:\n          'bg-[var(--color-warning-accent,var(--color-yellow-500))] text-[var(--color-warning-foreground,var(--color-white))]',\n        info: 'bg-[var(--color-info-accent,var(--color-violet-500))] text-[var(--color-info-foreground,var(--color-white))]',\n        outline: 'bg-transparent border border-border text-secondary-foreground',\n        destructive: 'bg-destructive text-destructive-foreground',\n      },\n      appearance: {\n        default: '',\n        light: '',\n        outline: '',\n        ghost: 'border-transparent bg-transparent',\n      },\n      disabled: {\n        true: 'opacity-50 pointer-events-none',\n      },\n      size: {\n        lg: 'rounded-md px-[0.5rem] h-7 min-w-7 gap-1.5 text-xs [&_svg]:size-3.5',\n        md: 'rounded-md px-[0.45rem] h-6 min-w-6 gap-1.5 text-xs [&_svg]:size-3.5 ',\n        sm: 'rounded-sm px-[0.325rem] h-5 min-w-5 gap-1 text-[0.6875rem] leading-[0.75rem] [&_svg]:size-3',\n        xs: 'rounded-sm px-[0.25rem] h-4 min-w-4 gap-1 text-[0.625rem] leading-[0.5rem] [&_svg]:size-3',\n      },\n      shape: {\n        default: '',\n        circle: 'rounded-full',\n      },\n    },\n    compoundVariants: [\n      /* Light */\n      {\n        variant: 'primary',\n        appearance: 'light',\n        className:\n          'text-[var(--color-primary-accent,var(--color-blue-700))] bg-[var(--color-primary-soft,var(--color-blue-50))] dark:bg-[var(--color-primary-soft,var(--color-blue-950))] dark:text-[var(--color-primary-soft,var(--color-blue-600))]',\n      },\n      {\n        variant: 'secondary',\n        appearance: 'light',\n        className: 'bg-secondary dark:bg-secondary/50 text-secondary-foreground',\n      },\n      {\n        variant: 'success',\n        appearance: 'light',\n        className:\n          'text-[var(--color-success-accent,var(--color-green-800))] bg-[var(--color-success-soft,var(--color-green-100))] dark:bg-[var(--color-success-soft,var(--color-green-950))] dark:text-[var(--color-success-soft,var(--color-green-600))]',\n      },\n      {\n        variant: 'warning',\n        appearance: 'light',\n        className:\n          'text-[var(--color-warning-accent,var(--color-yellow-700))] bg-[var(--color-warning-soft,var(--color-yellow-100))] dark:bg-[var(--color-warning-soft,var(--color-yellow-950))] dark:text-[var(--color-warning-soft,var(--color-yellow-600))]',\n      },\n      {\n        variant: 'info',\n        appearance: 'light',\n        className:\n          'text-[var(--color-info-accent,var(--color-violet-700))] bg-[var(--color-info-soft,var(--color-violet-100))] dark:bg-[var(--color-info-soft,var(--color-violet-950))] dark:text-[var(--color-info-soft,var(--color-violet-400))]',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'light',\n        className:\n          'text-[var(--color-destructive-accent,var(--color-red-700))] bg-[var(--color-destructive-soft,var(--color-red-50))] dark:bg-[var(--color-destructive-soft,var(--color-red-950))] dark:text-[var(--color-destructive-soft,var(--color-red-600))]',\n      },\n      /* Outline */\n      {\n        variant: 'primary',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-primary-accent,var(--color-blue-700))] border-[var(--color-primary-soft,var(--color-blue-100))] bg-[var(--color-primary-soft,var(--color-blue-50))] dark:bg-[var(--color-primary-soft,var(--color-blue-950))] dark:border-[var(--color-primary-soft,var(--color-blue-900))] dark:text-[var(--color-primary-soft,var(--color-blue-600))]',\n      },\n      {\n        variant: 'success',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-success-accent,var(--color-green-700))] border-[var(--color-success-soft,var(--color-green-200))] bg-[var(--color-success-soft,var(--color-green-50))] dark:bg-[var(--color-success-soft,var(--color-green-950))] dark:border-[var(--color-success-soft,var(--color-green-900))] dark:text-[var(--color-success-soft,var(--color-green-600))]',\n      },\n      {\n        variant: 'warning',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-warning-accent,var(--color-yellow-700))] border-[var(--color-warning-soft,var(--color-yellow-200))] bg-[var(--color-warning-soft,var(--color-yellow-50))] dark:bg-[var(--color-warning-soft,var(--color-yellow-950))] dark:border-[var(--color-warning-soft,var(--color-yellow-900))] dark:text-[var(--color-warning-soft,var(--color-yellow-600))]',\n      },\n      {\n        variant: 'info',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-info-accent,var(--color-violet-700))] border-[var(--color-info-soft,var(--color-violet-100))] bg-[var(--color-info-soft,var(--color-violet-50))] dark:bg-[var(--color-info-soft,var(--color-violet-950))] dark:border-[var(--color-info-soft,var(--color-violet-900))] dark:text-[var(--color-info-soft,var(--color-violet-400))]',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-destructive-accent,var(--color-red-700))] border-[var(--color-destructive-soft,var(--color-red-100))] bg-[var(--color-destructive-soft,var(--color-red-50))] dark:bg-[var(--color-destructive-soft,var(--color-red-950))] dark:border-[var(--color-destructive-soft,var(--color-red-900))] dark:text-[var(--color-destructive-soft,var(--color-red-600))]',\n      },\n      /* Ghost */\n      {\n        variant: 'primary',\n        appearance: 'ghost',\n        className: 'text-primary',\n      },\n      {\n        variant: 'secondary',\n        appearance: 'ghost',\n        className: 'text-secondary-foreground',\n      },\n      {\n        variant: 'success',\n        appearance: 'ghost',\n        className: 'text-[var(--color-success-accent,var(--color-green-500))]',\n      },\n      {\n        variant: 'warning',\n        appearance: 'ghost',\n        className: 'text-[var(--color-warning-accent,var(--color-yellow-500))]',\n      },\n      {\n        variant: 'info',\n        appearance: 'ghost',\n        className: 'text-[var(--color-info-accent,var(--color-violet-500))]',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'ghost',\n        className: 'text-destructive',\n      },\n\n      { size: 'lg', appearance: 'ghost', className: 'px-0' },\n      { size: 'md', appearance: 'ghost', className: 'px-0' },\n      { size: 'sm', appearance: 'ghost', className: 'px-0' },\n      { size: 'xs', appearance: 'ghost', className: 'px-0' },\n    ],\n    defaultVariants: {\n      variant: 'primary',\n      appearance: 'default',\n      size: 'md',\n    },\n  },\n);\n\nconst badgeButtonVariants = cva(\n  'cursor-pointer transition-all inline-flex items-center justify-center leading-none size-3.5 [&>svg]:opacity-100! [&>svg]:size-3.5 p-0 rounded-md -me-0.5 opacity-60 hover:opacity-100',\n  {\n    variants: {\n      variant: {\n        default: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nfunction Badge({\n  className,\n  variant,\n  size,\n  appearance,\n  shape,\n  asChild = false,\n  disabled,\n  ...props\n}: React.ComponentProps<'span'> & VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? SlotPrimitive.Slot : 'span';\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant, size, appearance, shape, disabled }), className)}\n      {...props}\n    />\n  );\n}\n\nfunction BadgeButton({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'button'> & VariantProps<typeof badgeButtonVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? SlotPrimitive.Slot : 'span';\n  return (\n    <Comp\n      data-slot=\"badge-button\"\n      className={cn(badgeButtonVariants({ variant, className }))}\n      role=\"button\"\n      {...props}\n    />\n  );\n}\n\nfunction BadgeDot({ className, ...props }: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"badge-dot\"\n      className={cn('size-1.5 rounded-full bg-[currentColor] opacity-75', className)}\n      {...props}\n    />\n  );\n}\n\nexport { Badge, BadgeButton, BadgeDot, badgeVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/button.tsx",
      "content": "import * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { ChevronDown, LucideIcon } from 'lucide-react';\nimport { Slot as SlotPrimitive } from 'radix-ui';\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  'cursor-pointer group whitespace-nowrap focus-visible:outline-hidden inline-flex items-center justify-center has-data-[arrow=true]:justify-between whitespace-nowrap text-sm font-medium ring-offset-background transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-60 [&_svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        primary: 'bg-primary text-primary-foreground hover:bg-primary/90 data-[state=open]:bg-primary/90',\n        mono: 'bg-zinc-950 text-white dark:bg-zinc-300 dark:text-black hover:bg-zinc-950/90 dark:hover:bg-zinc-300/90 data-[state=open]:bg-zinc-950/90 dark:data-[state=open]:bg-zinc-300/90',\n        destructive:\n          'bg-destructive text-destructive-foreground hover:bg-destructive/90 data-[state=open]:bg-destructive/90',\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/90 data-[state=open]:bg-secondary/90',\n        outline: 'bg-background text-accent-foreground border border-input hover:bg-accent data-[state=open]:bg-accent',\n        dashed:\n          'text-accent-foreground border border-input border-dashed bg-background hover:bg-accent hover:text-accent-foreground data-[state=open]:text-accent-foreground',\n        ghost:\n          'text-accent-foreground hover:bg-accent hover:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',\n        dim: 'text-muted-foreground hover:text-foreground data-[state=open]:text-foreground',\n        foreground: '',\n        inverse: '',\n      },\n      appearance: {\n        default: '',\n        ghost: '',\n      },\n      underline: {\n        solid: '',\n        dashed: '',\n      },\n      underlined: {\n        solid: '',\n        dashed: '',\n      },\n      size: {\n        lg: 'h-10 rounded-md px-4 text-sm gap-1.5 [&_svg:not([class*=size-])]:size-4',\n        md: 'h-8.5 rounded-md px-3 gap-1.5 text-[0.8125rem] leading-(--text-sm--line-height) [&_svg:not([class*=size-])]:size-4',\n        sm: 'h-7 rounded-md px-2.5 gap-1.25 text-xs [&_svg:not([class*=size-])]:size-3.5',\n        icon: 'size-8.5 rounded-md [&_svg:not([class*=size-])]:size-4 shrink-0',\n      },\n      autoHeight: {\n        true: '',\n        false: '',\n      },\n      shape: {\n        default: '',\n        circle: 'rounded-full',\n      },\n      mode: {\n        default: 'focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n        icon: 'focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 shrink-0',\n        link: 'text-primary h-auto p-0 bg-transparent rounded-none hover:bg-transparent data-[state=open]:bg-transparent',\n        input: `\n            justify-start font-normal hover:bg-background [&_svg]:transition-colors [&_svg]:hover:text-foreground data-[state=open]:bg-background \n            focus-visible:border-ring focus-visible:outline-hidden focus-visible:ring-[3px] focus-visible:ring-ring/30 \n            [[data-state=open]>&]:border-ring [[data-state=open]>&]:outline-hidden [[data-state=open]>&]:ring-[3px] \n            [[data-state=open]>&]:ring-ring/30 \n            aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n            in-data-[invalid=true]:border-destructive/60 in-data-[invalid=true]:ring-destructive/10  dark:in-data-[invalid=true]:border-destructive dark:in-data-[invalid=true]:ring-destructive/20\n          `,\n      },\n      placeholder: {\n        true: 'text-muted-foreground',\n        false: '',\n      },\n    },\n    compoundVariants: [\n      // Icons opacity for default mode\n      {\n        variant: 'ghost',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'outline',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'dashed',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'secondary',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n\n      // Icons opacity for default mode\n      {\n        variant: 'outline',\n        mode: 'input',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'outline',\n        mode: 'icon',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n\n      // Auto height\n      {\n        size: 'md',\n        autoHeight: true,\n        className: 'h-auto min-h-8.5',\n      },\n      {\n        size: 'sm',\n        autoHeight: true,\n        className: 'h-auto min-h-7',\n      },\n      {\n        size: 'lg',\n        autoHeight: true,\n        className: 'h-auto min-h-10',\n      },\n\n      // Shadow support\n      {\n        variant: 'primary',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'mono',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'secondary',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'outline',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'dashed',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'destructive',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n\n      // Shadow support\n      {\n        variant: 'primary',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'mono',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'secondary',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'outline',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'dashed',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'destructive',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n\n      // Link\n      {\n        variant: 'primary',\n        mode: 'link',\n        underline: 'solid',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-solid',\n      },\n      {\n        variant: 'primary',\n        mode: 'link',\n        underline: 'dashed',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-dashed decoration-1',\n      },\n      {\n        variant: 'primary',\n        mode: 'link',\n        underlined: 'solid',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-solid',\n      },\n      {\n        variant: 'primary',\n        mode: 'link',\n        underlined: 'dashed',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg]:opacity-60 underline underline-offset-4 decoration-dashed decoration-1',\n      },\n\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underline: 'solid',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-solid',\n      },\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underline: 'dashed',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-dashed decoration-1',\n      },\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underlined: 'solid',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-solid',\n      },\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underlined: 'dashed',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-dashed decoration-1',\n      },\n\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underline: 'solid',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-solid',\n      },\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underline: 'dashed',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-dashed decoration-1',\n      },\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underlined: 'solid',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-solid',\n      },\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underlined: 'dashed',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-dashed decoration-1',\n      },\n\n      // Ghost\n      {\n        variant: 'primary',\n        appearance: 'ghost',\n        className: 'bg-transparent text-primary/90 hover:bg-primary/5 data-[state=open]:bg-primary/5',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'ghost',\n        className: 'bg-transparent text-destructive/90 hover:bg-destructive/5 data-[state=open]:bg-destructive/5',\n      },\n      {\n        variant: 'ghost',\n        mode: 'icon',\n        className: 'text-muted-foreground',\n      },\n\n      // Size\n      {\n        size: 'sm',\n        mode: 'icon',\n        className: 'w-7 h-7 p-0 [[&_svg:not([class*=size-])]:size-3.5',\n      },\n      {\n        size: 'md',\n        mode: 'icon',\n        className: 'w-8.5 h-8.5 p-0 [&_svg:not([class*=size-])]:size-4',\n      },\n      {\n        size: 'icon',\n        className: 'w-8.5 h-8.5 p-0 [&_svg:not([class*=size-])]:size-4',\n      },\n      {\n        size: 'lg',\n        mode: 'icon',\n        className: 'w-10 h-10 p-0 [&_svg:not([class*=size-])]:size-4',\n      },\n\n      // Input mode\n      {\n        mode: 'input',\n        placeholder: true,\n        variant: 'outline',\n        className: 'font-normal text-muted-foreground',\n      },\n      {\n        mode: 'input',\n        variant: 'outline',\n        size: 'sm',\n        className: 'gap-1.25',\n      },\n      {\n        mode: 'input',\n        variant: 'outline',\n        size: 'md',\n        className: 'gap-1.5',\n      },\n      {\n        mode: 'input',\n        variant: 'outline',\n        size: 'lg',\n        className: 'gap-1.5',\n      },\n    ],\n    defaultVariants: {\n      variant: 'primary',\n      mode: 'default',\n      size: 'md',\n      shape: 'default',\n      appearance: 'default',\n    },\n  },\n);\n\nfunction Button({\n  className,\n  selected,\n  variant,\n  shape,\n  appearance,\n  mode,\n  size,\n  autoHeight,\n  underlined,\n  underline,\n  asChild = false,\n  placeholder = false,\n  ...props\n}: React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    selected?: boolean;\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? SlotPrimitive.Slot : 'button';\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(\n        buttonVariants({\n          variant,\n          size,\n          shape,\n          appearance,\n          mode,\n          autoHeight,\n          placeholder,\n          underlined,\n          underline,\n          className,\n        }),\n        asChild && props.disabled && 'pointer-events-none opacity-50',\n      )}\n      {...(selected && { 'data-state': 'open' })}\n      {...props}\n    />\n  );\n}\n\ninterface ButtonArrowProps extends React.SVGProps<SVGSVGElement> {\n  icon?: LucideIcon; // Allows passing any Lucide icon\n}\n\nfunction ButtonArrow({ icon: Icon = ChevronDown, className, ...props }: ButtonArrowProps) {\n  return <Icon data-slot=\"button-arrow\" className={cn('ms-auto -me-1', className)} {...props} />;\n}\n\nexport { Button, ButtonArrow, buttonVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/kanban.tsx",
      "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\n'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport {\n  defaultDropAnimation,\n  defaultDropAnimationSideEffects,\n  DndContext,\n  DragEndEvent,\n  DragOverEvent,\n  DragOverlay,\n  DragStartEvent,\n  DropAnimation,\n  KeyboardSensor,\n  PointerSensor,\n  UniqueIdentifier,\n  useSensor,\n  useSensors,\n  type DraggableAttributes,\n  type DraggableSyntheticListeners,\n} from '@dnd-kit/core';\nimport {\n  arrayMove,\n  rectSortingStrategy,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  useSortable,\n  verticalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { Slot } from '@radix-ui/react-slot';\n\ninterface KanbanContextProps<T> {\n  columns: Record<string, T[]>;\n  setColumns: (columns: Record<string, T[]>) => void;\n  getItemId: (item: T) => string;\n  columnIds: string[];\n  activeId: UniqueIdentifier | null;\n  setActiveId: (id: UniqueIdentifier | null) => void;\n  findContainer: (id: UniqueIdentifier) => string | undefined;\n  isColumn: (id: UniqueIdentifier) => boolean;\n}\n\nconst KanbanContext = React.createContext<KanbanContextProps<any>>({\n  columns: {},\n  setColumns: () => {},\n  getItemId: () => '',\n  columnIds: [],\n  activeId: null,\n  setActiveId: () => {},\n  findContainer: () => undefined,\n  isColumn: () => false,\n});\n\nconst ColumnContext = React.createContext<{\n  attributes: DraggableAttributes;\n  listeners: DraggableSyntheticListeners | undefined;\n  isDragging?: boolean;\n  disabled?: boolean;\n}>({\n  attributes: {} as DraggableAttributes,\n  listeners: undefined,\n  isDragging: false,\n  disabled: false,\n});\n\nconst ItemContext = React.createContext<{\n  listeners: DraggableSyntheticListeners | undefined;\n  isDragging?: boolean;\n  disabled?: boolean;\n}>({\n  listeners: undefined,\n  isDragging: false,\n  disabled: false,\n});\n\nconst dropAnimationConfig: DropAnimation = {\n  ...defaultDropAnimation,\n  sideEffects: defaultDropAnimationSideEffects({\n    styles: {\n      active: {\n        opacity: '0.4',\n      },\n    },\n  }),\n};\n\nexport interface KanbanMoveEvent {\n  event: DragEndEvent;\n  activeContainer: string;\n  activeIndex: number;\n  overContainer: string;\n  overIndex: number;\n}\n\nexport interface KanbanRootProps<T> {\n  value: Record<string, T[]>;\n  onValueChange: (value: Record<string, T[]>) => void;\n  getItemValue: (item: T) => string;\n  children: React.ReactNode;\n  className?: string;\n  onMove?: (event: KanbanMoveEvent) => void;\n}\n\nfunction Kanban<T>({ value, onValueChange, getItemValue, children, className, onMove }: KanbanRootProps<T>) {\n  const columns = value;\n  const setColumns = onValueChange;\n  const [activeId, setActiveId] = React.useState<UniqueIdentifier | null>(null);\n\n  const sensors = useSensors(\n    useSensor(PointerSensor, {\n      activationConstraint: {\n        distance: 10,\n      },\n    }),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    }),\n  );\n\n  const columnIds = React.useMemo(() => Object.keys(columns), [columns]);\n\n  const isColumn = React.useCallback((id: UniqueIdentifier) => columnIds.includes(id as string), [columnIds]);\n\n  const findContainer = React.useCallback(\n    (id: UniqueIdentifier) => {\n      if (isColumn(id)) return id as string;\n      return columnIds.find((key) => columns[key].some((item) => getItemValue(item) === id));\n    },\n    [columns, columnIds, getItemValue, isColumn],\n  );\n\n  const handleDragStart = React.useCallback((event: DragStartEvent) => {\n    setActiveId(event.active.id);\n  }, []);\n\n  const handleDragOver = React.useCallback(\n    (event: DragOverEvent) => {\n      if (onMove) {\n        return;\n      }\n\n      const { active, over } = event;\n      if (!over) return;\n\n      if (isColumn(active.id)) return;\n\n      const activeContainer = findContainer(active.id);\n      const overContainer = findContainer(over.id);\n\n      // Only handle moving items between different columns\n      if (!activeContainer || !overContainer || activeContainer === overContainer) {\n        return;\n      }\n\n      const activeItems = columns[activeContainer];\n      const overItems = columns[overContainer];\n\n      const activeIndex = activeItems.findIndex((item: T) => getItemValue(item) === active.id);\n      let overIndex = overItems.findIndex((item: T) => getItemValue(item) === over.id);\n\n      // If dropping on the column itself, not an item\n      if (isColumn(over.id)) {\n        overIndex = overItems.length;\n      }\n\n      const newOverItems = [...overItems];\n      const [movedItem] = activeItems.splice(activeIndex, 1);\n      newOverItems.splice(overIndex, 0, movedItem);\n\n      setColumns({\n        ...columns,\n        [activeContainer]: [...activeItems],\n        [overContainer]: newOverItems,\n      });\n    },\n    [findContainer, getItemValue, isColumn, setColumns, columns, onMove],\n  );\n\n  const handleDragEnd = React.useCallback(\n    (event: DragEndEvent) => {\n      const { active, over } = event;\n      setActiveId(null);\n\n      if (!over) return;\n\n      // Handle item move callback\n      if (onMove && !isColumn(active.id)) {\n        const activeContainer = findContainer(active.id);\n        const overContainer = findContainer(over.id);\n\n        if (activeContainer && overContainer) {\n          const activeIndex = columns[activeContainer].findIndex((item: T) => getItemValue(item) === active.id);\n          const overIndex = isColumn(over.id)\n            ? columns[overContainer].length\n            : columns[overContainer].findIndex((item: T) => getItemValue(item) === over.id);\n\n          onMove({\n            event,\n            activeContainer,\n            activeIndex,\n            overContainer,\n            overIndex,\n          });\n        }\n        return;\n      }\n\n      // Handle column reordering\n      if (isColumn(active.id) && isColumn(over.id)) {\n        const activeIndex = columnIds.indexOf(active.id as string);\n        const overIndex = columnIds.indexOf(over.id as string);\n        if (activeIndex !== overIndex) {\n          const newOrder = arrayMove(Object.keys(columns), activeIndex, overIndex);\n          const newColumns: Record<string, T[]> = {};\n          newOrder.forEach((key) => {\n            newColumns[key] = columns[key];\n          });\n          setColumns(newColumns);\n        }\n        return;\n      }\n\n      const activeContainer = findContainer(active.id);\n      const overContainer = findContainer(over.id);\n\n      // Handle item reordering within the same column\n      if (activeContainer && overContainer && activeContainer === overContainer) {\n        const container = activeContainer;\n        const activeIndex = columns[container].findIndex((item: T) => getItemValue(item) === active.id);\n        const overIndex = columns[container].findIndex((item: T) => getItemValue(item) === over.id);\n\n        if (activeIndex !== overIndex) {\n          setColumns({\n            ...columns,\n            [container]: arrayMove(columns[container], activeIndex, overIndex),\n          });\n        }\n      }\n    },\n    [columnIds, columns, findContainer, getItemValue, isColumn, setColumns, onMove],\n  );\n\n  const contextValue = React.useMemo(\n    () => ({\n      columns,\n      setColumns,\n      getItemId: getItemValue,\n      columnIds,\n      activeId,\n      setActiveId,\n      findContainer,\n      isColumn,\n    }),\n    [columns, setColumns, getItemValue, columnIds, activeId, findContainer, isColumn],\n  );\n\n  return (\n    <KanbanContext.Provider value={contextValue}>\n      <DndContext sensors={sensors} onDragStart={handleDragStart} onDragOver={handleDragOver} onDragEnd={handleDragEnd}>\n        <div data-slot=\"kanban\" data-dragging={activeId !== null} className={cn(className)}>\n          {children}\n        </div>\n      </DndContext>\n    </KanbanContext.Provider>\n  );\n}\n\nexport interface KanbanBoardProps {\n  className?: string;\n  children: React.ReactNode;\n}\n\nfunction KanbanBoard({ children, className }: KanbanBoardProps) {\n  const { columnIds } = React.useContext(KanbanContext);\n\n  return (\n    <SortableContext items={columnIds} strategy={rectSortingStrategy}>\n      <div data-slot=\"kanban-board\" className={cn('grid auto-rows-fr sm:grid-cols-3 gap-4', className)}>\n        {children}\n      </div>\n    </SortableContext>\n  );\n}\n\nexport interface KanbanColumnProps {\n  value: string;\n  className?: string;\n  children: React.ReactNode;\n  disabled?: boolean;\n}\n\nfunction KanbanColumn({ value, className, children, disabled }: KanbanColumnProps) {\n  const {\n    setNodeRef,\n    transform,\n    transition,\n    attributes,\n    listeners,\n    isDragging: isSortableDragging,\n  } = useSortable({\n    id: value,\n    disabled,\n  });\n\n  const { activeId, isColumn } = React.useContext(KanbanContext);\n  const isColumnDragging = activeId ? isColumn(activeId) : false;\n\n  const style = {\n    transition,\n    transform: CSS.Translate.toString(transform),\n  } as React.CSSProperties;\n\n  return (\n    <ColumnContext.Provider value={{ attributes, listeners, isDragging: isColumnDragging, disabled }}>\n      <div\n        data-slot=\"kanban-column\"\n        data-value={value}\n        data-dragging={isSortableDragging}\n        data-disabled={disabled}\n        ref={setNodeRef}\n        style={style}\n        className={cn(\n          'group/kanban-column flex flex-col',\n          isSortableDragging && 'opacity-50',\n          disabled && 'opacity-50',\n          className,\n        )}\n      >\n        {children}\n      </div>\n    </ColumnContext.Provider>\n  );\n}\n\nexport interface KanbanColumnHandleProps {\n  asChild?: boolean;\n  className?: string;\n  children?: React.ReactNode;\n  cursor?: boolean;\n}\n\nfunction KanbanColumnHandle({ asChild, className, children, cursor = true }: KanbanColumnHandleProps) {\n  const { attributes, listeners, isDragging, disabled } = React.useContext(ColumnContext);\n\n  const Comp = asChild ? Slot : 'div';\n\n  return (\n    <Comp\n      data-slot=\"kanban-column-handle\"\n      data-dragging={isDragging}\n      data-disabled={disabled}\n      {...attributes}\n      {...listeners}\n      className={cn(\n        'opacity-0 transition-opacity group-hover/kanban-column:opacity-100',\n        cursor && (isDragging ? '!cursor-grabbing' : '!cursor-grab'),\n        className,\n      )}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nexport interface KanbanItemProps {\n  value: string;\n  asChild?: boolean;\n  className?: string;\n  children: React.ReactNode;\n  disabled?: boolean;\n}\n\nfunction KanbanItem({ value, asChild = false, className, children, disabled }: KanbanItemProps) {\n  const {\n    setNodeRef,\n    transform,\n    transition,\n    attributes,\n    listeners,\n    isDragging: isSortableDragging,\n  } = useSortable({\n    id: value,\n    disabled,\n  });\n\n  const { activeId, isColumn } = React.useContext(KanbanContext);\n  const isItemDragging = activeId ? !isColumn(activeId) : false;\n\n  const style = {\n    transition,\n    transform: CSS.Translate.toString(transform),\n  } as React.CSSProperties;\n\n  const Comp = asChild ? Slot : 'div';\n\n  return (\n    <ItemContext.Provider value={{ listeners, isDragging: isItemDragging, disabled }}>\n      <Comp\n        data-slot=\"kanban-item\"\n        data-value={value}\n        data-dragging={isSortableDragging}\n        data-disabled={disabled}\n        ref={setNodeRef}\n        style={style}\n        {...attributes}\n        className={cn(isSortableDragging && 'opacity-50', disabled && 'opacity-50', className)}\n      >\n        {children}\n      </Comp>\n    </ItemContext.Provider>\n  );\n}\n\nexport interface KanbanItemHandleProps {\n  asChild?: boolean;\n  className?: string;\n  children?: React.ReactNode;\n  cursor?: boolean;\n}\n\nfunction KanbanItemHandle({ asChild, className, children, cursor = true }: KanbanItemHandleProps) {\n  const { listeners, isDragging, disabled } = React.useContext(ItemContext);\n\n  const Comp = asChild ? Slot : 'div';\n\n  return (\n    <Comp\n      data-slot=\"kanban-item-handle\"\n      data-dragging={isDragging}\n      data-disabled={disabled}\n      {...listeners}\n      className={cn(cursor && (isDragging ? '!cursor-grabbing' : '!cursor-grab'), className)}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nexport interface KanbanColumnContentProps {\n  value: string;\n  className?: string;\n  children: React.ReactNode;\n}\n\nfunction KanbanColumnContent({ value, className, children }: KanbanColumnContentProps) {\n  const { columns, getItemId } = React.useContext(KanbanContext);\n\n  const itemIds = React.useMemo(() => columns[value].map(getItemId), [columns, getItemId, value]);\n\n  return (\n    <SortableContext items={itemIds} strategy={verticalListSortingStrategy}>\n      <div data-slot=\"kanban-column-content\" className={cn('flex flex-col gap-2', className)}>\n        {children}\n      </div>\n    </SortableContext>\n  );\n}\n\nexport interface KanbanOverlayProps {\n  className?: string;\n  children?: React.ReactNode | ((params: { value: UniqueIdentifier; variant: 'column' | 'item' }) => React.ReactNode);\n}\n\nfunction KanbanOverlay({ children, className }: KanbanOverlayProps) {\n  const { activeId, isColumn } = React.useContext(KanbanContext);\n  const [dimensions, setDimensions] = React.useState<{ width: number; height: number } | null>(null);\n\n  React.useEffect(() => {\n    if (activeId) {\n      const element = document.querySelector(\n        `[data-slot=\"kanban-${isColumn(activeId) ? 'column' : 'item'}\"][data-value=\"${activeId}\"]`,\n      );\n      if (element) {\n        const rect = element.getBoundingClientRect();\n        setDimensions({ width: rect.width, height: rect.height });\n      }\n    } else {\n      setDimensions(null);\n    }\n  }, [activeId, isColumn]);\n\n  const style = {\n    width: dimensions?.width,\n    height: dimensions?.height,\n  } as React.CSSProperties;\n\n  const content = React.useMemo(() => {\n    if (!activeId) return null;\n    if (typeof children === 'function') {\n      return children({\n        value: activeId,\n        variant: isColumn(activeId) ? 'column' : 'item',\n      });\n    }\n    return children;\n  }, [activeId, children, isColumn]);\n\n  return (\n    <DragOverlay dropAnimation={dropAnimationConfig}>\n      <div\n        data-slot=\"kanban-overlay\"\n        data-dragging={true}\n        style={style}\n        className={cn('pointer-events-none', className, activeId ? '!cursor-grabbing' : '')}\n      >\n        {content}\n      </div>\n    </DragOverlay>\n  );\n}\n\nexport {\n  Kanban,\n  KanbanBoard,\n  KanbanColumn,\n  KanbanColumnHandle,\n  KanbanItem,\n  KanbanItemHandle,\n  KanbanColumnContent,\n  KanbanOverlay,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
