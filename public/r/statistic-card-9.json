{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "statistic-card-9",
  "type": "registry:block",
  "dependencies": ["clsx", "tailwind-merge", "class-variance-authority", "radix-ui", "lucide-react"],
  "registryDependencies": [
    "https://reui.io/r/card.json",
    "https://reui.io/r/progress.json",
    "https://reui.io/r/select.json"
  ],
  "files": [
    {
      "path": "registry/default/blocks/cards/statistic-cards/statistic-card-9.tsx",
      "content": "'use client';\n\nimport { useEffect, useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardToolbar } from '@/registry/default/ui/card';\nimport { Progress } from '@/registry/default/ui/progress';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/registry/default/ui/select';\n\nexport default function StatisticCard6() {\n  const [progress, setProgress] = useState(13);\n\n  useEffect(() => {\n    const timer = setTimeout(() => setProgress(66), 500);\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-6 lg:p-8\">\n      <Card className=\"w-full md:w-[450px]\">\n        <CardHeader>\n          <CardTitle>Tasks Overview</CardTitle>\n          <CardToolbar>\n            <Select defaultValue=\"this-month\">\n              <SelectTrigger className=\"w-32\">\n                <SelectValue placeholder=\"Select range\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"this-month\">This Month</SelectItem>\n                <SelectItem value=\"last-month\">Last Month</SelectItem>\n                <SelectItem value=\"this-year\">This Year</SelectItem>\n                <SelectItem value=\"last-year\">Last Year</SelectItem>\n              </SelectContent>\n            </Select>\n          </CardToolbar>\n        </CardHeader>\n        <CardContent className=\"flex flex-col gap-5\">\n          {/* Progress bar and done tasks */}\n          <div className=\"grow mb-6\">\n            <div className=\"flex items-center justify-between mb-1\">\n              <span className=\"text-sm font-medium text-foreground\">Tasks Done</span>\n              <span className=\"text-sm font-semibold text-success\">12</span>\n            </div>\n            <Progress value={progress} />\n          </div>\n\n          {/* Task summary */}\n          <div className=\"space-y-6\">\n            {/* Tasks list */}\n            <div className=\"grid grid-cols-3 gap-2.5\">\n              <div className=\"flex flex-col items-center justify-center bg-muted/60 rounded-lg py-3.5 px-2 gap-1\">\n                <span className=\"text-lg font-bold text-green-500\">28</span>\n                <span className=\"text-xs text-accent-foreground\">Backlog</span>\n              </div>\n              <div className=\"flex flex-col items-center justify-center bg-muted/60 rounded-lg py-3.5 px-2 gap-1\">\n                <span className=\"text-lg font-bold text-yellow-500\">14</span>\n                <span className=\"text-xs text-accent-foreground\">In Progress</span>\n              </div>\n              <div className=\"flex flex-col items-center justify-center bg-muted/60 rounded-lg py-3.5 px-2 gap-1\">\n                <span className=\"text-lg font-bold text-violet-500\">8</span>\n                <span className=\"text-xs text-accent-foreground\">In Review</span>\n              </div>\n            </div>\n\n            {/* AI prediction footer */}\n            <div className=\"text-xs text-muted-foreground text-center\">\n              AI prediction to finish all tasks: <span className=\"font-semibold text-foreground\">1w 4d 2h</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
      "type": "registry:block"
    },
    {
      "path": "registry/default/ui/card.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\n// Define CardContext\ntype CardContextType = {\n  variant: 'default' | 'accent';\n};\n\nconst CardContext = React.createContext<CardContextType>({\n  variant: 'default', // Default value\n});\n\n// Hook to use CardContext\nconst useCardContext = () => {\n  const context = React.useContext(CardContext);\n  if (!context) {\n    throw new Error('useCardContext must be used within a Card component');\n  }\n  return context;\n};\n\n// Variants\nconst cardVariants = cva('flex flex-col items-stretch text-card-foreground rounded-xl', {\n  variants: {\n    variant: {\n      default: 'bg-card border border-border shadow-xs black/5',\n      accent: 'bg-muted shadow-xs p-1',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardHeaderVariants = cva('flex items-center justify-between flex-wrap px-5 min-h-14 gap-2.5', {\n  variants: {\n    variant: {\n      default: 'border-b border-border',\n      accent: '',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardContentVariants = cva('grow p-5', {\n  variants: {\n    variant: {\n      default: '',\n      accent: 'bg-card rounded-t-xl [&:last-child]:rounded-b-xl',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardTableVariants = cva('grid grow', {\n  variants: {\n    variant: {\n      default: '',\n      accent: 'bg-card rounded-xl',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardFooterVariants = cva('flex items-center px-5 min-h-14', {\n  variants: {\n    variant: {\n      default: 'border-t border-border',\n      accent: 'bg-card rounded-b-xl mt-[2px]',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\n// Card Component\nfunction Card({\n  className,\n  variant = 'default',\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof cardVariants>) {\n  return (\n    <CardContext.Provider value={{ variant: variant || 'default' }}>\n      <div data-slot=\"card\" className={cn(cardVariants({ variant }), className)} {...props} />\n    </CardContext.Provider>\n  );\n}\n\n// CardHeader Component\nfunction CardHeader({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-header\" className={cn(cardHeaderVariants({ variant }), className)} {...props} />;\n}\n\n// CardContent Component\nfunction CardContent({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-content\" className={cn(cardContentVariants({ variant }), className)} {...props} />;\n}\n\n// CardTable Component\nfunction CardTable({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-table\" className={cn(cardTableVariants({ variant }), className)} {...props} />;\n}\n\n// CardFooter Component\nfunction CardFooter({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-footer\" className={cn(cardFooterVariants({ variant }), className)} {...props} />;\n}\n\n// Other Components\nfunction CardHeading({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-heading\" className={cn('space-y-1', className)} {...props} />;\n}\n\nfunction CardToolbar({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-toolbar\" className={cn('flex items-center gap-2.5', className)} {...props} />;\n}\n\nfunction CardTitle({ className, ...props }: React.HTMLAttributes<HTMLHeadingElement>) {\n  return (\n    <h3\n      data-slot=\"card-title\"\n      className={cn('text-base font-semibold leading-none tracking-tight', className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-description\" className={cn('text-sm text-muted-foreground', className)} {...props} />;\n}\n\n// Exports\nexport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardHeading, CardTable, CardTitle, CardToolbar };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/progress.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Progress as ProgressPrimitive } from 'radix-ui';\n\nfunction Progress({\n  className,\n  indicatorClassName,\n  value,\n  ...props\n}: React.ComponentProps<typeof ProgressPrimitive.Root> & {\n  indicatorClassName?: string;\n}) {\n  return (\n    <ProgressPrimitive.Root\n      data-slot=\"progress\"\n      className={cn('relative h-1.5 w-full overflow-hidden rounded-full bg-secondary', className)}\n      {...props}\n    >\n      <ProgressPrimitive.Indicator\n        data-slot=\"progress-indicator\"\n        className={cn('h-full w-full flex-1 bg-primary transition-all', indicatorClassName)}\n        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n      />\n    </ProgressPrimitive.Root>\n  );\n}\n\nfunction ProgressCircle({\n  className,\n  indicatorClassName,\n  trackClassName,\n  value = 0,\n  size = 48,\n  strokeWidth = 4,\n  children,\n  ...props\n}: React.ComponentProps<'div'> & {\n  /**\n   * Progress value from 0 to 100\n   */\n  value?: number;\n  /**\n   * Size of the circle in pixels\n   */\n  size?: number;\n  /**\n   * Width of the progress stroke\n   */\n  strokeWidth?: number;\n  /**\n   * Additional className for the progress stroke\n   */\n  indicatorClassName?: string;\n  /**\n   * Additional className for the progress track\n   */\n  trackClassName?: string;\n  /**\n   * Content to display in the center of the circle\n   */\n  children?: React.ReactNode;\n}) {\n  const radius = (size - strokeWidth) / 2;\n  const circumference = radius * 2 * Math.PI;\n  const offset = circumference - (value / 100) * circumference;\n\n  return (\n    <div\n      data-slot=\"progress-circle\"\n      className={cn('relative inline-flex items-center justify-center', className)}\n      style={{ width: size, height: size }}\n      {...props}\n    >\n      <svg className=\"absolute inset-0 -rotate-90\" width={size} height={size} viewBox={`0 0 ${size} ${size}`}>\n        <circle\n          data-slot=\"progress-circle-track\"\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          stroke=\"currentColor\"\n          strokeWidth={strokeWidth}\n          fill=\"none\"\n          className={cn('text-secondary', trackClassName)}\n        />\n        <circle\n          data-slot=\"progress-circle-indicator\"\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          stroke=\"currentColor\"\n          strokeWidth={strokeWidth}\n          fill=\"none\"\n          strokeDasharray={circumference}\n          strokeDashoffset={offset}\n          strokeLinecap=\"round\"\n          className={cn('text-primary transition-all duration-300 ease-in-out', indicatorClassName)}\n        />\n      </svg>\n      {children && (\n        <div\n          data-slot=\"progress-circle-content\"\n          className=\"relative z-10 flex items-center justify-center text-sm font-medium\"\n        >\n          {children}\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction ProgressRadial({\n  className,\n  value = 0,\n  size = 120,\n  strokeWidth = 8,\n  startAngle = -90,\n  endAngle = 90,\n  showLabel = false,\n  trackClassName,\n  indicatorClassName,\n  children,\n  ...props\n}: React.ComponentProps<'div'> & {\n  /**\n   * Progress value from 0 to 100\n   */\n  value?: number;\n  /**\n   * Size of the radial in pixels\n   */\n  size?: number;\n  /**\n   * Width of the progress stroke\n   */\n  strokeWidth?: number;\n  /**\n   * Start angle in degrees\n   */\n  startAngle?: number;\n  /**\n   * Additional className for the progress stroke\n   */\n  indicatorClassName?: string;\n  /**\n   * Additional className for the progress track\n   */\n  trackClassName?: string;\n  /**\n   * End angle in degrees\n   */\n  endAngle?: number;\n  /**\n   * Whether to show percentage label\n   */\n  showLabel?: boolean;\n  /**\n   * Custom content to display\n   */\n  children?: React.ReactNode;\n}) {\n  const radius = (size - strokeWidth) / 2;\n  const angleRange = endAngle - startAngle;\n  const progressAngle = (value / 100) * angleRange;\n\n  const toRadians = (degrees: number) => (degrees * Math.PI) / 180;\n\n  const startX = size / 2 + radius * Math.cos(toRadians(startAngle));\n  const startY = size / 2 + radius * Math.sin(toRadians(startAngle));\n  const endX = size / 2 + radius * Math.cos(toRadians(startAngle + progressAngle));\n  const endY = size / 2 + radius * Math.sin(toRadians(startAngle + progressAngle));\n\n  const largeArc = progressAngle > 180 ? 1 : 0;\n\n  const pathData = ['M', startX, startY, 'A', radius, radius, 0, largeArc, 1, endX, endY].join(' ');\n\n  return (\n    <div\n      data-slot=\"progress-radial\"\n      className={cn('relative inline-flex items-center justify-center', className)}\n      style={{ width: size, height: size }}\n      {...props}\n    >\n      <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`}>\n        <path\n          d={[\n            'M',\n            size / 2 + radius * Math.cos(toRadians(startAngle)),\n            size / 2 + radius * Math.sin(toRadians(startAngle)),\n            'A',\n            radius,\n            radius,\n            0,\n            angleRange > 180 ? 1 : 0,\n            1,\n            size / 2 + radius * Math.cos(toRadians(endAngle)),\n            size / 2 + radius * Math.sin(toRadians(endAngle)),\n          ].join(' ')}\n          stroke=\"currentColor\"\n          strokeWidth={strokeWidth}\n          fill=\"none\"\n          strokeLinecap=\"round\"\n          className={cn('text-secondary', trackClassName)}\n        />\n        <path\n          d={pathData}\n          stroke=\"currentColor\"\n          strokeWidth={strokeWidth}\n          fill=\"none\"\n          strokeLinecap=\"round\"\n          className={cn('text-primary transition-all duration-300 ease-in-out', indicatorClassName)}\n        />\n      </svg>\n      {(showLabel || children) && (\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          {children || <span className=\"text-lg font-bold\">{value}%</span>}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport { Progress, ProgressCircle, ProgressRadial };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/select.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { isValidElement, ReactNode } from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport { Check, ChevronDown, ChevronUp } from 'lucide-react';\nimport { Select as SelectPrimitive } from 'radix-ui';\n\n// Create a Context for `indicatorPosition` and `indicator` control\nconst SelectContext = React.createContext<{\n  indicatorPosition: 'left' | 'right';\n  indicatorVisibility: boolean;\n  indicator: ReactNode;\n}>({ indicatorPosition: 'left', indicator: null, indicatorVisibility: true });\n\n// Root Component\nconst Select = ({\n  indicatorPosition = 'left',\n  indicatorVisibility = true,\n  indicator,\n  ...props\n}: {\n  indicatorPosition?: 'left' | 'right';\n  indicatorVisibility?: boolean;\n  indicator?: ReactNode;\n} & React.ComponentProps<typeof SelectPrimitive.Root>) => {\n  return (\n    <SelectContext.Provider value={{ indicatorPosition, indicatorVisibility, indicator }}>\n      <SelectPrimitive.Root {...props} />\n    </SelectContext.Provider>\n  );\n};\n\nfunction SelectGroup({ ...props }: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />;\n}\n\nfunction SelectValue({ ...props }: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />;\n}\n\n// Define size variants for SelectTrigger\nconst selectTriggerVariants = cva(\n  `\n    flex bg-background w-full items-center justify-between outline-none border border-input shadow-xs shadow-black/5 transition-shadow \n    text-foreground data-placeholder:text-muted-foreground focus-visible:border-ring focus-visible:outline-none focus-visible:ring-[3px] \n    focus-visible:ring-ring/30 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 \n    aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n    [[data-invalid=true]_&]:border-destructive/60 [[data-invalid=true]_&]:ring-destructive/10  dark:[[data-invalid=true]_&]:border-destructive dark:[[data-invalid=true]_&]:ring-destructive/20\n  `,\n  {\n    variants: {\n      size: {\n        sm: 'h-7 px-2.5 text-xs gap-1 rounded-md',\n        md: 'h-8.5 px-3 text-[0.8125rem] leading-(--text-sm--line-height) gap-1 rounded-md',\n        lg: 'h-10 px-4 text-sm gap-1.5 rounded-md',\n      },\n    },\n    defaultVariants: {\n      size: 'md',\n    },\n  },\n);\n\nexport interface SelectTriggerProps\n  extends React.ComponentProps<typeof SelectPrimitive.Trigger>,\n    VariantProps<typeof selectTriggerVariants> {}\n\nfunction SelectTrigger({ className, children, size, ...props }: SelectTriggerProps) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      className={cn(selectTriggerVariants({ size }), className)}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDown className=\"h-4 w-4 opacity-60 -me-0.5\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  );\n}\n\nfunction SelectScrollUpButton({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn('flex cursor-default items-center justify-center py-1', className)}\n      {...props}\n    >\n      <ChevronUp className=\"h-4 w-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  );\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn('flex cursor-default items-center justify-center py-1', className)}\n      {...props}\n    >\n      <ChevronDown className=\"h-4 w-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  );\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = 'popper',\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          'relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border border-border bg-popover shadow-md shadow-black/5 text-secondary-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n          position === 'popper' &&\n            'data-[side=bottom]:translate-y-1.5 data-[side=left]:-translate-x-1.5 data-[side=right]:translate-x-1.5 data-[side=top]:-translate-y-1.5',\n          className,\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            'p-1.5',\n            position === 'popper' &&\n              'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]',\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  );\n}\n\nfunction SelectLabel({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn('py-1.5 ps-8 pe-2 text-xs text-muted-foreground font-medium', className)}\n      {...props}\n    />\n  );\n}\n\nfunction SelectItem({ className, children, ...props }: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  const { indicatorPosition, indicatorVisibility, indicator } = React.useContext(SelectContext);\n\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 text-sm outline-hidden text-foreground hover:bg-accent focus:bg-accent data-disabled:pointer-events-none data-disabled:opacity-50',\n        indicatorPosition === 'left' ? 'ps-8 pe-2' : 'pe-8 ps-2',\n        className,\n      )}\n      {...props}\n    >\n      {indicatorVisibility &&\n        (indicator && isValidElement(indicator) ? (\n          indicator\n        ) : (\n          <span\n            className={cn(\n              'absolute flex h-3.5 w-3.5 items-center justify-center',\n              indicatorPosition === 'left' ? 'start-2' : 'end-2',\n            )}\n          >\n            <SelectPrimitive.ItemIndicator>\n              <Check className=\"h-4 w-4 text-primary\" />\n            </SelectPrimitive.ItemIndicator>\n          </span>\n        ))}\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  );\n}\n\nfunction SelectIndicator({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ItemIndicator>) {\n  const { indicatorPosition } = React.useContext(SelectContext);\n\n  return (\n    <span\n      data-slot=\"select-indicator\"\n      className={cn(\n        'absolute flex top-1/2 -translate-y-1/2 items-center justify-center',\n        indicatorPosition === 'left' ? 'start-2' : 'end-2',\n        className,\n      )}\n      {...props}\n    >\n      <SelectPrimitive.ItemIndicator>{children}</SelectPrimitive.ItemIndicator>\n    </span>\n  );\n}\n\nfunction SelectSeparator({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn('-mx-1.5 my-1.5 h-px bg-border', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectIndicator,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
