{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "hover-background-default",
  "type": "registry:component",
  "dependencies": ["motion"],
  "registryDependencies": ["https://reui.io/r/hover-background.json"],
  "files": [
    {
      "path": "registry/default/components/hover-background/default.tsx",
      "content": "import { HoverBackground } from '@/registry/default/ui/hover-background';\n\nexport default function HoverBackgroundDefault() {\n  return (\n    <div className=\"w-full h-96 rounded-lg overflow-hidden\">\n      <HoverBackground>\n        <div className=\"flex items-center justify-center h-full\">\n          <div className=\"text-center space-y-4\">\n            <h2 className=\"text-4xl font-bold text-white/90\">Hover Me!</h2>\n            <p className=\"text-lg text-white/70 max-w-md\">\n              Watch the animated objects come to life when you hover over this area.\n            </p>\n          </div>\n        </div>\n      </HoverBackground>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/hover-background.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { HTMLMotionProps, motion, useMotionValue, useSpring } from 'motion/react';\nimport { cn } from '@/lib/utils';\n\ntype HoverBackgroundProps = HTMLMotionProps<'div'> & {\n  objectCount?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;\n  children?: React.ReactNode;\n  colors?: {\n    background?: string;\n    objects?: string[];\n    glow?: string;\n  };\n};\n\nfunction HoverBackground({ className, objectCount = 12, children, colors = {}, ...props }: HoverBackgroundProps) {\n  const {\n    background = 'bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900',\n    objects = [\n      'bg-cyan-400/20',\n      'bg-purple-400/20',\n      'bg-fuchsia-400/20',\n      'bg-violet-400/20',\n      'bg-blue-400/20',\n      'bg-indigo-400/20',\n    ],\n    glow = 'shadow-cyan-400/50',\n  } = colors;\n\n  const [isHovered, setIsHovered] = React.useState(false);\n\n  // Mouse position tracking for parallax\n  const mouseX = useMotionValue(0);\n  const mouseY = useMotionValue(0);\n\n  // Spring animations for smooth parallax with slower exit\n  const springX = useSpring(mouseX, {\n    stiffness: 300,\n    damping: 30,\n    // Slower return to center when hover ends\n    restSpeed: 0.1,\n    restDelta: 0.1,\n  });\n  const springY = useSpring(mouseY, {\n    stiffness: 300,\n    damping: 30,\n    restSpeed: 0.1,\n    restDelta: 0.1,\n  });\n\n  const animatedObjects = React.useMemo(\n    () =>\n      Array.from({ length: objectCount }, (_, i) => {\n        const shape = Math.random() > 0.5 ? 'circle' : 'square';\n        return {\n          id: i,\n          x: Math.random() * 90 + 5, // 5-95% to avoid edges\n          y: Math.random() * 90 + 5,\n          size: Math.random() * 60 + 20, // 20-80px\n          color: objects[i % objects.length],\n          delay: Math.random() * 2,\n          shape,\n          floatDirection: Math.random() > 0.5 ? 1 : -1,\n          breathDuration: Math.random() * 3 + 3, // 3-6 seconds\n          parallaxStrength: Math.random() * 0.5 + 0.3, // 0.3-0.8 for more varied parallax depth\n          baseRotation: Math.random() * 360, // Random starting rotation offset\n        };\n      }),\n    [objectCount, objects],\n  );\n\n  const handleMouseMove = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (!isHovered) return;\n\n    const rect = event.currentTarget.getBoundingClientRect();\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n\n    // Calculate mouse position relative to center (-1 to 1)\n    const x = (event.clientX - rect.left - centerX) / centerX;\n    const y = (event.clientY - rect.top - centerY) / centerY;\n\n    mouseX.set(x * 15); // Slightly reduced parallax range\n    mouseY.set(y * 15);\n  };\n\n  const handleHoverStart = () => {\n    setIsHovered(true);\n  };\n\n  const handleHoverEnd = () => {\n    setIsHovered(false);\n    // Smooth return to center\n    mouseX.set(0);\n    mouseY.set(0);\n  };\n\n  return (\n    <motion.div\n      data-slot=\"hover-background\"\n      className={cn('relative size-full overflow-hidden', background, className)}\n      onHoverStart={handleHoverStart}\n      onHoverEnd={handleHoverEnd}\n      onMouseMove={handleMouseMove}\n      whileHover={{ scale: 1.02 }}\n      transition={{ duration: 0.3, ease: 'easeOut' }}\n      animate={{\n        backgroundPosition: ['0% 50%', '100% 50%', '0% 50%'],\n      }}\n      style={{\n        backgroundSize: '200% 200%',\n      }}\n      {...props}\n    >\n      {/* Subtle ambient glow */}\n      <motion.div\n        className=\"absolute inset-0 bg-gradient-radial from-white/5 via-transparent to-transparent\"\n        animate={{\n          opacity: [0.3, 0.6, 0.3],\n          scale: [1, 1.1, 1],\n        }}\n        transition={{\n          duration: 4,\n          repeat: Infinity,\n          ease: 'easeInOut',\n        }}\n      />\n\n      {/* Animated Objects */}\n      {animatedObjects.map((obj) => (\n        <motion.div\n          key={obj.id}\n          className={cn(\n            'absolute backdrop-blur-sm border border-white/10',\n            obj.color,\n            obj.shape === 'circle' ? 'rounded-full' : 'rounded-lg rotate-45',\n          )}\n          style={{\n            left: `${obj.x}%`,\n            top: `${obj.y}%`,\n            width: obj.size,\n            height: obj.size,\n            // Apply parallax with individual object strength\n            x: springX.get() * obj.parallaxStrength,\n            y: springY.get() * obj.parallaxStrength,\n          }}\n          initial={{\n            scale: 0.6,\n            opacity: 0.4,\n            rotate: obj.baseRotation,\n          }}\n          animate={{\n            // Default state animations - breathing with base rotation offset\n            scale: [0.6, 0.8, 0.6],\n            opacity: [0.4, 0.6, 0.4],\n            rotate:\n              obj.shape === 'circle'\n                ? [obj.baseRotation, obj.baseRotation + 10, obj.baseRotation]\n                : [obj.baseRotation, obj.baseRotation + 5, obj.baseRotation],\n            y: [0, obj.floatDirection * 15, 0],\n            x: [0, obj.floatDirection * 8, 0],\n          }}\n          transition={{\n            duration: obj.breathDuration,\n            delay: obj.delay,\n            ease: 'easeInOut',\n            repeat: Infinity,\n            repeatType: 'reverse',\n          }}\n          whileHover={{\n            scale: 1.5,\n            boxShadow: `0 0 30px ${glow.replace('shadow-', '').replace('/50', '')}`,\n          }}\n        />\n      ))}\n\n      {/* Floating Particles on Hover */}\n      {isHovered && (\n        <div className=\"absolute inset-0 pointer-events-none\">\n          {Array.from({ length: 20 }).map((_, i) => (\n            <motion.div\n              key={`particle-${i}`}\n              className=\"absolute w-1 h-1 bg-white/60 rounded-full\"\n              style={{\n                left: `${Math.random() * 100}%`,\n                top: `${Math.random() * 100}%`,\n              }}\n              initial={{ opacity: 0, scale: 0 }}\n              animate={{\n                opacity: [0, 1, 0],\n                scale: [0, 1, 0],\n                y: [0, -50, -100],\n              }}\n              transition={{\n                duration: 3,\n                delay: Math.random() * 2,\n                repeat: Infinity,\n                ease: 'easeOut',\n              }}\n            />\n          ))}\n        </div>\n      )}\n\n      {/* Content Layer */}\n      <div className=\"relative z-10 size-full\">{children}</div>\n    </motion.div>\n  );\n}\n\nexport { HoverBackground, type HoverBackgroundProps };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
