{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "area-chart-1",
  "type": "registry:block",
  "dependencies": ["recharts@2.15.1", "clsx", "tailwind-merge", "class-variance-authority", "lucide-react", "recharts"],
  "registryDependencies": ["https://reui.io/r/card.json"],
  "files": [
    {
      "path": "registry/default/blocks/charts/area-charts/area-chart-1.tsx",
      "content": "'use client';\n\nimport React from 'react';\nimport { Card, CardContent } from '@/registry/default/ui/card';\nimport { CircleDollarSign, TrendingUp, UserPlus } from 'lucide-react';\nimport { Area, AreaChart, ResponsiveContainer, Tooltip } from 'recharts';\n\n// Business Case 1: SaaS Revenue Tracking\nconst revenueData = [\n  { value: 1000 },\n  { value: 4500 },\n  { value: 2000 },\n  { value: 5200 },\n  { value: 1500 },\n  { value: 6100 },\n  { value: 3000 },\n  { value: 6800 },\n  { value: 2000 },\n  { value: 1000 },\n  { value: 4000 },\n  { value: 2000 },\n  { value: 3000 },\n  { value: 2000 },\n  { value: 6238 },\n];\n\n// Business Case 2: New Customer Acquisition\nconst customersData = [\n  { value: 2000 },\n  { value: 4500 },\n  { value: 2000 },\n  { value: 5200 },\n  { value: 1500 },\n  { value: 5100 },\n  { value: 2500 },\n  { value: 6800 },\n  { value: 1800 },\n  { value: 1000 },\n  { value: 3000 },\n  { value: 2000 },\n  { value: 2700 },\n  { value: 2000 },\n  { value: 4238 },\n];\n\n// Business Case 3: Monthly Active Users\nconst activeUsersData = [\n  { value: 2000 },\n  { value: 3500 },\n  { value: 2000 },\n  { value: 5200 },\n  { value: 1200 },\n  { value: 4100 },\n  { value: 3500 },\n  { value: 5800 },\n  { value: 2000 },\n  { value: 800 },\n  { value: 3000 },\n  { value: 1000 },\n  { value: 4000 },\n  { value: 2000 },\n  { value: 4238 },\n];\n\n// Business cards configuration\n// Use custom or Tailwind standard colors: https://tailwindcss.com/docs/colors\nconst businessCards = [\n  {\n    title: 'Revenue',\n    period: 'Last 28 days',\n    value: '6.238$',\n    timestamp: '',\n    data: revenueData,\n    color: 'var(--color-emerald-500)',\n    icon: CircleDollarSign,\n    gradientId: 'revenueGradient',\n  },\n  {\n    title: 'New Customers',\n    period: 'Last 28 days',\n    value: '6.202',\n    timestamp: '3h ago',\n    data: customersData,\n    color: 'var(--color-blue-500)',\n    icon: UserPlus,\n    gradientId: 'customersGradient',\n  },\n  {\n    title: 'Active Users',\n    period: 'Last 28 days',\n    value: '18.945',\n    timestamp: '1h ago',\n    data: activeUsersData,\n    color: 'var(--color-violet-500)',\n    icon: TrendingUp,\n    gradientId: 'usersGradient',\n  },\n];\n\nexport default function AreaChart1() {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-6 lg:p-8\">\n      <div className=\"@container w-full max-w-6xl\">\n        {/* Grid of 3 cards */}\n        <div className=\"grid grid-cols-1 @3xl:grid-cols-3 gap-6\">\n          {businessCards.map((card, i) => {\n            const Icon = card.icon;\n            return (\n              <Card key={i}>\n                <CardContent className=\"space-y-5\">\n                  {/* Header with icon and title */}\n                  <div className=\"flex items-center gap-2\">\n                    <Icon className=\"size-5\" style={{ color: card.color }} />\n                    <span className=\"text-base font-semibold\">{card.title}</span>\n                  </div>\n\n                  <div className=\"flex items-end gap-2.5 justify-between\">\n                    {/* Details */}\n                    <div className=\"flex flex-col gap-1\">\n                      {/* Period */}\n                      <div className=\"text-sm text-muted-foreground whitespace-nowrap\">{card.period}</div>\n\n                      {/* Value */}\n                      <div className=\"text-3xl font-bold text-foreground tracking-tight\">{card.value}</div>\n                    </div>\n\n                    {/* Chart */}\n                    <div className=\"max-w-40 h-16 w-full relative\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <AreaChart\n                          data={card.data}\n                          margin={{\n                            top: 5,\n                            right: 5,\n                            left: 5,\n                            bottom: 5,\n                          }}\n                        >\n                          <defs>\n                            <linearGradient id={card.gradientId} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                              <stop offset=\"0%\" stopColor={card.color} stopOpacity={0.3} />\n                              <stop offset=\"100%\" stopColor={card.color} stopOpacity={0.05} />\n                            </linearGradient>\n                            <filter id={`dotShadow${i}`} x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n                              <feDropShadow dx=\"2\" dy=\"2\" stdDeviation=\"3\" floodColor=\"rgba(0,0,0,0.5)\" />\n                            </filter>\n                          </defs>\n\n                          <Tooltip\n                            cursor={{ stroke: card.color, strokeWidth: 1, strokeDasharray: '2 2' }}\n                            content={({ active, payload }) => {\n                              if (active && payload && payload.length) {\n                                const value = payload[0].value as number;\n                                const formatValue = (val: number) => {\n                                  if (card.title === 'Revenue') {\n                                    return `${(val / 1000).toFixed(1)}k US$`;\n                                  } else if (card.title === 'New Customers') {\n                                    return `${(val / 1000).toFixed(1)}k`;\n                                  } else {\n                                    return `${(val / 1000).toFixed(1)}k`;\n                                  }\n                                };\n\n                                return (\n                                  <div className=\"bg-background/95 backdrop-blur-sm border border-border shadow-lg rounded-lg p-2 pointer-events-none\">\n                                    <p className=\"text-sm font-semibold text-foreground\">{formatValue(value)}</p>\n                                  </div>\n                                );\n                              }\n                              return null;\n                            }}\n                          />\n\n                          {/* Area with gradient and enhanced shadow */}\n                          <Area\n                            type=\"monotone\"\n                            dataKey=\"value\"\n                            stroke={card.color}\n                            fill={`url(#${card.gradientId})`}\n                            strokeWidth={2}\n                            dot={false}\n                            activeDot={{\n                              r: 6,\n                              fill: card.color,\n                              stroke: 'white',\n                              strokeWidth: 2,\n                              filter: `url(#dotShadow${i})`,\n                            }}\n                          />\n                        </AreaChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:block"
    },
    {
      "path": "registry/default/ui/card.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\n// Define CardContext\ntype CardContextType = {\n  variant: 'default' | 'accent';\n};\n\nconst CardContext = React.createContext<CardContextType>({\n  variant: 'default', // Default value\n});\n\n// Hook to use CardContext\nconst useCardContext = () => {\n  const context = React.useContext(CardContext);\n  if (!context) {\n    throw new Error('useCardContext must be used within a Card component');\n  }\n  return context;\n};\n\n// Variants\nconst cardVariants = cva('flex flex-col items-stretch text-card-foreground rounded-xl', {\n  variants: {\n    variant: {\n      default: 'bg-card border border-border shadow-xs black/5',\n      accent: 'bg-muted shadow-xs p-1',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardHeaderVariants = cva('flex items-center justify-between flex-wrap px-5 min-h-14 gap-2.5', {\n  variants: {\n    variant: {\n      default: 'border-b border-border',\n      accent: '',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardContentVariants = cva('grow p-5', {\n  variants: {\n    variant: {\n      default: '',\n      accent: 'bg-card rounded-t-xl [&:last-child]:rounded-b-xl',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardTableVariants = cva('grid grow', {\n  variants: {\n    variant: {\n      default: '',\n      accent: 'bg-card rounded-xl',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardFooterVariants = cva('flex items-center px-5 min-h-14', {\n  variants: {\n    variant: {\n      default: 'border-t border-border',\n      accent: 'bg-card rounded-b-xl mt-[2px]',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\n// Card Component\nfunction Card({\n  className,\n  variant = 'default',\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof cardVariants>) {\n  return (\n    <CardContext.Provider value={{ variant: variant || 'default' }}>\n      <div data-slot=\"card\" className={cn(cardVariants({ variant }), className)} {...props} />\n    </CardContext.Provider>\n  );\n}\n\n// CardHeader Component\nfunction CardHeader({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-header\" className={cn(cardHeaderVariants({ variant }), className)} {...props} />;\n}\n\n// CardContent Component\nfunction CardContent({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-content\" className={cn(cardContentVariants({ variant }), className)} {...props} />;\n}\n\n// CardTable Component\nfunction CardTable({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-table\" className={cn(cardTableVariants({ variant }), className)} {...props} />;\n}\n\n// CardFooter Component\nfunction CardFooter({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-footer\" className={cn(cardFooterVariants({ variant }), className)} {...props} />;\n}\n\n// Other Components\nfunction CardHeading({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-heading\" className={cn('space-y-1', className)} {...props} />;\n}\n\nfunction CardToolbar({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-toolbar\" className={cn('flex items-center gap-2.5', className)} {...props} />;\n}\n\nfunction CardTitle({ className, ...props }: React.HTMLAttributes<HTMLHeadingElement>) {\n  return (\n    <h3\n      data-slot=\"card-title\"\n      className={cn('text-base font-semibold leading-none tracking-tight', className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-description\" className={cn('text-sm text-muted-foreground', className)} {...props} />;\n}\n\n// Exports\nexport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardHeading, CardTable, CardTitle, CardToolbar };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
