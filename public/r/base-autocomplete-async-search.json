{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "base-autocomplete-async-search",
  "type": "registry:component",
  "dependencies": ["@base-ui-components/react", "clsx", "tailwind-merge", "class-variance-authority", "lucide-react"],
  "registryDependencies": [
    "https://reui.io/r/base-autocomplete.json",
    "https://reui.io/r/base-label.json",
    "https://reui.io/r/base-avatar.json"
  ],
  "files": [
    {
      "path": "registry/default/components/base-autocomplete/async-search.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { Autocomplete as BaseAutocomplete } from '@base-ui-components/react/autocomplete';\nimport { \n\tAutocomplete,\n  AutocompleteInput,\n  AutocompletePortal,\n  AutocompletePositioner,\n  AutocompletePopup,\n  AutocompleteStatus,\n  AutocompleteList,\n  AutocompleteItem,\n\tAutocompleteControl,\n\tAutocompleteClear\n} from '@/registry/default/ui/base-autocomplete';\nimport { Label } from '@/registry/default/ui/base-label';\nimport { LoaderCircle } from 'lucide-react';\nimport { Avatar, AvatarImage, AvatarFallback } from '@/registry/default/ui/base-avatar';\n\nexport default function AsyncSearchExample() {\n  const [searchValue, setSearchValue] = React.useState('');\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [searchResults, setSearchResults] = React.useState<Developer[]>([]);\n  const [error, setError] = React.useState<string | null>(null);\n\n  const { contains } = BaseAutocomplete.useFilter({ sensitivity: 'base' });\n\n  React.useEffect(() => {\n    if (!searchValue) {\n      setSearchResults([]);\n      setIsLoading(false);\n      return undefined;\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    let ignore = false;\n\n    async function fetchDevelopers() {\n      try {\n        const results = await searchDevelopers(searchValue, contains);\n        if (!ignore) {\n          setSearchResults(results);\n        }\n      } catch {\n        if (!ignore) {\n          setError('Failed to fetch developers. Please try again.');\n          setSearchResults([]);\n        }\n      } finally {\n        if (!ignore) {\n          setIsLoading(false);\n        }\n      }\n    }\n\n    const timeoutId = setTimeout(fetchDevelopers, 300);\n\n    return () => {\n      clearTimeout(timeoutId);\n      ignore = true;\n    };\n  }, [searchValue, contains]);\n\n  let status: React.ReactNode = '';\n\n  if (isLoading) {\n    status = (\n      <div className=\"flex items-center gap-2\">\n        <LoaderCircle className=\"size-4 animate-spin\" aria-hidden />\n        Searching developers...\n      </div>\n    );\n  } else if (error) {\n    status = error;\n  } else if (searchResults.length === 0 && searchValue) {\n    status = `No developers found for \"${searchValue}\"`;\n  } else if (searchResults.length > 0) {\n    status = `${searchResults.length} developer${searchResults.length === 1 ? '' : 's'} found`;\n  } else if (!searchValue) {\n    status = 'Start typing to search developers...';\n  }\n\n  const shouldRenderPopup = searchValue !== '';\n\n  return (\n    <div className=\"w-full max-w-md space-y-4\">\n\t\t\t<Autocomplete\n        items={searchResults}\n        value={searchValue}\n        onValueChange={setSearchValue}\n        itemToStringValue={(item: unknown) => (item as Developer).name}\n        filter={null}\n      >\n        <Label className=\"flex flex-col gap-2\">\n          <span className=\"text-sm font-medium\">Search developers</span>\n\t\t\t\t\t<AutocompleteControl>\n\t\t\t\t\t\t<AutocompleteInput\n\t\t\t\t\t\t\tplaceholder=\"e.g. John Smith, React, San Francisco\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{searchValue && (\n\t\t\t\t\t\t\t<AutocompleteClear/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</AutocompleteControl>\n        </Label>      \n        {shouldRenderPopup && (\n          <AutocompletePortal>\n            <AutocompletePositioner sideOffset={4} align=\"start\">\n              <AutocompletePopup>\n\t\t\t\t\t\t\t\t<AutocompleteStatus>\n\t\t\t\t\t\t\t\t\t{status}\n\t\t\t\t\t\t\t\t</AutocompleteStatus>\n                <AutocompleteList>\n                  {(developer: Developer) => (\n                    <AutocompleteItem\n                      key={developer.id}\n                      value={developer}\n                      className=\"rounded-lg\"\n                    >\n                      <div className=\"flex items-center gap-2.5\">\n\t\t\t\t\t\t\t\t\t\t\t\t<Avatar className=\"size-9\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<AvatarImage\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={developer.avatar}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\talt={developer.name}\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<AvatarFallback>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{developer.name.split(' ').map(n => n[0]).join('')}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</AvatarFallback>\n\t\t\t\t\t\t\t\t\t\t\t\t</Avatar>\t\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"font-medium truncate\">{developer.name}</div>\n                          <div className=\"text-sm text-muted-foreground truncate\">\n                            {developer.role} â€¢ {developer.location}\n                          </div>\n                        </div>\n                      </div>\n                    </AutocompleteItem>\n                  )}\n                </AutocompleteList>\n              </AutocompletePopup>\n            </AutocompletePositioner>\n          </AutocompletePortal>\n        )}\n      </Autocomplete>\n    </div>\n  );\n}\n\nasync function searchDevelopers(\n  query: string,\n  filter: (item: string, query: string) => boolean,\n): Promise<Developer[]> {\n  // Simulate network delay\n  await new Promise((resolve) => {\n    setTimeout(resolve, Math.random() * 800 + 200);\n  });\n\n  // Simulate occasional network errors (2% chance)\n  if (Math.random() < 0.02 || query === 'error') {\n    throw new Error('Network error');\n  }\n\n  return topDevelopers.filter(\n    (developer) =>\n      filter(developer.name, query) ||\n      filter(developer.role, query) ||\n      filter(developer.location, query) ||\n      developer.skills.some(skill => filter(skill, query))\n  );\n}\n\ninterface Developer {\n  id: string;\n  name: string;\n  role: string;\n  location: string;\n  skills: string[];\n  experience: number;\n  rating: number;\n  avatar: string;\n}\n\nconst topDevelopers: Developer[] = [\n  {\n    id: '1',\n    name: 'Alex Chen',\n    role: 'Senior Full-Stack Developer',\n    location: 'San Francisco, CA',\n    skills: ['React', 'Node.js', 'TypeScript', 'AWS', 'Docker'],\n    experience: 8,\n    rating: 4.9,\n    avatar: 'https://randomuser.me/api/portraits/men/1.jpg'\n  },\n  {\n    id: '2',\n    name: 'Sarah Johnson',\n    role: 'Frontend Architect',\n    location: 'New York, NY',\n    skills: ['Vue.js', 'JavaScript', 'CSS', 'Webpack', 'Figma'],\n    experience: 10,\n    rating: 4.8,\n    avatar: 'https://randomuser.me/api/portraits/women/2.jpg'\n  },\n  {\n    id: '3',\n    name: 'Michael Rodriguez',\n    role: 'Backend Engineer',\n    location: 'Austin, TX',\n    skills: ['Python', 'Django', 'PostgreSQL', 'Redis', 'Kubernetes'],\n    experience: 6,\n    rating: 4.7,\n    avatar: 'https://randomuser.me/api/portraits/men/3.jpg'\n  },\n  {\n    id: '4',\n    name: 'Emily Wang',\n    role: 'DevOps Engineer',\n    location: 'Seattle, WA',\n    skills: ['AWS', 'Terraform', 'Jenkins', 'Docker', 'Linux'],\n    experience: 7,\n    rating: 4.9,\n    avatar: 'https://randomuser.me/api/portraits/women/4.jpg'\n  },\n  {\n    id: '5',\n    name: 'David Kim',\n    role: 'Mobile Developer',\n    location: 'Los Angeles, CA',\n    skills: ['React Native', 'Swift', 'Kotlin', 'Firebase', 'GraphQL'],\n    experience: 5,\n    rating: 4.6,\n    avatar: 'https://randomuser.me/api/portraits/men/5.jpg'\n  },\n  {\n    id: '6',\n    name: 'Lisa Thompson',\n    role: 'Data Engineer',\n    location: 'Boston, MA',\n    skills: ['Python', 'Spark', 'Airflow', 'Snowflake', 'dbt'],\n    experience: 9,\n    rating: 4.8,\n    avatar: 'https://randomuser.me/api/portraits/women/6.jpg'\n  },\n  {\n    id: '7',\n    name: 'James Wilson',\n    role: 'Cloud Solutions Architect',\n    location: 'Chicago, IL',\n    skills: ['AWS', 'Azure', 'Terraform', 'Kubernetes', 'Microservices'],\n    experience: 12,\n    rating: 4.9,\n    avatar: 'https://randomuser.me/api/portraits/men/7.jpg'\n  },\n  {\n    id: '8',\n    name: 'Maria Garcia',\n    role: 'UI/UX Developer',\n    location: 'Miami, FL',\n    skills: ['React', 'Figma', 'CSS-in-JS', 'Storybook', 'Accessibility'],\n    experience: 4,\n    rating: 4.5,\n    avatar: 'https://randomuser.me/api/portraits/women/8.jpg'\n  },\n  {\n    id: '9',\n    name: 'Robert Taylor',\n    role: 'Machine Learning Engineer',\n    location: 'Denver, CO',\n    skills: ['Python', 'TensorFlow', 'PyTorch', 'MLOps', 'Docker'],\n    experience: 6,\n    rating: 4.7,\n    avatar: 'https://randomuser.me/api/portraits/men/9.jpg'\n  },\n  {\n    id: '10',\n    name: 'Jennifer Lee',\n    role: 'Blockchain Developer',\n    location: 'San Diego, CA',\n    skills: ['Solidity', 'Web3.js', 'Ethereum', 'Smart Contracts', 'Rust'],\n    experience: 5,\n    rating: 4.6,\n    avatar: 'https://randomuser.me/api/portraits/women/10.jpg'\n  },\n  {\n    id: '11',\n    name: 'Christopher Brown',\n    role: 'Security Engineer',\n    location: 'Portland, OR',\n    skills: ['Cybersecurity', 'Penetration Testing', 'OWASP', 'SIEM', 'Python'],\n    experience: 8,\n    rating: 4.8,\n    avatar: 'https://randomuser.me/api/portraits/men/11.jpg'\n  },\n  {\n    id: '12',\n    name: 'Amanda Davis',\n    role: 'Game Developer',\n    location: 'Orlando, FL',\n    skills: ['Unity', 'C#', 'Unreal Engine', '3D Modeling', 'VR/AR'],\n    experience: 7,\n    rating: 4.7,\n    avatar: 'https://randomuser.me/api/portraits/women/12.jpg'\n  },\n  {\n    id: '13',\n    name: 'Kevin Zhang',\n    role: 'AI Research Engineer',\n    location: 'Palo Alto, CA',\n    skills: ['Python', 'PyTorch', 'Transformers', 'NLP', 'Computer Vision'],\n    experience: 6,\n    rating: 4.9,\n    avatar: 'https://randomuser.me/api/portraits/men/13.jpg'\n  },\n  {\n    id: '14',\n    name: 'Rachel Green',\n    role: 'QA Automation Engineer',\n    location: 'Phoenix, AZ',\n    skills: ['Selenium', 'Cypress', 'Jest', 'Python', 'Test Automation'],\n    experience: 5,\n    rating: 4.6,\n    avatar: 'https://randomuser.me/api/portraits/women/14.jpg'\n  },\n  {\n    id: '15',\n    name: 'Daniel Martinez',\n    role: 'System Administrator',\n    location: 'Dallas, TX',\n    skills: ['Linux', 'Windows Server', 'Active Directory', 'PowerShell', 'VMware'],\n    experience: 10,\n    rating: 4.8,\n    avatar: 'https://randomuser.me/api/portraits/men/15.jpg'\n  },\n  {\n    id: '16',\n    name: 'Sophie Anderson',\n    role: 'Product Manager',\n    location: 'San Jose, CA',\n    skills: ['Product Strategy', 'Agile', 'Analytics', 'User Research', 'Figma'],\n    experience: 8,\n    rating: 4.7,\n    avatar: 'https://randomuser.me/api/portraits/women/16.jpg'\n  },\n  {\n    id: '17',\n    name: 'Mark Thompson',\n    role: 'Database Administrator',\n    location: 'Atlanta, GA',\n    skills: ['PostgreSQL', 'MySQL', 'MongoDB', 'Redis', 'Performance Tuning'],\n    experience: 11,\n    rating: 4.9,\n    avatar: 'https://randomuser.me/api/portraits/men/17.jpg'\n  },\n  {\n    id: '18',\n    name: 'Jessica White',\n    role: 'Technical Writer',\n    location: 'Raleigh, NC',\n    skills: ['Technical Writing', 'Markdown', 'API Documentation', 'Git', 'Confluence'],\n    experience: 6,\n    rating: 4.5,\n    avatar: 'https://randomuser.me/api/portraits/women/18.jpg'\n  },\n  {\n    id: '19',\n    name: 'Andrew Clark',\n    role: 'Site Reliability Engineer',\n    location: 'Nashville, TN',\n    skills: ['Monitoring', 'Incident Response', 'Python', 'Terraform', 'Kubernetes'],\n    experience: 7,\n    rating: 4.8,\n    avatar: 'https://randomuser.me/api/portraits/men/19.jpg'\n  },\n  {\n    id: '20',\n    name: 'Nicole Taylor',\n    role: 'Frontend Developer',\n    location: 'Minneapolis, MN',\n    skills: ['Angular', 'TypeScript', 'RxJS', 'SCSS', 'Jest'],\n    experience: 4,\n    rating: 4.6,\n    avatar: 'https://randomuser.me/api/portraits/women/20.jpg'\n  },\n  {\n    id: '21',\n    name: 'Ryan Murphy',\n    role: 'Backend Developer',\n    location: 'Kansas City, MO',\n    skills: ['Java', 'Spring Boot', 'Microservices', 'MongoDB', 'Docker'],\n    experience: 6,\n    rating: 4.7,\n    avatar: 'https://randomuser.me/api/portraits/men/21.jpg'\n  },\n  {\n    id: '22',\n    name: 'Stephanie Lewis',\n    role: 'Full-Stack Developer',\n    location: 'Salt Lake City, UT',\n    skills: ['React', 'Node.js', 'GraphQL', 'PostgreSQL', 'AWS'],\n    experience: 5,\n    rating: 4.6,\n    avatar: 'https://randomuser.me/api/portraits/women/22.jpg'\n  },\n  {\n    id: '23',\n    name: 'Brandon Wright',\n    role: 'Cloud Engineer',\n    location: 'Las Vegas, NV',\n    skills: ['AWS', 'Terraform', 'Docker', 'Kubernetes', 'Python'],\n    experience: 8,\n    rating: 4.8,\n    avatar: 'https://randomuser.me/api/portraits/men/23.jpg'\n  },\n  {\n    id: '24',\n    name: 'Ashley Hall',\n    role: 'DevOps Engineer',\n    location: 'Columbus, OH',\n    skills: ['CI/CD', 'Jenkins', 'GitLab', 'Docker', 'AWS'],\n    experience: 6,\n    rating: 4.7,\n    avatar: 'https://randomuser.me/api/portraits/women/24.jpg'\n  },\n  {\n    id: '25',\n    name: 'Tyler Young',\n    role: 'Mobile App Developer',\n    location: 'Tampa, FL',\n    skills: ['Flutter', 'Dart', 'Firebase', 'REST APIs', 'Git'],\n    experience: 4,\n    rating: 4.5,\n    avatar: 'https://randomuser.me/api/portraits/men/25.jpg'\n  }\n];\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/base-autocomplete.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Autocomplete as BaseUIAutocomplete } from '@base-ui-components/react/autocomplete';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { X } from 'lucide-react';\n\n// Define input size variants (without file: part)\nconst inputVariants = cva(\n  `\n    flex w-full bg-background border border-input shadow-xs shadow-black/5 transition-[color,box-shadow] text-foreground placeholder:text-muted-foreground/80 \n    focus-visible:ring-ring/30 focus-visible:border-ring focus-visible:outline-none focus-visible:ring-[3px]     \n    disabled:cursor-not-allowed disabled:opacity-60 \n    [&[readonly]]:bg-muted/80 [&[readonly]]:cursor-not-allowed\n    aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n  `,\n  {\n    variants: {\n      variant: {\n        lg: 'h-10 px-4 text-sm rounded-md',\n        md: 'h-8.5 px-3 text-[0.8125rem] leading-(--text-sm--line-height) rounded-md',\n        sm: 'h-7 px-2.5 text-xs rounded-md',\n      },\n    },\n    defaultVariants: {\n      variant: 'md',\n    },\n  },\n);\n\n// Root - Groups all parts of the autocomplete\nfunction Autocomplete({ ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Root>) {\n  return <BaseUIAutocomplete.Root data-slot=\"autocomplete\" {...props} />;\n}\n\n// Value - Displays the selected value\nfunction AutocompleteValue({ ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Value>) {\n  return (\n    <BaseUIAutocomplete.Value\n      data-slot=\"autocomplete-value\"\n      {...props}\n    />\n  );\n}\n\n// Input and Clear controls\nfunction AutocompleteControl({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <span\n      data-slot=\"autocomplete-control\"\n      className={cn('relative', className)}\n      {...props}\n    />\n  );\n}\n\n// Trigger - A button that opens the autocomplete\nfunction AutocompleteTrigger({ ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Trigger>) {\n  return (\n    <BaseUIAutocomplete.Trigger\n      data-slot=\"autocomplete-trigger\"\n      {...props}\n    />\n  );\n}\n\n// Input - The input element for typing\nfunction AutocompleteInput({\n  className,\n  variant = 'md',\n  ...props\n}: React.ComponentProps<typeof BaseUIAutocomplete.Input> & VariantProps<typeof inputVariants>) {\n  return (\n    <BaseUIAutocomplete.Input\n      data-slot=\"autocomplete-input\"\n      className={cn(inputVariants({ variant }), className)}\n      {...props}\n    />\n  );\n}\n\n// Icon - An icon element for the autocomplete\nfunction AutocompleteIcon({ className, ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Icon>) {\n  return (\n    <BaseUIAutocomplete.Icon\n      data-slot=\"autocomplete-icon\"\n      className={cn('h-4 w-4 opacity-50', className)}\n      {...props}\n    />\n  );\n}\n\n\n// Status - Displays the status of the autocomplete\nfunction AutocompleteStatus({ className, ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Status>) {\n  return (\n    <BaseUIAutocomplete.Status\n      data-slot=\"autocomplete-status\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  );\n}\n\n// Portal - A portal element that moves the popup to a different part of the DOM\nfunction AutocompletePortal({ ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Portal>) {\n  return <BaseUIAutocomplete.Portal data-slot=\"autocomplete-portal\" {...props} />;\n}\n\n// Backdrop - An overlay displayed beneath the autocomplete popup\nfunction AutocompleteBackdrop({ ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Backdrop>) {\n  return <BaseUIAutocomplete.Backdrop data-slot=\"autocomplete-backdrop\" {...props} />;\n}\n\n// Positioner - Positions the autocomplete popup against the input\nfunction AutocompletePositioner({ className, ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Positioner>) {\n  return (\n    <BaseUIAutocomplete.Positioner\n      data-slot=\"autocomplete-positioner\"\n      className={cn('outline-none', className)}\n      {...props}\n    />\n  );\n}\n\n// Popup - A container for the autocomplete options\nfunction AutocompletePopup({ className, ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Popup>) {\n  return (\n    <BaseUIAutocomplete.Popup\n      data-slot=\"autocomplete-popup\"\n      className={cn(\n\t\t\t\t'w-[var(--anchor-width)] max-h-[min(var(--available-height),23rem)] max-w-[var(--available-width)]',\n\t\t\t\t'overflow-y-auto scroll-pt-2 scroll-pb-2 overscroll-contain bg-[canvas]',\n        'rounded-md border border-border bg-popover p-2 text-popover-foreground shadow-md shadow-black/5',\n        'origin-[var(--transform-origin)] transition-[transform,scale,opacity] data-[ending-style]:scale-90 data-[ending-style]:opacity-0 data-[starting-style]:scale-90 data-[starting-style]:opacity-0',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\n// List - A container for the autocomplete options\nfunction AutocompleteList({ className, ...props }: React.ComponentProps<typeof BaseUIAutocomplete.List>) {\n  return (\n    <BaseUIAutocomplete.List\n      data-slot=\"autocomplete-list\"\n      className={cn('space-y-0.5', className)}\n      {...props}\n    />\n  );\n}\n\n// Collection - A collection of autocomplete items\nfunction AutocompleteCollection({ ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Collection>) {\n  return <BaseUIAutocomplete.Collection data-slot=\"autocomplete-collection\" {...props} />;\n}\n\n// Row - A row container for autocomplete items\nfunction AutocompleteRow({ className, ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Row>) {\n  return (\n    <BaseUIAutocomplete.Row\n      data-slot=\"autocomplete-row\"\n      className={cn('flex items-center gap-2', className)}\n      {...props}\n    />\n  );\n}\n\n// Item - An individual selectable option in the autocomplete\nfunction AutocompleteItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof BaseUIAutocomplete.Item>) {\n  return (\n    <BaseUIAutocomplete.Item\n      data-slot=\"autocomplete-item\"\n      className={cn(\n        'text-foreground relative flex cursor-default select-none items-center gap-2 rounded-md px-2 py-1.5 text-sm outline-hidden transition-colors data-disabled:pointer-events-none data-disabled:opacity-50',\n        '[&_svg]:pointer-events-none [&_svg:not([role=img]):not([class*=text-])]:opacity-60 [&_svg:not([class*=size-])]:size-4 [&_svg]:shrink-0',\n        'data-[highlighted]:relative data-[highlighted]:z-0 data-[highlighted]:text-foreground',\n        'data-[highlighted]:before:absolute data-[highlighted]:before:inset-x-1 data-[highlighted]:before:inset-y-0 data-[highlighted]:before:z-[-1] data-[highlighted]:before:rounded-sm data-[highlighted]:before:bg-accent',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\n// Group - Groups related autocomplete items with the corresponding label\nfunction AutocompleteGroup({ ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Group>) {\n  return <BaseUIAutocomplete.Group data-slot=\"autocomplete-group\" {...props} />;\n}\n\n// GroupLabel - An accessible label that is automatically associated with its parent group\nfunction AutocompleteGroupLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof BaseUIAutocomplete.GroupLabel>) {\n  return (\n    <BaseUIAutocomplete.GroupLabel\n      data-slot=\"autocomplete-group-label\"\n      className={cn('px-2 py-1.5 text-xs text-muted-foreground font-medium', className)}\n      {...props}\n    />\n  );\n}\n\n// Empty - A component to display when no options are available\nfunction AutocompleteEmpty({ className, ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Empty>) {\n  return (\n    <BaseUIAutocomplete.Empty\n      data-slot=\"autocomplete-empty\"\n      className={cn('px-2 py-1.5 text-sm text-muted-foreground', className)}\n      {...props}\n    />\n  );\n}\n\n// Clear - A button to clear the input value\nfunction AutocompleteClear({ className, children, ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Clear>) {\n  return (\n    <BaseUIAutocomplete.Clear\n      data-slot=\"autocomplete-clear\"\n      className={cn(\n        'absolute cursor-pointer right-2 top-1/2 -translate-y-1/2 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none',\n        'data-[disabled]:pointer-events-none',\n        className,\n      )}\n      {...props}\n    >\n\t\t\t{children ? children : <X className=\"size-3.5\" />}\n\t\t</BaseUIAutocomplete.Clear>\n\t);\n}\n\n// Arrow - Displays an element positioned against the autocomplete anchor\nfunction AutocompleteArrow({ ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Arrow>) {\n  return <BaseUIAutocomplete.Arrow data-slot=\"autocomplete-arrow\" {...props} />;\n}\n\n// Separator - A separator element accessible to screen readers\nfunction AutocompleteSeparator({ className, ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Separator>) {\n  return (\n    <BaseUIAutocomplete.Separator\n      data-slot=\"autocomplete-separator\"\n      className={cn('-mx-2 my-1.5 h-px bg-muted', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Autocomplete,\n  AutocompleteControl,\n  AutocompleteValue,\n  AutocompleteTrigger,\n  AutocompleteInput,\n  AutocompleteIcon,\n  AutocompleteStatus,\n  AutocompletePortal,\n  AutocompleteBackdrop,\n  AutocompletePositioner,\n  AutocompletePopup,\n  AutocompleteList,\n  AutocompleteCollection,\n  AutocompleteRow,\n  AutocompleteItem,\n  AutocompleteGroup,\n  AutocompleteGroupLabel,\n  AutocompleteEmpty,\n  AutocompleteClear,\n  AutocompleteArrow,\n  AutocompleteSeparator,\n};",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/base-label.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nconst labelVariants = cva(\n  'text-sm leading-none text-foreground peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        primary: 'font-medium',\n        secondary: 'font-normal',\n      },\n    },\n    defaultVariants: {\n      variant: 'primary',\n    },\n  },\n);\n\nfunction Label({ className, variant, ...props }: React.ComponentProps<'label'> & VariantProps<typeof labelVariants>) {\n  return <label data-slot=\"label\" className={cn(labelVariants({ variant }), className)} {...props} />;\n}\n\nexport { Label };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/base-avatar.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Avatar } from '@base-ui-components/react/avatar';\nimport { cva, VariantProps } from 'class-variance-authority';\n\nconst avatarStatusVariants = cva('flex items-center rounded-full size-2 border-2 border-background', {\n  variants: {\n    variant: {\n      online: 'bg-green-600',\n      offline: 'bg-zinc-600 dark:bg-zinc-300',\n      busy: 'bg-yellow-600',\n      away: 'bg-blue-600',\n    },\n  },\n  defaultVariants: {\n    variant: 'online',\n  },\n});\n\n// Base UI Avatar Root\nfunction AvatarRoot({ className, ...props }: React.ComponentProps<typeof Avatar.Root>) {\n  return <Avatar.Root data-slot=\"avatar\" className={cn('relative flex h-10 w-10 shrink-0', className)} {...props} />;\n}\n\n// Base UI Avatar Image\nfunction AvatarImage({ className, ...props }: React.ComponentProps<typeof Avatar.Image>) {\n  return (\n    <Avatar.Image\n      data-slot=\"avatar-image\"\n      className={cn('aspect-square overflow-hidden h-full w-full rounded-full', className)}\n      {...props}\n    />\n  );\n}\n\n// Base UI Avatar Fallback\nfunction AvatarFallback({ className, ...props }: React.ComponentProps<typeof Avatar.Fallback>) {\n  return (\n    <Avatar.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        'flex h-full w-full items-center justify-center rounded-full bg-muted text-sm font-medium text-muted-foreground overflow-hidden',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction AvatarIndicator({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      data-slot=\"avatar-indicator\"\n      className={cn('absolute flex size-6 items-center justify-center', className)}\n      {...props}\n    />\n  );\n}\n\nfunction AvatarStatus({\n  className,\n  variant,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof avatarStatusVariants>) {\n  return <div data-slot=\"avatar-status\" className={cn(avatarStatusVariants({ variant }), className)} {...props} />;\n}\n\n// Exports with proper naming to match Base UI pattern\nexport { AvatarRoot as Avatar, AvatarImage, AvatarFallback, AvatarIndicator, AvatarStatus, avatarStatusVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
