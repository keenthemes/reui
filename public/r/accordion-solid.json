{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "accordion-solid",
  "type": "registry:component",
  "dependencies": ["clsx", "tailwind-merge", "class-variance-authority", "lucide-react", "radix-ui"],
  "registryDependencies": ["https://reui.io/r/accordion.json"],
  "files": [
    {
      "path": "registry/default/components/accordion/solid.tsx",
      "content": "import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/registry/default/ui/accordion';\n\nexport default function AccordionDemo() {\n  return (\n    <Accordion type=\"single\" variant=\"solid\" collapsible className=\"w-full lg:w-[75%]\">\n      <AccordionItem value=\"reui-1\">\n        <AccordionTrigger>What is ReUI?</AccordionTrigger>\n        <AccordionContent>ReUI provides ready-to-use CRUD examples for developers.</AccordionContent>\n      </AccordionItem>\n      <AccordionItem value=\"reui-2\">\n        <AccordionTrigger>Who benefits from ReUI?</AccordionTrigger>\n        <AccordionContent>Developers looking to save time with pre-built CRUD solutions.</AccordionContent>\n      </AccordionItem>\n      <AccordionItem value=\"reui-3\">\n        <AccordionTrigger>Why choose ReUI?</AccordionTrigger>\n        <AccordionContent>ReUI simplifies development with plug-and-play CRUDs.</AccordionContent>\n      </AccordionItem>\n    </Accordion>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/accordion.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { ChevronDown, Plus } from 'lucide-react';\nimport { Accordion as AccordionPrimitive } from 'radix-ui';\n\n// Variants\nconst accordionRootVariants = cva('', {\n  variants: {\n    variant: {\n      default: '',\n      outline: 'space-y-2',\n      solid: 'space-y-2',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst accordionItemVariants = cva('', {\n  variants: {\n    variant: {\n      default: 'border-b border-border',\n      outline: 'border border-border rounded-lg px-4',\n      solid: 'rounded-lg bg-accent/70 px-4',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst accordionTriggerVariants = cva(\n  'flex flex-1 items-center justify-between py-4 gap-2.5 text-foreground font-medium transition-all [&[data-state=open]>svg]:rotate-180 cursor-pointer',\n  {\n    variants: {\n      variant: {\n        default: '',\n        outline: '',\n        solid: '',\n      },\n      indicator: {\n        arrow: '',\n        plus: '[&>svg>path:last-child]:origin-center [&>svg>path:last-child]:transition-all [&>svg>path:last-child]:duration-200 [&[data-state=open]>svg>path:last-child]:rotate-90 [&[data-state=open]>svg>path:last-child]:opacity-0 [&[data-state=open]>svg]:rotate-180',\n        none: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      indicator: 'arrow',\n    },\n  },\n);\n\nconst accordionContentVariants = cva(\n  'overflow-hidden text-sm text-accent-foreground transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down',\n  {\n    variants: {\n      variant: {\n        default: '',\n        outline: '',\n        solid: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\n// Context\ntype AccordionContextType = {\n  variant?: 'default' | 'outline' | 'solid';\n  indicator?: 'arrow' | 'plus' | 'none';\n};\n\nconst AccordionContext = React.createContext<AccordionContextType>({\n  variant: 'default',\n  indicator: 'arrow',\n});\n\n// Components\nfunction Accordion(\n  props: React.ComponentProps<typeof AccordionPrimitive.Root> &\n    VariantProps<typeof accordionRootVariants> & {\n      indicator?: 'arrow' | 'plus';\n    },\n) {\n  const { className, variant = 'default', indicator = 'arrow', children, ...rest } = props;\n\n  return (\n    <AccordionContext.Provider value={{ variant: variant || 'default', indicator }}>\n      <AccordionPrimitive.Root\n        data-slot=\"accordion\"\n        className={cn(accordionRootVariants({ variant }), className)}\n        {...rest}\n      >\n        {children}\n      </AccordionPrimitive.Root>\n    </AccordionContext.Provider>\n  );\n}\n\nfunction AccordionItem(props: React.ComponentProps<typeof AccordionPrimitive.Item>) {\n  const { className, children, ...rest } = props;\n  const { variant } = React.useContext(AccordionContext);\n\n  return (\n    <AccordionPrimitive.Item\n      data-slot=\"accordion-item\"\n      className={cn(accordionItemVariants({ variant }), className)}\n      {...rest}\n    >\n      {children}\n    </AccordionPrimitive.Item>\n  );\n}\n\nfunction AccordionTrigger(props: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {\n  const { className, children, ...rest } = props;\n  const { variant, indicator } = React.useContext(AccordionContext);\n\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        data-slot=\"accordion-trigger\"\n        className={cn(accordionTriggerVariants({ variant, indicator }), className)}\n        {...rest}\n      >\n        {children}\n        {indicator === 'plus' && <Plus className=\"size-4 shrink-0 transition-transform duration-200\" strokeWidth={1} />}\n        {indicator === 'arrow' && (\n          <ChevronDown className=\"size-4 shrink-0 transition-transform duration-200\" strokeWidth={1} />\n        )}\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  );\n}\n\nfunction AccordionContent(props: React.ComponentProps<typeof AccordionPrimitive.Content>) {\n  const { className, children, ...rest } = props;\n  const { variant } = React.useContext(AccordionContext);\n\n  return (\n    <AccordionPrimitive.Content\n      data-slot=\"accordion-content\"\n      className={cn(accordionContentVariants({ variant }), className)}\n      {...rest}\n    >\n      <div className={cn('pb-5 pt-0', className)}>{children}</div>\n    </AccordionPrimitive.Content>\n  );\n}\n\n// Exports\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
