{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-grid-crud",
  "type": "registry:component",
  "dependencies": [
    "@remixicon/react",
    "@tanstack/react-table",
    "sonner",
    "clsx",
    "tailwind-merge",
    "class-variance-authority",
    "lucide-react",
    "radix-ui",
    "@radix-ui/react-dropdown-menu"
  ],
  "registryDependencies": [
    "https://reui.io/r/alert.json",
    "https://reui.io/r/avatar.json",
    "https://reui.io/r/badge.json",
    "https://reui.io/r/button.json",
    "https://reui.io/r/card.json",
    "https://reui.io/r/checkbox.json",
    "https://reui.io/r/data-grid.json",
    "https://reui.io/r/data-grid-column-header.json",
    "https://reui.io/r/data-grid-pagination.json",
    "https://reui.io/r/data-grid-table.json",
    "https://reui.io/r/dropdown-menu.json",
    "https://reui.io/r/input.json",
    "https://reui.io/r/label.json",
    "https://reui.io/r/popover.json",
    "https://reui.io/r/scroll-area.json"
  ],
  "files": [
    {
      "path": "registry/default/components/data-grid/crud.tsx",
      "content": "import { useMemo, useState } from 'react';\nimport { useCopyToClipboard } from '@/registry/default/hooks/use-copy-to-clipboard';\nimport { Alert, AlertIcon, AlertTitle } from '@/registry/default/ui/alert';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/registry/default/ui/avatar';\nimport { Badge } from '@/registry/default/ui/badge';\nimport { Button } from '@/registry/default/ui/button';\nimport { Card, CardFooter, CardHeader, CardHeading, CardTable, CardToolbar } from '@/registry/default/ui/card';\nimport { Checkbox } from '@/registry/default/ui/checkbox';\nimport { DataGrid } from '@/registry/default/ui/data-grid';\nimport { DataGridColumnHeader } from '@/registry/default/ui/data-grid-column-header';\nimport { DataGridPagination } from '@/registry/default/ui/data-grid-pagination';\nimport {\n  DataGridTable,\n  DataGridTableRowSelect,\n  DataGridTableRowSelectAll,\n} from '@/registry/default/ui/data-grid-table';\nimport {\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/registry/default/ui/dropdown-menu';\nimport { Input } from '@/registry/default/ui/input';\nimport { Label } from '@/registry/default/ui/label';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/registry/default/ui/popover';\nimport { ScrollArea, ScrollBar } from '@/registry/default/ui/scroll-area';\nimport { DropdownMenu } from '@radix-ui/react-dropdown-menu';\nimport { RiCheckboxCircleFill } from '@remixicon/react';\nimport {\n  ColumnDef,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  PaginationState,\n  Row,\n  SortingState,\n  useReactTable,\n} from '@tanstack/react-table';\nimport { Ellipsis, Filter, Search, UserRoundPlus, X } from 'lucide-react';\nimport { toast } from 'sonner';\n\ninterface IData {\n  id: string;\n  name: string;\n  availability: 'online' | 'away' | 'busy' | 'offline';\n  avatar: string;\n  status: 'Active' | 'Inactive' | 'Pending' | 'Blocked';\n  flag: string; // Emoji flags\n  email: string;\n  company: string;\n  role: string;\n  joined: string;\n  location: string;\n  balance: number;\n}\n\nconst demoData: IData[] = [\n  {\n    id: '1',\n    name: 'Kathryn Campbell',\n    availability: 'online',\n    avatar: '1.png',\n    status: 'Active',\n    flag: 'ðŸ‡ºðŸ‡¸',\n    email: 'kathryn@apple.com',\n    company: 'Apple',\n    role: 'CEO',\n    joined: '2021-04-15',\n    location: 'San Francisco, USA',\n    balance: 5143.03,\n  },\n  {\n    id: '2',\n    name: 'Robert Smith',\n    availability: 'away',\n    avatar: '2.png',\n    status: 'Inactive',\n    flag: 'ðŸ‡¬ðŸ‡§',\n    email: 'robert@openai.com',\n    company: 'OpenAI',\n    role: 'CTO',\n    joined: '2020-07-20',\n    location: 'London, UK',\n    balance: 4321.87,\n  },\n  {\n    id: '3',\n    name: 'Sophia Johnson',\n    availability: 'busy',\n    avatar: '3.png',\n    status: 'Blocked',\n    flag: 'ðŸ‡¨ðŸ‡¦',\n    email: 'sophia@meta.com',\n    company: 'Meta',\n    role: 'Designer',\n    joined: '2019-03-12',\n    location: 'Toronto, Canada',\n    balance: 7654.98,\n  },\n  {\n    id: '4',\n    name: 'Lucas Walker',\n    availability: 'offline',\n    avatar: '4.png',\n    status: 'Inactive',\n    flag: 'ðŸ‡¦ðŸ‡º',\n    email: 'lucas@tesla.com',\n    company: 'Tesla',\n    role: 'Developer',\n    joined: '2022-01-18',\n    location: 'Sydney, Australia',\n    balance: 3456.45,\n  },\n  {\n    id: '5',\n    name: 'Emily Davis',\n    availability: 'online',\n    avatar: '5.png',\n    status: 'Active',\n    flag: 'ðŸ‡©ðŸ‡ª',\n    email: 'emily@sap.com',\n    company: 'SAP',\n    role: 'Lawyer',\n    joined: '2023-05-23',\n    location: 'Berlin, Germany',\n    balance: 9876.54,\n  },\n  {\n    id: '6',\n    name: 'James Lee',\n    availability: 'away',\n    avatar: '6.png',\n    status: 'Pending',\n    flag: 'ðŸ‡²ðŸ‡¾',\n    email: 'james@keenthemes.com',\n    company: 'Keenthemes',\n    role: 'Director',\n    joined: '2018-11-30',\n    location: 'Kuala Lumpur, MY',\n    balance: 6214.22,\n  },\n  {\n    id: '7',\n    name: 'Isabella Martinez',\n    availability: 'busy',\n    avatar: '7.png',\n    status: 'Inactive',\n    flag: 'ðŸ‡ªðŸ‡¸',\n    email: 'isabella@bbva.es',\n    company: 'BBVA',\n    role: 'Product Manager',\n    joined: '2021-06-14',\n    location: 'Barcelona, Spain',\n    balance: 5321.77,\n  },\n  {\n    id: '8',\n    name: 'Benjamin Harris',\n    availability: 'offline',\n    avatar: '8.png',\n    status: 'Blocked',\n    flag: 'ðŸ‡¯ðŸ‡µ',\n    email: 'benjamin@sony.jp',\n    company: 'Sony',\n    role: 'Marketing Lead',\n    joined: '2020-10-22',\n    location: 'Tokyo, Japan',\n    balance: 8452.39,\n  },\n  {\n    id: '9',\n    name: 'Olivia Brown',\n    availability: 'online',\n    avatar: '9.png',\n    status: 'Pending',\n    flag: 'ðŸ‡«ðŸ‡·',\n    email: 'olivia@lvmh.fr',\n    company: 'LVMH',\n    role: 'Data Scientist',\n    joined: '2019-09-17',\n    location: 'Paris, France',\n    balance: 7345.1,\n  },\n  {\n    id: '10',\n    name: 'Michael Clark',\n    availability: 'away',\n    avatar: '10.png',\n    status: 'Inactive',\n    flag: 'ðŸ‡®ðŸ‡¹',\n    email: 'michael@eni.it',\n    company: 'ENI',\n    role: 'Engineer',\n    joined: '2023-02-11',\n    location: 'Milan, Italy',\n    balance: 5214.88,\n  },\n  {\n    id: '11',\n    name: 'Ava Wilson',\n    availability: 'busy',\n    avatar: '11.png',\n    status: 'Blocked',\n    flag: 'ðŸ‡§ðŸ‡·',\n    email: 'ava@vale.br',\n    company: 'Vale',\n    role: 'Software Engineer',\n    joined: '2022-12-01',\n    location: 'Rio de Janeiro, Brazil',\n    balance: 9421.5,\n  },\n  {\n    id: '12',\n    name: 'David Young',\n    availability: 'offline',\n    avatar: '12.png',\n    status: 'Active',\n    flag: 'ðŸ‡®ðŸ‡³',\n    email: 'david@tata.in',\n    company: 'Tata',\n    role: 'Sales Manager',\n    joined: '2020-03-27',\n    location: 'Mumbai, India',\n    balance: 4521.67,\n  },\n];\n\nfunction ActionsCell({ row }: { row: Row<IData> }) {\n  const { copy } = useCopyToClipboard();\n  const handleCopyId = () => {\n    copy(row.original.id);\n    const message = `Employee ID successfully copied: ${row.original.id}`;\n    toast.custom(\n      (t) => (\n        <Alert variant=\"mono\" icon=\"primary\" close={false} onClose={() => toast.dismiss(t)}>\n          <AlertIcon>\n            <RiCheckboxCircleFill />\n          </AlertIcon>\n          <AlertTitle>{message}</AlertTitle>\n        </Alert>\n      ),\n      {\n        position: 'top-center',\n      },\n    );\n  };\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button className=\"size-7\" mode=\"icon\" variant=\"ghost\">\n          <Ellipsis />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent side=\"bottom\" align=\"end\">\n        <DropdownMenuItem onClick={() => {}}>Edit</DropdownMenuItem>\n        <DropdownMenuItem onClick={handleCopyId}>Copy ID</DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem variant=\"destructive\" onClick={() => {}}>\n          Delete\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n\nexport default function DataGridDemo() {\n  const [pagination, setPagination] = useState<PaginationState>({\n    pageIndex: 0,\n    pageSize: 5,\n  });\n  const [sorting, setSorting] = useState<SortingState>([{ id: 'name', desc: true }]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedStatuses, setSelectedStatuses] = useState<string[]>([]);\n\n  const filteredData = useMemo(() => {\n    return demoData.filter((item) => {\n      // Filter by status\n      const matchesStatus = !selectedStatuses?.length || selectedStatuses.includes(item.status);\n\n      // Filter by search query (case-insensitive)\n      const searchLower = searchQuery.toLowerCase();\n      const matchesSearch =\n        !searchQuery ||\n        Object.values(item)\n          .join(' ') // Combine all fields into a single string\n          .toLowerCase()\n          .includes(searchLower);\n\n      return matchesStatus && matchesSearch;\n    });\n  }, [searchQuery, selectedStatuses]);\n\n  const statusCounts = useMemo(() => {\n    return demoData.reduce(\n      (acc, item) => {\n        acc[item.status] = (acc[item.status] || 0) + 1;\n        return acc;\n      },\n      {} as Record<string, number>,\n    );\n  }, []);\n\n  const handleStatusChange = (checked: boolean, value: string) => {\n    setSelectedStatuses(\n      (\n        prev = [], // Default to an empty array\n      ) => (checked ? [...prev, value] : prev.filter((v) => v !== value)),\n    );\n  };\n\n  const columns = useMemo<ColumnDef<IData>[]>(\n    () => [\n      {\n        accessorKey: 'id',\n        id: 'id',\n        header: () => <DataGridTableRowSelectAll />,\n        cell: ({ row }) => <DataGridTableRowSelect row={row} />,\n        enableSorting: false,\n        size: 35,\n        meta: {\n          headerClassName: '',\n          cellClassName: '',\n        },\n        enableResizing: false,\n      },\n      {\n        accessorKey: 'name',\n        id: 'name',\n        header: ({ column }) => <DataGridColumnHeader title=\"User\" visibility={true} column={column} />,\n        cell: ({ row }) => {\n          return (\n            <div className=\"flex items-center gap-3\">\n              <Avatar className=\"size-8\">\n                <AvatarImage src={`/media/avatars/${row.original.avatar}`} alt={row.original.name} />\n                <AvatarFallback>N</AvatarFallback>\n              </Avatar>\n              <div className=\"space-y-px\">\n                <div className=\"font-medium text-foreground\">{row.original.name}</div>\n                <div className=\"text-muted-foreground\">{row.original.email}</div>\n              </div>\n            </div>\n          );\n        },\n        size: 250,\n        enableSorting: true,\n        enableHiding: false,\n        enableResizing: true,\n      },\n      {\n        accessorKey: 'location',\n        id: 'location',\n        header: ({ column }) => <DataGridColumnHeader title=\"Location\" visibility={true} column={column} />,\n        cell: ({ row }) => {\n          return (\n            <div className=\"flex items-center gap-1.5\">\n              {row.original.flag}\n              <div className=\"font-medium text-foreground\">{row.original.location}</div>\n            </div>\n          );\n        },\n        size: 200,\n        meta: {\n          headerClassName: '',\n          cellClassName: 'text-start',\n        },\n        enableSorting: true,\n        enableHiding: true,\n        enableResizing: true,\n      },\n      {\n        accessorKey: 'status',\n        id: 'status',\n        header: ({ column }) => <DataGridColumnHeader title=\"Status\" visibility={true} column={column} />,\n        cell: ({ row }) => {\n          const status = row.original.status;\n\n          if (status == 'Active') {\n            return (\n              <Badge variant=\"primary\" appearance=\"outline\">\n                Approved\n              </Badge>\n            );\n          } else if (status == 'Blocked') {\n            return (\n              <Badge variant=\"destructive\" appearance=\"outline\">\n                Blocked\n              </Badge>\n            );\n          } else if (status == 'Inactive') {\n            return (\n              <Badge variant=\"secondary\" appearance=\"outline\">\n                Inactive\n              </Badge>\n            );\n          } else {\n            return (\n              <Badge variant=\"secondary\" appearance=\"outline\">\n                Pending\n              </Badge>\n            );\n          }\n        },\n        size: 100,\n        enableSorting: true,\n        enableHiding: true,\n        enableResizing: true,\n      },\n      {\n        id: 'actions',\n        header: '',\n        cell: ({ row }) => <ActionsCell row={row} />,\n        size: 60,\n        enableSorting: false,\n        enableHiding: false,\n        enableResizing: false,\n      },\n    ],\n    [],\n  );\n\n  const [columnOrder, setColumnOrder] = useState<string[]>(columns.map((column) => column.id as string));\n\n  const table = useReactTable({\n    columns,\n    data: filteredData,\n    pageCount: Math.ceil((filteredData?.length || 0) / pagination.pageSize),\n    getRowId: (row: IData) => row.id,\n    state: {\n      pagination,\n      sorting,\n      columnOrder,\n    },\n    columnResizeMode: 'onChange',\n    onColumnOrderChange: setColumnOrder,\n    onPaginationChange: setPagination,\n    onSortingChange: setSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n  });\n\n  return (\n    <DataGrid\n      table={table}\n      recordCount={filteredData?.length || 0}\n      tableLayout={{\n        columnsPinnable: true,\n        columnsResizable: true,\n        columnsMovable: true,\n        columnsVisibility: true,\n      }}\n    >\n      <Card>\n        <CardHeader className=\"py-4\">\n          <CardHeading>\n            <div className=\"flex items-center gap-2.5\">\n              <div className=\"relative\">\n                <Search className=\"size-4 text-muted-foreground absolute start-3 top-1/2 -translate-y-1/2\" />\n                <Input\n                  placeholder=\"Search...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"ps-9 w-40\"\n                />\n                {searchQuery.length > 0 && (\n                  <Button\n                    mode=\"icon\"\n                    variant=\"ghost\"\n                    className=\"absolute end-1.5 top-1/2 -translate-y-1/2 h-6 w-6\"\n                    onClick={() => setSearchQuery('')}\n                  >\n                    <X />\n                  </Button>\n                )}\n              </div>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button variant=\"outline\">\n                    <Filter />\n                    Status\n                    {selectedStatuses.length > 0 && (\n                      <Badge size=\"sm\" appearance=\"outline\">\n                        {selectedStatuses.length}\n                      </Badge>\n                    )}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-40 p-3\" align=\"start\">\n                  <div className=\"space-y-3\">\n                    <div className=\"text-xs font-medium text-muted-foreground\">Filters</div>\n                    <div className=\"space-y-3\">\n                      {Object.keys(statusCounts).map((status) => (\n                        <div key={status} className=\"flex items-center gap-2.5\">\n                          <Checkbox\n                            id={status}\n                            checked={selectedStatuses.includes(status)}\n                            onCheckedChange={(checked) => handleStatusChange(checked === true, status)}\n                          />\n                          <Label\n                            htmlFor={status}\n                            className=\"grow flex items-center justify-between font-normal gap-1.5\"\n                          >\n                            {status}\n                            <span className=\"text-muted-foreground\">{statusCounts[status]}</span>\n                          </Label>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </PopoverContent>\n              </Popover>\n            </div>\n          </CardHeading>\n          <CardToolbar>\n            <Button>\n              <UserRoundPlus />\n              Add new\n            </Button>\n          </CardToolbar>\n        </CardHeader>\n        <CardTable>\n          <ScrollArea>\n            <DataGridTable />\n            <ScrollBar orientation=\"horizontal\" />\n          </ScrollArea>\n        </CardTable>\n        <CardFooter>\n          <DataGridPagination />\n        </CardFooter>\n      </Card>\n    </DataGrid>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/hooks/use-copy-to-clipboard.ts",
      "content": "'use client';\n\nimport * as React from 'react';\n\nexport function useCopyToClipboard({\n  timeout = 2000,\n  onCopy,\n}: {\n  timeout?: number;\n  onCopy?: () => void;\n} = {}) {\n  const [copied, setCopied] = React.useState(false);\n\n  const copy = (value: string) => {\n    if (typeof window === 'undefined' || !navigator.clipboard.writeText) {\n      return;\n    }\n\n    if (!value) return;\n\n    navigator.clipboard.writeText(value).then(() => {\n      setCopied(true);\n\n      if (onCopy) {\n        onCopy();\n      }\n\n      setTimeout(() => {\n        setCopied(false);\n      }, timeout);\n    }, console.error);\n  };\n\n  return { copied, copy };\n}\n",
      "type": "registry:hook",
      "target": ""
    },
    {
      "path": "registry/default/ui/alert.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Button } from '@/registry/default/ui/button';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { X } from 'lucide-react';\n\nconst alertVariants = cva('flex items-stretch w-full gap-2 group-[.toaster]:w-(--width)', {\n  variants: {\n    variant: {\n      secondary: '',\n      primary: '',\n      destructive: '',\n      success: '',\n      info: '',\n      mono: '',\n      warning: '',\n    },\n    icon: {\n      primary: '',\n      destructive: '',\n      success: '',\n      info: '',\n      warning: '',\n    },\n    appearance: {\n      solid: '',\n      outline: '',\n      light: '',\n      stroke: 'text-foreground',\n    },\n    size: {\n      lg: 'rounded-lg p-4 gap-3 text-base [&>[data-slot=alert-icon]>svg]:size-6 *:data-slot=alert-icon:mt-0.5 [&_[data-slot=alert-close]]:mt-1',\n      md: 'rounded-lg p-3.5 gap-2.5 text-sm [&>[data-slot=alert-icon]>svg]:size-5 *:data-slot=alert-icon:mt-0 [&_[data-slot=alert-close]]:mt-0.5',\n      sm: 'rounded-md px-3 py-2.5 gap-2 text-xs [&>[data-slot=alert-icon]>svg]:size-4 *:data-alert-icon:mt-0.5 [&_[data-slot=alert-close]]:mt-0.25 [&_[data-slot=alert-close]_svg]:size-3.5',\n    },\n  },\n  compoundVariants: [\n    /* Solid */\n    {\n      variant: 'secondary',\n      appearance: 'solid',\n      className: 'bg-muted text-foreground',\n    },\n    {\n      variant: 'primary',\n      appearance: 'solid',\n      className: 'bg-primary text-primary-foreground',\n    },\n    {\n      variant: 'destructive',\n      appearance: 'solid',\n      className: 'bg-destructive text-destructive-foreground',\n    },\n    {\n      variant: 'success',\n      appearance: 'solid',\n      className:\n        'bg-[var(--color-success,var(--color-green-500))] text-[var(--color-success-foreground,var(--color-white))]',\n    },\n    {\n      variant: 'info',\n      appearance: 'solid',\n      className:\n        'bg-[var(--color-info,var(--color-violet-600))] text-[var(--color-info-foreground,var(--color-white))]',\n    },\n    {\n      variant: 'warning',\n      appearance: 'solid',\n      className:\n        'bg-[var(--color-warning,var(--color-yellow-500))] text-[var(--color-warning-foreground,var(--color-white))]',\n    },\n    {\n      variant: 'mono',\n      appearance: 'solid',\n      className: 'bg-zinc-950 text-white dark:bg-zinc-300 dark:text-black *:data-slot-[alert=close]:text-white',\n    },\n\n    /* Outline */\n    {\n      variant: 'secondary',\n      appearance: 'outline',\n      className: 'border border-border bg-background text-foreground [&_[data-slot=alert-close]]:text-foreground',\n    },\n    {\n      variant: 'primary',\n      appearance: 'outline',\n      className: 'border border-border bg-background text-primary [&_[data-slot=alert-close]]:text-foreground',\n    },\n    {\n      variant: 'destructive',\n      appearance: 'outline',\n      className: 'border border-border bg-background text-destructive [&_[data-slot=alert-close]]:text-foreground',\n    },\n    {\n      variant: 'success',\n      appearance: 'outline',\n      className:\n        'border border-border bg-background text-[var(--color-success,var(--color-green-500))] [&_[data-slot=alert-close]]:text-foreground',\n    },\n    {\n      variant: 'info',\n      appearance: 'outline',\n      className:\n        'border border-border bg-background text-[var(--color-info,var(--color-violet-600))] [&_[data-slot=alert-close]]:text-foreground',\n    },\n    {\n      variant: 'warning',\n      appearance: 'outline',\n      className:\n        'border border-border bg-background text-[var(--color-warning,var(--color-yellow-500))] [&_[data-slot=alert-close]]:text-foreground',\n    },\n    {\n      variant: 'mono',\n      appearance: 'outline',\n      className: 'border border-border bg-background text-foreground [&_[data-slot=alert-close]]:text-foreground',\n    },\n\n    /* Light */\n    {\n      variant: 'secondary',\n      appearance: 'light',\n      className: 'bg-muted border border-border text-foreground',\n    },\n    {\n      variant: 'primary',\n      appearance: 'light',\n      className:\n        'text-foreground bg-[var(--color-primary-soft,var(--color-blue-50))] border border-[var(--color-primary-alpha,var(--color-blue-100))] [&_[data-slot=alert-icon]]:text-primary dark:bg-[var(--color-primary-soft,var(--color-blue-950))] dark:border-[var(--color-primary-alpha,var(--color-blue-900))]',\n    },\n    {\n      variant: 'destructive',\n      appearance: 'light',\n      className:\n        'bg-[var(--color-destructive-soft,var(--color-red-50))] border border-[var(--color-destructive-alpha,var(--color-red-100))] text-foreground [&_[data-slot=alert-icon]]:text-destructive dark:bg-[var(--color-destructive-soft,var(--color-red-950))] dark:border-[var(--color-destructive-alpha,var(--color-red-900))] ',\n    },\n    {\n      variant: 'success',\n      appearance: 'light',\n      className:\n        'bg-[var(--color-success-soft,var(--color-green-50))] border border-[var(--color-success-alpha,var(--color-green-200))] text-foreground [&_[data-slot=alert-icon]]:text-[var(--color-success-foreground,var(--color-green-600))] dark:bg-[var(--color-success-soft,var(--color-green-950))] dark:border-[var(--color-success-alpha,var(--color-green-900))]',\n    },\n    {\n      variant: 'info',\n      appearance: 'light',\n      className:\n        'bg-[var(--color-info-soft,var(--color-violet-50))] border border-[var(--color-info-alpha,var(--color-violet-100))] text-foreground [&_[data-slot=alert-icon]]:text-[var(--color-info-foreground,var(--color-violet-600))] dark:bg-[var(--color-info-soft,var(--color-violet-950))] dark:border-[var(--color-info-alpha,var(--color-violet-900))]',\n    },\n    {\n      variant: 'warning',\n      appearance: 'light',\n      className:\n        'bg-[var(--color-warning-soft,var(--color-yellow-50))] border border-[var(--color-warning-alpha,var(--color-yellow-200))] text-foreground [&_[data-slot=alert-icon]]:text-[var(--color-warning-foreground,var(--color-yellow-600))] dark:bg-[var(--color-warning-soft,var(--color-yellow-950))] dark:border-[var(--color-warning-alpha,var(--color-yellow-900))]',\n    },\n\n    /* Mono */\n    {\n      variant: 'mono',\n      icon: 'primary',\n      className: '[&_[data-slot=alert-icon]]:text-primary',\n    },\n    {\n      variant: 'mono',\n      icon: 'warning',\n      className: '[&_[data-slot=alert-icon]]:text-[var(--color-warning-foreground,var(--color-yellow-600))]',\n    },\n    {\n      variant: 'mono',\n      icon: 'success',\n      className: '[&_[data-slot=alert-icon]]:text-[var(--color-success-foreground,var(--color-green-600))]',\n    },\n    {\n      variant: 'mono',\n      icon: 'destructive',\n      className: '[&_[data-slot=alert-icon]]:text-destructive',\n    },\n    {\n      variant: 'mono',\n      icon: 'info',\n      className: '[&_[data-slot=alert-icon]]:text-[var(--color-info-foreground,var(--color-violet-600))]',\n    },\n  ],\n  defaultVariants: {\n    variant: 'secondary',\n    appearance: 'solid',\n    size: 'md',\n  },\n});\n\ninterface AlertProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof alertVariants> {\n  close?: boolean;\n  onClose?: () => void;\n}\n\ninterface AlertIconProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof alertVariants> {}\n\nfunction Alert({ className, variant, size, icon, appearance, close = false, onClose, children, ...props }: AlertProps) {\n  return (\n    <div\n      data-slot=\"alert\"\n      role=\"alert\"\n      className={cn(alertVariants({ variant, size, icon, appearance }), className)}\n      {...props}\n    >\n      {children}\n      {close && (\n        <Button\n          size=\"sm\"\n          variant=\"inverse\"\n          mode=\"icon\"\n          onClick={onClose}\n          aria-label=\"Dismiss\"\n          data-slot=\"alert-close\"\n          className={cn('group shrink-0 size-4')}\n        >\n          <X className=\"opacity-60 group-hover:opacity-100 size-4\" />\n        </Button>\n      )}\n    </div>\n  );\n}\n\nfunction AlertTitle({ className, ...props }: React.HTMLAttributes<HTMLHeadingElement>) {\n  return <div data-slot=\"alert-title\" className={cn('grow tracking-tight', className)} {...props} />;\n}\n\nfunction AlertIcon({ children, className, ...props }: AlertIconProps) {\n  return (\n    <div data-slot=\"alert-icon\" className={cn('shrink-0', className)} {...props}>\n      {children}\n    </div>\n  );\n}\n\nfunction AlertToolbar({ children, className, ...props }: AlertIconProps) {\n  return (\n    <div data-slot=\"alert-toolbar\" className={cn(className)} {...props}>\n      {children}\n    </div>\n  );\n}\n\nfunction AlertDescription({ className, ...props }: React.HTMLAttributes<HTMLParagraphElement>) {\n  return (\n    <div\n      data-slot=\"alert-description\"\n      className={cn('text-sm [&_p]:leading-relaxed [&_p]:mb-2', className)}\n      {...props}\n    />\n  );\n}\n\nfunction AlertContent({ className, ...props }: React.HTMLAttributes<HTMLParagraphElement>) {\n  return (\n    <div\n      data-slot=\"alert-content\"\n      className={cn('space-y-2 [&_[data-slot=alert-title]]:font-semibold', className)}\n      {...props}\n    />\n  );\n}\n\nexport { Alert, AlertContent, AlertDescription, AlertIcon, AlertTitle, AlertToolbar };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/avatar.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport { Avatar as AvatarPrimitive } from 'radix-ui';\n\nconst avatarStatusVariants = cva('flex items-center rounded-full size-2 border-2 border-background', {\n  variants: {\n    variant: {\n      online: 'bg-green-600',\n      offline: 'bg-zinc-600 dark:bg-zinc-300',\n      busy: 'bg-yellow-600',\n      away: 'bg-blue-600',\n    },\n  },\n  defaultVariants: {\n    variant: 'online',\n  },\n});\n\nfunction Avatar({ className, ...props }: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root data-slot=\"avatar\" className={cn('relative flex shrink-0 size-10', className)} {...props} />\n  );\n}\n\nfunction AvatarImage({ className, ...props }: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <div className={cn('relative overflow-hidden rounded-full', className)}>\n      <AvatarPrimitive.Image data-slot=\"avatar-image\" className={cn('aspect-square h-full w-full')} {...props} />\n    </div>\n  );\n}\n\nfunction AvatarFallback({ className, ...props }: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        'flex h-full w-full items-center justify-center rounded-full border border-border bg-accent text-accent-foreground text-xs',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction AvatarIndicator({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      data-slot=\"avatar-indicator\"\n      className={cn('absolute flex size-6 items-center justify-center', className)}\n      {...props}\n    />\n  );\n}\n\nfunction AvatarStatus({\n  className,\n  variant,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof avatarStatusVariants>) {\n  return <div data-slot=\"avatar-status\" className={cn(avatarStatusVariants({ variant }), className)} {...props} />;\n}\n\nexport { Avatar, AvatarFallback, AvatarImage, AvatarIndicator, AvatarStatus, avatarStatusVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/badge.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { Slot as SlotPrimitive } from 'radix-ui';\n\nexport interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {\n  asChild?: boolean;\n  dotClassName?: string;\n  disabled?: boolean;\n}\n\nexport interface BadgeButtonProps\n  extends React.ButtonHTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeButtonVariants> {\n  asChild?: boolean;\n}\n\nexport type BadgeDotProps = React.HTMLAttributes<HTMLSpanElement>;\n\nconst badgeVariants = cva(\n  'inline-flex items-center justify-center border border-transparent font-medium focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2 [&_svg]:-ms-px [&_svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        primary: 'bg-primary text-primary-foreground',\n        secondary: 'bg-secondary text-secondary-foreground',\n        success:\n          'bg-[var(--color-success-accent,var(--color-green-500))] text-[var(--color-success-foreground,var(--color-white))]',\n        warning:\n          'bg-[var(--color-warning-accent,var(--color-yellow-500))] text-[var(--color-warning-foreground,var(--color-white))]',\n        info: 'bg-[var(--color-info-accent,var(--color-violet-500))] text-[var(--color-info-foreground,var(--color-white))]',\n        outline: 'bg-transparent border border-border text-secondary-foreground',\n        destructive: 'bg-destructive text-destructive-foreground',\n      },\n      appearance: {\n        default: '',\n        light: '',\n        outline: '',\n        ghost: 'border-transparent bg-transparent',\n      },\n      disabled: {\n        true: 'opacity-50 pointer-events-none',\n      },\n      size: {\n        lg: 'rounded-md px-[0.5rem] h-7 min-w-7 gap-1.5 text-xs [&_svg]:size-3.5',\n        md: 'rounded-md px-[0.45rem] h-6 min-w-6 gap-1.5 text-xs [&_svg]:size-3.5 ',\n        sm: 'rounded-sm px-[0.325rem] h-5 min-w-5 gap-1 text-[0.6875rem] leading-[0.75rem] [&_svg]:size-3',\n        xs: 'rounded-sm px-[0.25rem] h-4 min-w-4 gap-1 text-[0.625rem] leading-[0.5rem] [&_svg]:size-3',\n      },\n      shape: {\n        default: '',\n        circle: 'rounded-full',\n      },\n    },\n    compoundVariants: [\n      /* Light */\n      {\n        variant: 'primary',\n        appearance: 'light',\n        className:\n          'text-[var(--color-primary-accent,var(--color-blue-700))] bg-[var(--color-primary-soft,var(--color-blue-50))] dark:bg-[var(--color-primary-soft,var(--color-blue-950))] dark:text-[var(--color-primary-soft,var(--color-blue-600))]',\n      },\n      {\n        variant: 'secondary',\n        appearance: 'light',\n        className: 'bg-secondary dark:bg-secondary/50 text-secondary-foreground',\n      },\n      {\n        variant: 'success',\n        appearance: 'light',\n        className:\n          'text-[var(--color-success-accent,var(--color-green-800))] bg-[var(--color-success-soft,var(--color-green-100))] dark:bg-[var(--color-success-soft,var(--color-green-950))] dark:text-[var(--color-success-soft,var(--color-green-600))]',\n      },\n      {\n        variant: 'warning',\n        appearance: 'light',\n        className:\n          'text-[var(--color-warning-accent,var(--color-yellow-700))] bg-[var(--color-warning-soft,var(--color-yellow-100))] dark:bg-[var(--color-warning-soft,var(--color-yellow-950))] dark:text-[var(--color-warning-soft,var(--color-yellow-600))]',\n      },\n      {\n        variant: 'info',\n        appearance: 'light',\n        className:\n          'text-[var(--color-info-accent,var(--color-violet-700))] bg-[var(--color-info-soft,var(--color-violet-100))] dark:bg-[var(--color-info-soft,var(--color-violet-950))] dark:text-[var(--color-info-soft,var(--color-violet-400))]',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'light',\n        className:\n          'text-[var(--color-destructive-accent,var(--color-red-700))] bg-[var(--color-destructive-soft,var(--color-red-50))] dark:bg-[var(--color-destructive-soft,var(--color-red-950))] dark:text-[var(--color-destructive-soft,var(--color-red-600))]',\n      },\n      /* Outline */\n      {\n        variant: 'primary',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-primary-accent,var(--color-blue-700))] border-[var(--color-primary-soft,var(--color-blue-100))] bg-[var(--color-primary-soft,var(--color-blue-50))] dark:bg-[var(--color-primary-soft,var(--color-blue-950))] dark:border-[var(--color-primary-soft,var(--color-blue-900))] dark:text-[var(--color-primary-soft,var(--color-blue-600))]',\n      },\n      {\n        variant: 'success',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-success-accent,var(--color-green-700))] border-[var(--color-success-soft,var(--color-green-200))] bg-[var(--color-success-soft,var(--color-green-50))] dark:bg-[var(--color-success-soft,var(--color-green-950))] dark:border-[var(--color-success-soft,var(--color-green-900))] dark:text-[var(--color-success-soft,var(--color-green-600))]',\n      },\n      {\n        variant: 'warning',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-warning-accent,var(--color-yellow-700))] border-[var(--color-warning-soft,var(--color-yellow-200))] bg-[var(--color-warning-soft,var(--color-yellow-50))] dark:bg-[var(--color-warning-soft,var(--color-yellow-950))] dark:border-[var(--color-warning-soft,var(--color-yellow-900))] dark:text-[var(--color-warning-soft,var(--color-yellow-600))]',\n      },\n      {\n        variant: 'info',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-info-accent,var(--color-violet-700))] border-[var(--color-info-soft,var(--color-violet-100))] bg-[var(--color-info-soft,var(--color-violet-50))] dark:bg-[var(--color-info-soft,var(--color-violet-950))] dark:border-[var(--color-info-soft,var(--color-violet-900))] dark:text-[var(--color-info-soft,var(--color-violet-400))]',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-destructive-accent,var(--color-red-700))] border-[var(--color-destructive-soft,var(--color-red-100))] bg-[var(--color-destructive-soft,var(--color-red-50))] dark:bg-[var(--color-destructive-soft,var(--color-red-950))] dark:border-[var(--color-destructive-soft,var(--color-red-900))] dark:text-[var(--color-destructive-soft,var(--color-red-600))]',\n      },\n      /* Ghost */\n      {\n        variant: 'primary',\n        appearance: 'ghost',\n        className: 'text-primary',\n      },\n      {\n        variant: 'secondary',\n        appearance: 'ghost',\n        className: 'text-secondary-foreground',\n      },\n      {\n        variant: 'success',\n        appearance: 'ghost',\n        className: 'text-[var(--color-success-accent,var(--color-green-500))]',\n      },\n      {\n        variant: 'warning',\n        appearance: 'ghost',\n        className: 'text-[var(--color-warning-accent,var(--color-yellow-500))]',\n      },\n      {\n        variant: 'info',\n        appearance: 'ghost',\n        className: 'text-[var(--color-info-accent,var(--color-violet-500))]',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'ghost',\n        className: 'text-destructive',\n      },\n\n      { size: 'lg', appearance: 'ghost', className: 'px-0' },\n      { size: 'md', appearance: 'ghost', className: 'px-0' },\n      { size: 'sm', appearance: 'ghost', className: 'px-0' },\n      { size: 'xs', appearance: 'ghost', className: 'px-0' },\n    ],\n    defaultVariants: {\n      variant: 'primary',\n      appearance: 'default',\n      size: 'md',\n    },\n  },\n);\n\nconst badgeButtonVariants = cva(\n  'cursor-pointer transition-all inline-flex items-center justify-center leading-none size-3.5 [&>svg]:opacity-100! [&>svg]:size-3.5! p-0 rounded-md -me-0.5 opacity-60 hover:opacity-100',\n  {\n    variants: {\n      variant: {\n        default: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nfunction Badge({\n  className,\n  variant,\n  size,\n  appearance,\n  shape,\n  asChild = false,\n  disabled,\n  ...props\n}: React.ComponentProps<'span'> & VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? SlotPrimitive.Slot : 'span';\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant, size, appearance, shape, disabled }), className)}\n      {...props}\n    />\n  );\n}\n\nfunction BadgeButton({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'button'> & VariantProps<typeof badgeButtonVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? SlotPrimitive.Slot : 'span';\n  return (\n    <Comp\n      data-slot=\"badge-button\"\n      className={cn(badgeButtonVariants({ variant, className }))}\n      role=\"button\"\n      {...props}\n    />\n  );\n}\n\nfunction BadgeDot({ className, ...props }: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"badge-dot\"\n      className={cn('size-1.5 rounded-full bg-[currentColor] opacity-75', className)}\n      {...props}\n    />\n  );\n}\n\nexport { Badge, BadgeButton, BadgeDot, badgeVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/card.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\n// Define CardContext\ntype CardContextType = {\n  variant: 'default' | 'accent';\n};\n\nconst CardContext = React.createContext<CardContextType>({\n  variant: 'default', // Default value\n});\n\n// Hook to use CardContext\nconst useCardContext = () => {\n  const context = React.useContext(CardContext);\n  if (!context) {\n    throw new Error('useCardContext must be used within a Card component');\n  }\n  return context;\n};\n\n// Variants\nconst cardVariants = cva('flex flex-col items-stretch text-card-foreground rounded-xl', {\n  variants: {\n    variant: {\n      default: 'bg-card border border-border shadow-xs black/5',\n      accent: 'bg-muted shadow-xs p-1',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardHeaderVariants = cva('flex items-center justify-between flex-wrap px-5 min-h-14 gap-2.5', {\n  variants: {\n    variant: {\n      default: 'border-b border-border',\n      accent: '',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardContentVariants = cva('grow p-5', {\n  variants: {\n    variant: {\n      default: '',\n      accent: 'bg-card rounded-t-xl [&:last-child]:rounded-b-xl',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardTableVariants = cva('grid grow', {\n  variants: {\n    variant: {\n      default: '',\n      accent: 'bg-card rounded-xl',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardFooterVariants = cva('flex items-center px-5 min-h-14', {\n  variants: {\n    variant: {\n      default: 'border-t border-border',\n      accent: 'bg-card rounded-b-xl mt-[2px]',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\n// Card Component\nfunction Card({\n  className,\n  variant = 'default',\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof cardVariants>) {\n  return (\n    <CardContext.Provider value={{ variant: variant || 'default' }}>\n      <div data-slot=\"card\" className={cn(cardVariants({ variant }), className)} {...props} />\n    </CardContext.Provider>\n  );\n}\n\n// CardHeader Component\nfunction CardHeader({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-header\" className={cn(cardHeaderVariants({ variant }), className)} {...props} />;\n}\n\n// CardContent Component\nfunction CardContent({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-content\" className={cn(cardContentVariants({ variant }), className)} {...props} />;\n}\n\n// CardTable Component\nfunction CardTable({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-table\" className={cn(cardTableVariants({ variant }), className)} {...props} />;\n}\n\n// CardFooter Component\nfunction CardFooter({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-footer\" className={cn(cardFooterVariants({ variant }), className)} {...props} />;\n}\n\n// Other Components\nfunction CardHeading({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-heading\" className={cn('space-y-1', className)} {...props} />;\n}\n\nfunction CardToolbar({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-toolbar\" className={cn('flex items-center gap-2.5', className)} {...props} />;\n}\n\nfunction CardTitle({ className, ...props }: React.HTMLAttributes<HTMLHeadingElement>) {\n  return (\n    <h3\n      data-slot=\"card-title\"\n      className={cn('text-base font-semibold leading-none tracking-tight', className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-description\" className={cn('text-sm text-muted-foreground', className)} {...props} />;\n}\n\n// Exports\nexport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardHeading, CardTable, CardTitle, CardToolbar };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/checkbox.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport { Check, Minus } from 'lucide-react';\nimport { Checkbox as CheckboxPrimitive } from 'radix-ui';\n\n// Define the variants for the Checkbox using cva.\nconst checkboxVariants = cva(\n  `\n    group peer bg-background shrink-0 rounded-md border border-input ring-offset-background focus-visible:outline-none \n    focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 \n    aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n    [[data-invalid=true]_&]:border-destructive/60 [[data-invalid=true]_&]:ring-destructive/10  dark:[[data-invalid=true]_&]:border-destructive dark:[[data-invalid=true]_&]:ring-destructive/20,\n    data-[state=checked]:bg-primary data-[state=checked]:border-primary data-[state=checked]:text-primary-foreground data-[state=indeterminate]:bg-primary data-[state=indeterminate]:border-primary data-[state=indeterminate]:text-primary-foreground\n    `,\n  {\n    variants: {\n      size: {\n        sm: 'size-4.5 [&_svg]:size-3',\n        md: 'size-5 [&_svg]:size-3.5',\n        lg: 'size-5.5 [&_svg]:size-4',\n      },\n    },\n    defaultVariants: {\n      size: 'md',\n    },\n  },\n);\n\nfunction Checkbox({\n  className,\n  size,\n  ...props\n}: React.ComponentProps<typeof CheckboxPrimitive.Root> & VariantProps<typeof checkboxVariants>) {\n  return (\n    <CheckboxPrimitive.Root data-slot=\"checkbox\" className={cn(checkboxVariants({ size }), className)} {...props}>\n      <CheckboxPrimitive.Indicator className={cn('flex items-center justify-center text-current')}>\n        <Check className=\"group-data-[state=indeterminate]:hidden\" />\n        <Minus className=\"hidden group-data-[state=indeterminate]:block\" />\n      </CheckboxPrimitive.Indicator>\n    </CheckboxPrimitive.Root>\n  );\n}\n\nexport { Checkbox };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/data-grid.tsx",
      "content": "'use client';\n\nimport { createContext, ReactNode, useContext } from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { ColumnFiltersState, RowData, SortingState, Table } from '@tanstack/react-table';\n\ndeclare module '@tanstack/react-table' {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface ColumnMeta<TData extends RowData, TValue> {\n    headerTitle?: string;\n    headerClassName?: string;\n    cellClassName?: string;\n    skeleton?: ReactNode;\n    expandedContent?: (row: TData) => ReactNode;\n  }\n}\n\nexport type DataGridApiFetchParams = {\n  pageIndex: number;\n  pageSize: number;\n  sorting?: SortingState;\n  filters?: ColumnFiltersState;\n  searchQuery?: string;\n};\n\nexport type DataGridApiResponse<T> = {\n  data: T[];\n  empty: boolean;\n  pagination: {\n    total: number;\n    page: number;\n  };\n};\n\nexport interface DataGridContextProps<TData extends object> {\n  props: DataGridProps<TData>;\n  table: Table<TData>;\n  recordCount: number;\n  isLoading: boolean;\n}\n\nexport type DataGridRequestParams = {\n  pageIndex: number;\n  pageSize: number;\n  sorting?: SortingState;\n  columnFilters?: ColumnFiltersState;\n};\n\nexport interface DataGridProps<TData extends object> {\n  className?: string;\n  table?: Table<TData>;\n  recordCount: number;\n  children?: ReactNode;\n  onRowClick?: (row: TData) => void;\n  isLoading?: boolean;\n  loadingMode?: 'skeleton' | 'spinner';\n  loadingMessage?: ReactNode | string;\n  emptyMessage?: ReactNode | string;\n  tableLayout?: {\n    dense?: boolean;\n    cellBorder?: boolean;\n    rowBorder?: boolean;\n    rowRounded?: boolean;\n    stripped?: boolean;\n    headerBackground?: boolean;\n    headerBorder?: boolean;\n    headerSticky?: boolean;\n    width?: 'auto' | 'fixed';\n    columnsVisibility?: boolean;\n    columnsResizable?: boolean;\n    columnsPinnable?: boolean;\n    columnsMovable?: boolean;\n    columnsDraggable?: boolean;\n    rowsDraggable?: boolean;\n  };\n  tableClassNames?: {\n    base?: string;\n    header?: string;\n    headerRow?: string;\n    headerSticky?: string;\n    body?: string;\n    bodyRow?: string;\n    footer?: string;\n    edgeCell?: string;\n  };\n}\n\nconst DataGridContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  DataGridContextProps<any> | undefined\n>(undefined);\n\nfunction useDataGrid() {\n  const context = useContext(DataGridContext);\n  if (!context) {\n    throw new Error('useDataGrid must be used within a DataGridProvider');\n  }\n  return context;\n}\n\nfunction DataGridProvider<TData extends object>({\n  children,\n  table,\n  ...props\n}: DataGridProps<TData> & { table: Table<TData> }) {\n  return (\n    <DataGridContext.Provider\n      value={{\n        props,\n        table,\n        recordCount: props.recordCount,\n        isLoading: props.isLoading || false,\n      }}\n    >\n      {children}\n    </DataGridContext.Provider>\n  );\n}\n\nfunction DataGrid<TData extends object>({ children, table, ...props }: DataGridProps<TData>) {\n  const defaultProps: Partial<DataGridProps<TData>> = {\n    loadingMode: 'skeleton',\n    tableLayout: {\n      dense: false,\n      cellBorder: false,\n      rowBorder: true,\n      rowRounded: false,\n      stripped: false,\n      headerSticky: false,\n      headerBackground: true,\n      headerBorder: true,\n      width: 'fixed',\n      columnsVisibility: false,\n      columnsResizable: false,\n      columnsPinnable: false,\n      columnsMovable: false,\n      columnsDraggable: false,\n      rowsDraggable: false,\n    },\n    tableClassNames: {\n      base: '',\n      header: '',\n      headerRow: '',\n      headerSticky: 'sticky top-0 z-10 bg-background/90 backdrop-blur-xs',\n      body: '',\n      bodyRow: '',\n      footer: '',\n      edgeCell: '',\n    },\n  };\n\n  const mergedProps: DataGridProps<TData> = {\n    ...defaultProps,\n    ...props,\n    tableLayout: {\n      ...defaultProps.tableLayout,\n      ...(props.tableLayout || {}),\n    },\n    tableClassNames: {\n      ...defaultProps.tableClassNames,\n      ...(props.tableClassNames || {}),\n    },\n  };\n\n  // Ensure table is provided\n  if (!table) {\n    throw new Error('DataGrid requires a \"table\" prop');\n  }\n\n  return (\n    <DataGridProvider table={table} {...mergedProps}>\n      {children}\n    </DataGridProvider>\n  );\n}\n\nfunction DataGridContainer({\n  children,\n  className,\n  border = true,\n}: {\n  children: ReactNode;\n  className?: string;\n  border?: boolean;\n}) {\n  return (\n    <div data-slot=\"data-grid\" className={cn('grid w-full', border && 'border border-border rounded-lg', className)}>\n      {children}\n    </div>\n  );\n}\n\nexport { useDataGrid, DataGridProvider, DataGrid, DataGridContainer };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/data-grid-column-header.tsx",
      "content": "import { HTMLAttributes, ReactNode } from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Button } from '@/registry/default/ui/button';\nimport { useDataGrid } from '@/registry/default/ui/data-grid';\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuPortal,\n  DropdownMenuSeparator,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from '@/registry/default/ui/dropdown-menu';\nimport { Column } from '@tanstack/react-table';\nimport {\n  ArrowDown,\n  ArrowLeft,\n  ArrowLeftToLine,\n  ArrowRight,\n  ArrowRightToLine,\n  ArrowUp,\n  Check,\n  ChevronsUpDown,\n  PinOff,\n  Settings2,\n} from 'lucide-react';\n\ninterface DataGridColumnHeaderProps<TData, TValue> extends HTMLAttributes<HTMLDivElement> {\n  column: Column<TData, TValue>;\n  title?: string;\n  icon?: ReactNode;\n  pinnable?: boolean;\n  filter?: ReactNode;\n  visibility?: boolean;\n}\n\nfunction DataGridColumnHeader<TData, TValue>({\n  column,\n  title = '',\n  icon,\n  className,\n  filter,\n  visibility = false,\n}: DataGridColumnHeaderProps<TData, TValue>) {\n  const { isLoading, table, props, recordCount } = useDataGrid();\n\n  const moveColumn = (direction: 'left' | 'right') => {\n    const currentOrder = [...table.getState().columnOrder]; // Get current column order\n    const currentIndex = currentOrder.indexOf(column.id); // Get current index of the column\n\n    if (direction === 'left' && currentIndex > 0) {\n      // Move column left\n      const newOrder = [...currentOrder];\n      const [movedColumn] = newOrder.splice(currentIndex, 1);\n      newOrder.splice(currentIndex - 1, 0, movedColumn);\n      table.setColumnOrder(newOrder); // Update column order\n    }\n\n    if (direction === 'right' && currentIndex < currentOrder.length - 1) {\n      // Move column right\n      const newOrder = [...currentOrder];\n      const [movedColumn] = newOrder.splice(currentIndex, 1);\n      newOrder.splice(currentIndex + 1, 0, movedColumn);\n      table.setColumnOrder(newOrder); // Update column order\n    }\n  };\n\n  const canMove = (direction: 'left' | 'right'): boolean => {\n    const currentOrder = table.getState().columnOrder;\n    const currentIndex = currentOrder.indexOf(column.id);\n    if (direction === 'left') {\n      return currentIndex > 0;\n    } else {\n      return currentIndex < currentOrder.length - 1;\n    }\n  };\n\n  const headerLabel = () => {\n    return (\n      <div\n        className={cn(\n          'text-accent-foreground font-normal inline-flex h-full items-center gap-1.5 text-[0.8125rem] leading-[calc(1.125/0.8125)] [&_svg]:size-3.5 [&_svg]:opacity-60',\n          className,\n        )}\n      >\n        {icon && icon}\n        {title}\n      </div>\n    );\n  };\n\n  const headerButton = () => {\n    return (\n      <Button\n        variant=\"ghost\"\n        className={cn(\n          'text-secondary-foreground rounded-md font-normal -ms-2 px-2 h-7 hover:bg-secondary data-[state=open]:bg-secondary hover:text-foreground data-[state=open]:text-foreground',\n          className,\n        )}\n        disabled={isLoading || recordCount === 0}\n        onClick={() => {\n          const isSorted = column.getIsSorted();\n          if (isSorted === 'asc') {\n            column.toggleSorting(true);\n          } else if (isSorted === 'desc') {\n            column.clearSorting();\n          } else {\n            column.toggleSorting(false);\n          }\n        }}\n      >\n        {icon && icon}\n        {title}\n\n        {column.getCanSort() &&\n          (column.getIsSorted() === 'desc' ? (\n            <ArrowDown className=\"size-[0.7rem]! mt-px\" />\n          ) : column.getIsSorted() === 'asc' ? (\n            <ArrowUp className=\"size-[0.7rem]! mt-px\" />\n          ) : (\n            <ChevronsUpDown className=\"size-[0.7rem]! mt-px\" />\n          ))}\n      </Button>\n    );\n  };\n\n  const headerPin = () => {\n    return (\n      <Button\n        mode=\"icon\"\n        size=\"sm\"\n        variant=\"ghost\"\n        className=\"-me-1 size-7 rounded-md\"\n        onClick={() => column.pin(false)}\n        aria-label={`Unpin ${title} column`}\n        title={`Unpin ${title} column`}\n      >\n        <PinOff className=\"size-3.5! opacity-50!\" aria-hidden=\"true\" />\n      </Button>\n    );\n  };\n\n  const headerControls = () => {\n    return (\n      <div className=\"flex items-center h-full gap-1.5 justify-between\">\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>{headerButton()}</DropdownMenuTrigger>\n          <DropdownMenuContent className=\"w-40\" align=\"start\">\n            {filter && <DropdownMenuLabel>{filter}</DropdownMenuLabel>}\n\n            {filter && (column.getCanSort() || column.getCanPin() || visibility) && <DropdownMenuSeparator />}\n\n            {column.getCanSort() && (\n              <>\n                <DropdownMenuItem\n                  onClick={() => {\n                    if (column.getIsSorted() === 'asc') {\n                      column.clearSorting();\n                    } else {\n                      column.toggleSorting(false);\n                    }\n                  }}\n                  disabled={!column.getCanSort()}\n                >\n                  <ArrowUp className=\"size-3.5!\" />\n                  <span className=\"grow\">Asc</span>\n                  {column.getIsSorted() === 'asc' && <Check className=\"size-4 opacity-100! text-primary\" />}\n                </DropdownMenuItem>\n                <DropdownMenuItem\n                  onClick={() => {\n                    if (column.getIsSorted() === 'desc') {\n                      column.clearSorting();\n                    } else {\n                      column.toggleSorting(true);\n                    }\n                  }}\n                  disabled={!column.getCanSort()}\n                >\n                  <ArrowDown className=\"size-3.5!\" />\n                  <span className=\"grow\">Desc</span>\n                  {column.getIsSorted() === 'desc' && <Check className=\"size-4 opacity-100! text-primary\" />}\n                </DropdownMenuItem>\n              </>\n            )}\n\n            {(filter || column.getCanSort()) && (column.getCanSort() || column.getCanPin() || visibility) && (\n              <DropdownMenuSeparator />\n            )}\n\n            {props.tableLayout?.columnsPinnable && column.getCanPin() && (\n              <>\n                <DropdownMenuItem onClick={() => column.pin(column.getIsPinned() === 'left' ? false : 'left')}>\n                  <ArrowLeftToLine className=\"size-3.5!\" aria-hidden=\"true\" />\n                  <span className=\"grow\">Pin to left</span>\n                  {column.getIsPinned() === 'left' && <Check className=\"size-4 opacity-100! text-primary\" />}\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => column.pin(column.getIsPinned() === 'right' ? false : 'right')}>\n                  <ArrowRightToLine className=\"size-3.5!\" aria-hidden=\"true\" />\n                  <span className=\"grow\">Pin to right</span>\n                  {column.getIsPinned() === 'right' && <Check className=\"size-4 opacity-100! text-primary\" />}\n                </DropdownMenuItem>\n              </>\n            )}\n\n            {props.tableLayout?.columnsMovable && (\n              <>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem\n                  onClick={() => moveColumn('left')}\n                  disabled={!canMove('left') || column.getIsPinned() !== false}\n                >\n                  <ArrowLeft className=\"size-3.5!\" aria-hidden=\"true\" />\n                  <span>Move to Left</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem\n                  onClick={() => moveColumn('right')}\n                  disabled={!canMove('right') || column.getIsPinned() !== false}\n                >\n                  <ArrowRight className=\"size-3.5!\" aria-hidden=\"true\" />\n                  <span>Move to Right</span>\n                </DropdownMenuItem>\n              </>\n            )}\n\n            {props.tableLayout?.columnsVisibility &&\n              visibility &&\n              (column.getCanSort() || column.getCanPin() || filter) && <DropdownMenuSeparator />}\n\n            {props.tableLayout?.columnsVisibility && visibility && (\n              <DropdownMenuSub>\n                <DropdownMenuSubTrigger>\n                  <Settings2 className=\"size-3.5!\" />\n                  <span>Columns</span>\n                </DropdownMenuSubTrigger>\n                <DropdownMenuPortal>\n                  <DropdownMenuSubContent>\n                    {table\n                      .getAllColumns()\n                      .filter((col) => typeof col.accessorFn !== 'undefined' && col.getCanHide())\n                      .map((col) => {\n                        return (\n                          <DropdownMenuCheckboxItem\n                            key={col.id}\n                            checked={col.getIsVisible()}\n                            onSelect={(event) => event.preventDefault()}\n                            onCheckedChange={(value) => col.toggleVisibility(!!value)}\n                            className=\"capitalize\"\n                          >\n                            {col.columnDef.meta?.headerTitle || col.id}\n                          </DropdownMenuCheckboxItem>\n                        );\n                      })}\n                  </DropdownMenuSubContent>\n                </DropdownMenuPortal>\n              </DropdownMenuSub>\n            )}\n          </DropdownMenuContent>\n        </DropdownMenu>\n        {props.tableLayout?.columnsPinnable && column.getCanPin() && column.getIsPinned() && headerPin()}\n      </div>\n    );\n  };\n\n  if (\n    props.tableLayout?.columnsMovable ||\n    (props.tableLayout?.columnsVisibility && visibility) ||\n    (props.tableLayout?.columnsPinnable && column.getCanPin()) ||\n    filter\n  ) {\n    return headerControls();\n  }\n\n  if (column.getCanSort() || (props.tableLayout?.columnsResizable && column.getCanResize())) {\n    return <div className=\"flex items-center h-full\">{headerButton()}</div>;\n  }\n\n  return headerLabel();\n}\n\nexport { DataGridColumnHeader, type DataGridColumnHeaderProps };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/data-grid-pagination.tsx",
      "content": "import { ReactNode } from 'react';\nimport { Button } from '@/registry/default/ui/button';\nimport { useDataGrid } from '@/registry/default/ui/data-grid';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/registry/default/ui/select';\nimport { Skeleton } from '@/registry/default/ui/skeleton';\nimport { ChevronLeftIcon, ChevronRightIcon } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface DataGridPaginationProps {\n  sizes?: number[];\n  sizesInfo?: string;\n  sizesLabel?: string;\n  sizesDescription?: string;\n  sizesSkeleton?: ReactNode;\n  more?: boolean;\n  moreLimit?: number;\n  info?: string;\n  infoSkeleton?: ReactNode;\n  className?: string;\n}\n\nfunction DataGridPagination(props: DataGridPaginationProps) {\n  const { table, recordCount, isLoading } = useDataGrid();\n\n  const defaultProps: Partial<DataGridPaginationProps> = {\n    sizes: [5, 10, 25, 50, 100],\n    sizesLabel: 'Show',\n    sizesDescription: 'per page',\n    sizesSkeleton: <Skeleton className=\"h-8 w-44\" />,\n    moreLimit: 5,\n    more: false,\n    info: '{from} - {to} of {count}',\n    infoSkeleton: <Skeleton className=\"h-8 w-60\" />,\n  };\n\n  const mergedProps: DataGridPaginationProps = { ...defaultProps, ...props };\n\n  const btnBaseClasses = 'size-7 p-0 text-sm';\n  const btnArrowClasses = btnBaseClasses + ' rtl:transform rtl:rotate-180';\n  const pageIndex = table.getState().pagination.pageIndex;\n  const pageSize = table.getState().pagination.pageSize;\n  const from = pageIndex * pageSize + 1;\n  const to = Math.min((pageIndex + 1) * pageSize, recordCount);\n  const pageCount = table.getPageCount();\n\n  // Replace placeholders in paginationInfo\n  const paginationInfo = mergedProps?.info\n    ? mergedProps.info\n        .replace('{from}', from.toString())\n        .replace('{to}', to.toString())\n        .replace('{count}', recordCount.toString())\n    : `${from} - ${to} of ${recordCount}`;\n\n  // Pagination limit logic\n  const paginationMoreLimit = mergedProps?.moreLimit || 5;\n\n  // Determine the start and end of the pagination group\n  const currentGroupStart = Math.floor(pageIndex / paginationMoreLimit) * paginationMoreLimit;\n  const currentGroupEnd = Math.min(currentGroupStart + paginationMoreLimit, pageCount);\n\n  // Render page buttons based on the current group\n  const renderPageButtons = () => {\n    const buttons = [];\n    for (let i = currentGroupStart; i < currentGroupEnd; i++) {\n      buttons.push(\n        <Button\n          key={i}\n          size=\"sm\"\n          mode=\"icon\"\n          variant=\"ghost\"\n          className={cn(btnBaseClasses, 'text-muted-foreground', {\n            'bg-accent text-accent-foreground': pageIndex === i,\n          })}\n          onClick={() => {\n            if (pageIndex !== i) {\n              table.setPageIndex(i);\n            }\n          }}\n        >\n          {i + 1}\n        </Button>,\n      );\n    }\n    return buttons;\n  };\n\n  // Render a \"previous\" ellipsis button if there are previous pages to show\n  const renderEllipsisPrevButton = () => {\n    if (currentGroupStart > 0) {\n      return (\n        <Button\n          size=\"sm\"\n          mode=\"icon\"\n          className={btnBaseClasses}\n          variant=\"ghost\"\n          onClick={() => table.setPageIndex(currentGroupStart - 1)}\n        >\n          ...\n        </Button>\n      );\n    }\n    return null;\n  };\n\n  // Render a \"next\" ellipsis button if there are more pages to show after the current group\n  const renderEllipsisNextButton = () => {\n    if (currentGroupEnd < pageCount) {\n      return (\n        <Button\n          className={btnBaseClasses}\n          variant=\"ghost\"\n          size=\"sm\"\n          mode=\"icon\"\n          onClick={() => table.setPageIndex(currentGroupEnd)}\n        >\n          ...\n        </Button>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div\n      data-slot=\"data-grid-pagination\"\n      className={cn(\n        'flex flex-wrap flex-col sm:flex-row justify-between items-center gap-2.5 py-2.5 sm:py-0 grow',\n        mergedProps?.className,\n      )}\n    >\n      <div className=\"flex flex-wrap items-center space-x-2.5 pb-2.5 sm:pb-0 order-2 sm:order-1\">\n        {isLoading ? (\n          mergedProps?.sizesSkeleton\n        ) : (\n          <>\n            <div className=\"text-sm text-muted-foreground\">Rows per page</div>\n            <Select\n              value={`${pageSize}`}\n              indicatorPosition=\"right\"\n              onValueChange={(value) => {\n                const newPageSize = Number(value);\n                table.setPageSize(newPageSize);\n              }}\n            >\n              <SelectTrigger className=\"w-fit\" size=\"sm\">\n                <SelectValue placeholder={`${pageSize}`} />\n              </SelectTrigger>\n              <SelectContent side=\"top\" className=\"min-w-[50px]\">\n                {mergedProps?.sizes?.map((size: number) => (\n                  <SelectItem key={size} value={`${size}`}>\n                    {size}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </>\n        )}\n      </div>\n      <div className=\"flex flex-col sm:flex-row justify-center sm:justify-end items-center gap-2.5 pt-2.5 sm:pt-0 order-1 sm:order-2\">\n        {isLoading ? (\n          mergedProps?.infoSkeleton\n        ) : (\n          <>\n            <div className=\"text-sm text-muted-foreground text-nowrap order-2 sm:order-1\">{paginationInfo}</div>\n            {pageCount > 1 && (\n              <div className=\"flex items-center space-x-1 order-1 sm:order-2\">\n                <Button\n                  size=\"sm\"\n                  mode=\"icon\"\n                  variant=\"ghost\"\n                  className={btnArrowClasses}\n                  onClick={() => table.previousPage()}\n                  disabled={!table.getCanPreviousPage()}\n                >\n                  <span className=\"sr-only\">Go to previous page</span>\n                  <ChevronLeftIcon className=\"size-4\" />\n                </Button>\n\n                {renderEllipsisPrevButton()}\n\n                {renderPageButtons()}\n\n                {renderEllipsisNextButton()}\n\n                <Button\n                  size=\"sm\"\n                  mode=\"icon\"\n                  variant=\"ghost\"\n                  className={btnArrowClasses}\n                  onClick={() => table.nextPage()}\n                  disabled={!table.getCanNextPage()}\n                >\n                  <span className=\"sr-only\">Go to next page</span>\n                  <ChevronRightIcon className=\"size-4\" />\n                </Button>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport { DataGridPagination, type DataGridPaginationProps };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/data-grid-table.tsx",
      "content": "import * as React from 'react';\nimport { CSSProperties, Fragment, ReactNode } from 'react';\nimport { Checkbox } from '@/registry/default/ui/checkbox';\nimport { useDataGrid } from '@/registry/default/ui/data-grid';\nimport { Cell, Column, flexRender, Header, HeaderGroup, Row } from '@tanstack/react-table';\nimport { cva } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\n\nconst headerCellSpacingVariants = cva('', {\n  variants: {\n    size: {\n      dense: 'px-2.5 h-8',\n      default: 'px-4',\n    },\n  },\n  defaultVariants: {\n    size: 'default',\n  },\n});\n\nconst bodyCellSpacingVariants = cva('', {\n  variants: {\n    size: {\n      dense: 'px-2.5 py-2',\n      default: 'px-4 py-3',\n    },\n  },\n  defaultVariants: {\n    size: 'default',\n  },\n});\n\nfunction getPinningStyles<TData>(column: Column<TData>): CSSProperties {\n  const isPinned = column.getIsPinned();\n\n  return {\n    left: isPinned === 'left' ? `${column.getStart('left')}px` : undefined,\n    right: isPinned === 'right' ? `${column.getAfter('right')}px` : undefined,\n    position: isPinned ? 'sticky' : 'relative',\n    width: column.getSize(),\n    zIndex: isPinned ? 1 : 0,\n  };\n}\n\nfunction DataGridTableBase({ children }: { children: ReactNode }) {\n  const { props } = useDataGrid();\n\n  return (\n    <table\n      data-slot=\"data-grid-table\"\n      className={cn(\n        'w-full align-middle caption-bottom text-left rtl:text-right text-foreground font-normal text-sm',\n        !props.tableLayout?.columnsDraggable && 'border-separate border-spacing-0',\n        props.tableLayout?.width === 'fixed' ? 'table-fixed' : 'table-auto',\n        props.tableClassNames?.base,\n      )}\n    >\n      {children}\n    </table>\n  );\n}\n\nfunction DataGridTableHead({ children }: { children: ReactNode }) {\n  const { props } = useDataGrid();\n\n  return (\n    <thead\n      className={cn(\n        props.tableClassNames?.header,\n        props.tableLayout?.headerSticky && props.tableClassNames?.headerSticky,\n      )}\n    >\n      {children}\n    </thead>\n  );\n}\n\nfunction DataGridTableHeadRow<TData>({\n  children,\n  headerGroup,\n}: {\n  children: ReactNode;\n  headerGroup: HeaderGroup<TData>;\n}) {\n  const { props } = useDataGrid();\n\n  return (\n    <tr\n      key={headerGroup.id}\n      className={cn(\n        'bg-muted/40',\n        props.tableLayout?.headerBorder && '[&>th]:border-b',\n        props.tableLayout?.cellBorder && '[&_>:last-child]:border-e-0',\n        props.tableLayout?.stripped && 'bg-transparent',\n        props.tableLayout?.headerBackground === false && 'bg-transparent',\n        props.tableClassNames?.headerRow,\n      )}\n    >\n      {children}\n    </tr>\n  );\n}\n\nfunction DataGridTableHeadRowCell<TData>({\n  children,\n  header,\n  dndRef,\n  dndStyle,\n}: {\n  children: ReactNode;\n  header: Header<TData, unknown>;\n  dndRef?: React.Ref<HTMLTableCellElement>;\n  dndStyle?: CSSProperties;\n}) {\n  const { props } = useDataGrid();\n\n  const { column } = header;\n  const isPinned = column.getIsPinned();\n  const isLastLeftPinned = isPinned === 'left' && column.getIsLastColumn('left');\n  const isFirstRightPinned = isPinned === 'right' && column.getIsFirstColumn('right');\n  const headerCellSpacing = headerCellSpacingVariants({\n    size: props.tableLayout?.dense ? 'dense' : 'default',\n  });\n\n  return (\n    <th\n      key={header.id}\n      ref={dndRef}\n      style={{\n        ...(props.tableLayout?.width === 'fixed' && {\n          width: `${header.getSize()}px`,\n        }),\n        ...(props.tableLayout?.columnsPinnable && column.getCanPin() && getPinningStyles(column)),\n        ...(dndStyle ? dndStyle : null),\n      }}\n      data-pinned={isPinned || undefined}\n      data-last-col={isLastLeftPinned ? 'left' : isFirstRightPinned ? 'right' : undefined}\n      className={cn(\n        'relative h-10 text-left rtl:text-right align-middle font-normal text-accent-foreground [&:has([role=checkbox])]:pe-0',\n        headerCellSpacing,\n        props.tableLayout?.cellBorder && 'border-e',\n        props.tableLayout?.columnsResizable && column.getCanResize() && 'truncate',\n        props.tableLayout?.columnsPinnable &&\n          column.getCanPin() &&\n          '[&:not([data-pinned]):has(+[data-pinned])_div.cursor-col-resize:last-child]:opacity-0 [&[data-last-col=left]_div.cursor-col-resize:last-child]:opacity-0 [&[data-pinned=left][data-last-col=left]]:border-e! [&[data-pinned=right]:last-child_div.cursor-col-resize:last-child]:opacity-0 [&[data-pinned=right][data-last-col=right]]:border-s! [&[data-pinned][data-last-col]]:border-border data-pinned:bg-muted/90 data-pinned:backdrop-blur-xs',\n        header.column.columnDef.meta?.headerClassName,\n        column.getIndex() === 0 || column.getIndex() === header.headerGroup.headers.length - 1\n          ? props.tableClassNames?.edgeCell\n          : '',\n      )}\n    >\n      {children}\n    </th>\n  );\n}\n\nfunction DataGridTableHeadRowCellResize<TData>({ header }: { header: Header<TData, unknown> }) {\n  const { column } = header;\n\n  return (\n    <div\n      {...{\n        onDoubleClick: () => column.resetSize(),\n        onMouseDown: header.getResizeHandler(),\n        onTouchStart: header.getResizeHandler(),\n        className:\n          'absolute top-0 h-full w-4 cursor-col-resize user-select-none touch-none -end-2 z-10 flex justify-center before:absolute before:w-px before:inset-y-0 before:bg-border before:-translate-x-px',\n      }}\n    />\n  );\n}\n\nfunction DataGridTableRowSpacer() {\n  return <tbody aria-hidden=\"true\" className=\"h-2\"></tbody>;\n}\n\nfunction DataGridTableBody({ children }: { children: ReactNode }) {\n  const { props } = useDataGrid();\n\n  return (\n    <tbody\n      className={cn(\n        '[&_tr:last-child]:border-0',\n        props.tableLayout?.rowRounded && '[&_td:first-child]:rounded-s-lg [&_td:last-child]:rounded-e-lg',\n        props.tableClassNames?.body,\n      )}\n    >\n      {children}\n    </tbody>\n  );\n}\n\nfunction DataGridTableBodyRowSkeleton({ children }: { children: ReactNode }) {\n  const { table, props } = useDataGrid();\n\n  return (\n    <tr\n      className={cn(\n        'hover:bg-muted/40 data-[state=selected]:bg-muted/50',\n        props.onRowClick && 'cursor-pointer',\n        !props.tableLayout?.stripped &&\n          props.tableLayout?.rowBorder &&\n          'border-b border-border [&:not(:last-child)>td]:border-b',\n        props.tableLayout?.cellBorder && '[&_>:last-child]:border-e-0',\n        props.tableLayout?.stripped && 'odd:bg-muted/90 hover:bg-transparent odd:hover:bg-muted',\n        table.options.enableRowSelection && '[&_>:first-child]:relative',\n        props.tableClassNames?.bodyRow,\n      )}\n    >\n      {children}\n    </tr>\n  );\n}\n\nfunction DataGridTableBodyRowSkeletonCell<TData>({ children, column }: { children: ReactNode; column: Column<TData> }) {\n  const { props, table } = useDataGrid();\n  const bodyCellSpacing = bodyCellSpacingVariants({\n    size: props.tableLayout?.dense ? 'dense' : 'default',\n  });\n\n  return (\n    <td\n      className={cn(\n        'align-middle',\n        bodyCellSpacing,\n        props.tableLayout?.cellBorder && 'border-e',\n        props.tableLayout?.columnsResizable && column.getCanResize() && 'truncate',\n        column.columnDef.meta?.cellClassName,\n        props.tableLayout?.columnsPinnable &&\n          column.getCanPin() &&\n          '[&[data-pinned=left][data-last-col=left]]:border-e! [&[data-pinned=right][data-last-col=right]]:border-s! [&[data-pinned][data-last-col]]:border-border data-pinned:bg-background/90 data-pinned:backdrop-blur-xs\"',\n        column.getIndex() === 0 || column.getIndex() === table.getVisibleFlatColumns().length - 1\n          ? props.tableClassNames?.edgeCell\n          : '',\n      )}\n    >\n      {children}\n    </td>\n  );\n}\n\nfunction DataGridTableBodyRow<TData>({\n  children,\n  row,\n  dndRef,\n  dndStyle,\n}: {\n  children: ReactNode;\n  row: Row<TData>;\n  dndRef?: React.Ref<HTMLTableRowElement>;\n  dndStyle?: CSSProperties;\n}) {\n  const { props, table } = useDataGrid();\n\n  return (\n    <tr\n      ref={dndRef}\n      style={{ ...(dndStyle ? dndStyle : null) }}\n      data-state={table.options.enableRowSelection && row.getIsSelected() ? 'selected' : undefined}\n      onClick={() => props.onRowClick && props.onRowClick(row.original)}\n      className={cn(\n        'hover:bg-muted/40 data-[state=selected]:bg-muted/50',\n        props.onRowClick && 'cursor-pointer',\n        !props.tableLayout?.stripped &&\n          props.tableLayout?.rowBorder &&\n          'border-b border-border [&:not(:last-child)>td]:border-b',\n        props.tableLayout?.cellBorder && '[&_>:last-child]:border-e-0',\n        props.tableLayout?.stripped && 'odd:bg-muted/90 hover:bg-transparent odd:hover:bg-muted',\n        table.options.enableRowSelection && '[&_>:first-child]:relative',\n        props.tableClassNames?.bodyRow,\n      )}\n    >\n      {children}\n    </tr>\n  );\n}\n\nfunction DataGridTableBodyRowExpandded<TData>({ row }: { row: Row<TData> }) {\n  const { props, table } = useDataGrid();\n\n  return (\n    <tr className={cn(props.tableLayout?.rowBorder && '[&:not(:last-child)>td]:border-b')}>\n      <td colSpan={row.getVisibleCells().length}>\n        {table\n          .getAllColumns()\n          .find((column) => column.columnDef.meta?.expandedContent)\n          ?.columnDef.meta?.expandedContent?.(row.original)}\n      </td>\n    </tr>\n  );\n}\n\nfunction DataGridTableBodyRowCell<TData>({\n  children,\n  cell,\n  dndRef,\n  dndStyle,\n}: {\n  children: ReactNode;\n  cell: Cell<TData, unknown>;\n  dndRef?: React.Ref<HTMLTableCellElement>;\n  dndStyle?: CSSProperties;\n}) {\n  const { props } = useDataGrid();\n\n  const { column, row } = cell;\n  const isPinned = column.getIsPinned();\n  const isLastLeftPinned = isPinned === 'left' && column.getIsLastColumn('left');\n  const isFirstRightPinned = isPinned === 'right' && column.getIsFirstColumn('right');\n  const bodyCellSpacing = bodyCellSpacingVariants({\n    size: props.tableLayout?.dense ? 'dense' : 'default',\n  });\n\n  return (\n    <td\n      key={cell.id}\n      ref={dndRef}\n      {...(props.tableLayout?.columnsDraggable && !isPinned ? { cell } : {})}\n      style={{\n        ...(props.tableLayout?.columnsPinnable && column.getCanPin() && getPinningStyles(column)),\n        ...(dndStyle ? dndStyle : null),\n      }}\n      data-pinned={isPinned || undefined}\n      data-last-col={isLastLeftPinned ? 'left' : isFirstRightPinned ? 'right' : undefined}\n      className={cn(\n        'align-middle',\n        bodyCellSpacing,\n        props.tableLayout?.cellBorder && 'border-e',\n        props.tableLayout?.columnsResizable && column.getCanResize() && 'truncate',\n        cell.column.columnDef.meta?.cellClassName,\n        props.tableLayout?.columnsPinnable &&\n          column.getCanPin() &&\n          '[&[data-pinned=left][data-last-col=left]]:border-e! [&[data-pinned=right][data-last-col=right]]:border-s! [&[data-pinned][data-last-col]]:border-border data-pinned:bg-background/90 data-pinned:backdrop-blur-xs\"',\n        column.getIndex() === 0 || column.getIndex() === row.getVisibleCells().length - 1\n          ? props.tableClassNames?.edgeCell\n          : '',\n      )}\n    >\n      {children}\n    </td>\n  );\n}\n\nfunction DataGridTableEmpty() {\n  const { table, props } = useDataGrid();\n  const totalColumns = table.getAllColumns().length;\n\n  return (\n    <tr>\n      <td colSpan={totalColumns} className=\"text-center text-muted-foreground py-6\">\n        {props.emptyMessage || 'No data available'}\n      </td>\n    </tr>\n  );\n}\n\nfunction DataGridTableLoader() {\n  const { props } = useDataGrid();\n\n  return (\n    <div className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\">\n      <div className=\"text-muted-foreground bg-card  flex items-center gap-2 px-4 py-2 font-medium leading-none text-sm border shadow-xs rounded-md\">\n        <svg\n          className=\"animate-spin -ml-1 h-5 w-5 text-muted-foreground\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n        >\n          <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"3\"></circle>\n          <path\n            className=\"opacity-75\"\n            fill=\"currentColor\"\n            d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n          ></path>\n        </svg>\n        {props.loadingMessage || 'Loading...'}\n      </div>\n    </div>\n  );\n}\n\nfunction DataGridTableRowSelect<TData>({ row, size }: { row: Row<TData>; size?: 'sm' | 'md' | 'lg' }) {\n  return (\n    <>\n      <div\n        className={cn('hidden absolute top-0 bottom-0 start-0 w-[2px] bg-primary', row.getIsSelected() && 'block')}\n      ></div>\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n        size={size ?? 'sm'}\n        className=\"align-[inherit]\"\n      />\n    </>\n  );\n}\n\nfunction DataGridTableRowSelectAll({ size }: { size?: 'sm' | 'md' | 'lg' }) {\n  const { table, recordCount, isLoading } = useDataGrid();\n\n  return (\n    <Checkbox\n      checked={table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && 'indeterminate')}\n      disabled={isLoading || recordCount === 0}\n      onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n      aria-label=\"Select all\"\n      size={size}\n      className=\"align-[inherit]\"\n    />\n  );\n}\n\nfunction DataGridTable<TData>() {\n  const { table, isLoading, props } = useDataGrid();\n  const pagination = table.getState().pagination;\n\n  return (\n    <DataGridTableBase>\n      <DataGridTableHead>\n        {table.getHeaderGroups().map((headerGroup: HeaderGroup<TData>, index) => {\n          return (\n            <DataGridTableHeadRow headerGroup={headerGroup} key={index}>\n              {headerGroup.headers.map((header, index) => {\n                const { column } = header;\n\n                return (\n                  <DataGridTableHeadRowCell header={header} key={index}>\n                    {header.isPlaceholder ? null : flexRender(header.column.columnDef.header, header.getContext())}\n                    {props.tableLayout?.columnsResizable && column.getCanResize() && (\n                      <DataGridTableHeadRowCellResize header={header} />\n                    )}\n                  </DataGridTableHeadRowCell>\n                );\n              })}\n            </DataGridTableHeadRow>\n          );\n        })}\n      </DataGridTableHead>\n\n      {(props.tableLayout?.stripped || !props.tableLayout?.rowBorder) && <DataGridTableRowSpacer />}\n\n      <DataGridTableBody>\n        {props.loadingMode === 'skeleton' && isLoading && pagination?.pageSize ? (\n          Array.from({ length: pagination.pageSize }).map((_, rowIndex) => (\n            <DataGridTableBodyRowSkeleton key={rowIndex}>\n              {table.getVisibleFlatColumns().map((column, colIndex) => {\n                return (\n                  <DataGridTableBodyRowSkeletonCell column={column} key={colIndex}>\n                    {column.columnDef.meta?.skeleton}\n                  </DataGridTableBodyRowSkeletonCell>\n                );\n              })}\n            </DataGridTableBodyRowSkeleton>\n          ))\n        ) : table.getRowModel().rows.length ? (\n          table.getRowModel().rows.map((row: Row<TData>, index) => {\n            return (\n              <Fragment key={row.id}>\n                <DataGridTableBodyRow row={row} key={index}>\n                  {row.getVisibleCells().map((cell: Cell<TData, unknown>, colIndex) => {\n                    return (\n                      <DataGridTableBodyRowCell cell={cell} key={colIndex}>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                      </DataGridTableBodyRowCell>\n                    );\n                  })}\n                </DataGridTableBodyRow>\n                {row.getIsExpanded() && <DataGridTableBodyRowExpandded row={row} />}\n              </Fragment>\n            );\n          })\n        ) : (\n          <DataGridTableEmpty />\n        )}\n      </DataGridTableBody>\n    </DataGridTableBase>\n  );\n}\n\nexport {\n  DataGridTable,\n  DataGridTableBase,\n  DataGridTableBody,\n  DataGridTableBodyRow,\n  DataGridTableBodyRowCell,\n  DataGridTableBodyRowExpandded,\n  DataGridTableBodyRowSkeleton,\n  DataGridTableBodyRowSkeletonCell,\n  DataGridTableEmpty,\n  DataGridTableHead,\n  DataGridTableHeadRow,\n  DataGridTableHeadRowCell,\n  DataGridTableHeadRowCellResize,\n  DataGridTableLoader,\n  DataGridTableRowSelect,\n  DataGridTableRowSelectAll,\n  DataGridTableRowSpacer,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/input.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\n// Define input size variants\nconst inputVariants = cva(\n  `\n    flex w-full bg-background border border-input shadow-xs shadow-black/5 transition-[color,box-shadow] text-foreground placeholder:text-muted-foreground/80 \n    focus-visible:ring-ring/30  focus-visible:border-ring focus-visible:outline-none focus-visible:ring-[3px]     \n    disabled:cursor-not-allowed disabled:opacity-60 \n    [&[readonly]]:bg-muted/80 [&[readonly]]:cursor-not-allowed\n    file:h-full [&[type=file]]:py-0 file:border-solid file:border-input file:bg-transparent \n    file:font-medium file:not-italic file:text-foreground file:p-0 file:border-0 file:border-e\n    aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n  `,\n  {\n    variants: {\n      variant: {\n        lg: 'h-10 px-4 text-sm rounded-md file:pe-4 file:me-4',\n        md: 'h-8.5 px-3 text-[0.8125rem] leading-(--text-sm--line-height) rounded-md file:pe-3 file:me-3',\n        sm: 'h-7 px-2.5 text-xs rounded-md file:pe-2.5 file:me-2.5',\n      },\n    },\n    defaultVariants: {\n      variant: 'md',\n    },\n  },\n);\n\nconst inputAddonVariants = cva(\n  'flex items-center shrink-0 justify-center bg-muted border border-input shadow-xs shadow-[rgba(0,0,0,0.05)] text-secondary-foreground [&_svg]:text-secondary-foreground/60',\n  {\n    variants: {\n      variant: {\n        sm: 'rounded-md h-7 min-w-7 text-xs px-2.5 [&_svg:not([class*=size-])]:size-3.5',\n        md: 'rounded-md h-8.5 min-w-8.5 px-3 text-[0.8125rem] leading-(--text-sm--line-height) [&_svg:not([class*=size-])]:size-4.5',\n        lg: 'rounded-md h-10 min-w-10 px-4 text-sm [&_svg:not([class*=size-])]:size-4.5',\n      },\n      mode: {\n        default: '',\n        icon: 'px-0 justify-center',\n      },\n    },\n    defaultVariants: {\n      variant: 'md',\n      mode: 'default',\n    },\n  },\n);\n\nconst inputGroupVariants = cva(\n  `\n    flex items-stretch\n    [&_[data-slot=input]]:grow\n    [&_[data-slot=input-addon]:has(+[data-slot=input])]:rounded-e-none [&_[data-slot=input-addon]:has(+[data-slot=input])]:border-e-0\n    [&_[data-slot=input-addon]:has(+[data-slot=datefield])]:rounded-e-none [&_[data-slot=input-addon]:has(+[data-slot=datefield])]:border-e-0 \n    [&_[data-slot=input]+[data-slot=input-addon]]:rounded-s-none [&_[data-slot=input]+[data-slot=input-addon]]:border-s-0\n    [&_[data-slot=input-addon]:has(+[data-slot=button])]:rounded-e-none\n    [&_[data-slot=input]+[data-slot=button]]:rounded-s-none\n    [&_[data-slot=button]+[data-slot=input]]:rounded-s-none\n    [&_[data-slot=input-addon]+[data-slot=input]]:rounded-s-none\n    [&_[data-slot=input-addon]+[data-slot=datefield]]:[&_[data-slot=input]]:rounded-s-none\n    [&_[data-slot=datefield]:has(+[data-slot=input-addon])]:[&_[data-slot=input]]:rounded-e-none\n    [&_[data-slot=input]:has(+[data-slot=button])]:rounded-e-none\n    [&_[data-slot=input]:has(+[data-slot=input-addon])]:rounded-e-none\n    [&_[data-slot=datefield]]:grow\n    [&_[data-slot=datefield]+[data-slot=input-addon]]:rounded-s-none [&_[data-slot=datefield]+[data-slot=input-addon]]:border-s-0\n  `,\n  {\n    variants: {},\n    defaultVariants: {},\n  },\n);\n\nconst inputWrapperVariants = cva(\n  `\n    flex items-center gap-1.5\n    has-[:focus-visible]:ring-ring/30 \n    has-[:focus-visible]:border-ring\n    has-[:focus-visible]:outline-none \n    has-[:focus-visible]:ring-[3px]\n\n    [&_[data-slot=datefield]]:grow \n    [&_[data-slot=input]]:data-focus-within:ring-transparent  \n    [&_[data-slot=input]]:data-focus-within:ring-0 \n    [&_[data-slot=input]]:data-focus-within:border-0 \n    [&_[data-slot=input]]:flex \n    [&_[data-slot=input]]:w-full \n    [&_[data-slot=input]]:outline-none \n    [&_[data-slot=input]]:transition-colors \n    [&_[data-slot=input]]:text-foreground\n    [&_[data-slot=input]]:placeholder:text-muted-foreground \n    [&_[data-slot=input]]:border-0 \n    [&_[data-slot=input]]:bg-transparent \n    [&_[data-slot=input]]:p-0\n    [&_[data-slot=input]]:shadow-none \n    [&_[data-slot=input]]:focus-visible:ring-0 \n    [&_[data-slot=input]]:h-auto \n    [&_[data-slot=input]]:disabled:cursor-not-allowed\n    [&_[data-slot=input]]:disabled:opacity-50    \n\n    [&_svg]:text-muted-foreground \n\n    has-[[aria-invalid=true]]:border-destructive/60 \n    has-[[aria-invalid=true]]:ring-destructive/10 \n    dark:has-[[aria-invalid=true]]:border-destructive \n    dark:has-[[aria-invalid=true]]:ring-destructive/20    \n  `,\n  {\n    variants: {\n      variant: {\n        sm: 'gap-1.25 [&_svg:not([class*=size-])]:size-3.5',\n        md: 'gap-1.5 [&_svg:not([class*=size-])]:size-4',\n        lg: 'gap-1.5 [&_svg:not([class*=size-])]:size-4',\n      },\n    },\n    defaultVariants: {\n      variant: 'md',\n    },\n  },\n);\n\nfunction Input({\n  className,\n  type,\n  variant,\n  ...props\n}: React.ComponentProps<'input'> & VariantProps<typeof inputVariants>) {\n  return <input data-slot=\"input\" type={type} className={cn(inputVariants({ variant }), className)} {...props} />;\n}\n\nfunction InputAddon({\n  className,\n  variant,\n  mode,\n  ...props\n}: React.ComponentProps<'div'> & VariantProps<typeof inputAddonVariants>) {\n  return <div data-slot=\"input-addon\" className={cn(inputAddonVariants({ variant, mode }), className)} {...props} />;\n}\n\nfunction InputGroup({ className, ...props }: React.ComponentProps<'div'> & VariantProps<typeof inputGroupVariants>) {\n  return <div data-slot=\"input-group\" className={cn(inputGroupVariants(), className)} {...props} />;\n}\n\nfunction InputWrapper({\n  className,\n  variant,\n  ...props\n}: React.ComponentProps<'div'> & VariantProps<typeof inputWrapperVariants>) {\n  return (\n    <div\n      data-slot=\"input-wrapper\"\n      className={cn(inputVariants({ variant }), inputWrapperVariants({ variant }), className)}\n      {...props}\n    />\n  );\n}\n\nexport { Input, InputAddon, InputGroup, InputWrapper, inputVariants, inputAddonVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/label.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { Label as LabelPrimitive } from 'radix-ui';\n\nconst labelVariants = cva(\n  'text-sm leading-none text-foreground peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        primary: 'font-medium',\n        secondary: 'font-normal',\n      },\n    },\n    defaultVariants: {\n      variant: 'primary',\n    },\n  },\n);\n\nfunction Label({\n  className,\n  variant,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root> & VariantProps<typeof labelVariants>) {\n  return <LabelPrimitive.Root data-slot=\"label\" className={cn(labelVariants({ variant }), className)} {...props} />;\n}\n\nexport { Label };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/popover.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Popover as PopoverPrimitive } from 'radix-ui';\n\nfunction Popover({ ...props }: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />;\n}\n\nfunction PopoverTrigger({ ...props }: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />;\n}\n\nfunction PopoverContent({\n  className,\n  align = 'center',\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\n  return (\n    <PopoverPrimitive.Content\n      data-slot=\"popover-content\"\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        'z-50 w-72 rounded-md border border-border bg-popover p-4 text-popover-foreground shadow-md shadow-black/5 outline-hidden data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Popover, PopoverContent, PopoverTrigger };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/scroll-area.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { ScrollArea as ScrollAreaPrimitive } from 'radix-ui';\n\nfunction ScrollArea({\n  className,\n  viewportClassName,\n  children,\n  viewportRef,\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.Root> & {\n  viewportRef?: React.Ref<HTMLDivElement>;\n  viewportClassName?: string;\n}) {\n  return (\n    <ScrollAreaPrimitive.Root data-slot=\"scroll-area\" className={cn('relative overflow-hidden', className)} {...props}>\n      <ScrollAreaPrimitive.Viewport\n        ref={viewportRef}\n        className={cn('h-full w-full rounded-[inherit]', viewportClassName)}\n      >\n        {children}\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  );\n}\n\nfunction ScrollBar({\n  className,\n  orientation = 'vertical',\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\n  return (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n      data-slot=\"scroll-area-scrollbar\"\n      orientation={orientation}\n      className={cn(\n        'flex touch-none select-none transition-colors',\n        orientation === 'vertical' && 'h-full w-2 border-l border-l-transparent p-[1px]',\n        orientation === 'horizontal' && 'h-2 flex-col border-t border-t-transparent p-[1px]',\n        className,\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n  );\n}\n\nexport { ScrollArea, ScrollBar };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "registry/default/ui/button.tsx",
      "content": "import * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { ChevronDown, LucideIcon } from 'lucide-react';\nimport { Slot as SlotPrimitive } from 'radix-ui';\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  'cursor-pointer group whitespace-nowrap focus-visible:outline-hidden inline-flex items-center justify-center has-data-[arrow=true]:justify-between whitespace-nowrap text-sm font-medium ring-offset-background transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-60 [&_svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        primary: 'bg-primary text-primary-foreground hover:bg-primary/90 data-[state=open]:bg-primary/90',\n        mono: 'bg-zinc-950 text-white dark:bg-zinc-300 dark:text-black hover:bg-zinc-950/90 dark:hover:bg-zinc-300/90 data-[state=open]:bg-zinc-950/90 dark:data-[state=open]:bg-zinc-300/90',\n        destructive:\n          'bg-destructive text-destructive-foreground hover:bg-destructive/90 data-[state=open]:bg-destructive/90',\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/90 data-[state=open]:bg-secondary/90',\n        outline: 'bg-background text-accent-foreground border border-input hover:bg-accent data-[state=open]:bg-accent',\n        dashed:\n          'text-accent-foreground border border-input border-dashed bg-background hover:bg-accent hover:text-accent-foreground data-[state=open]:text-accent-foreground',\n        ghost:\n          'text-accent-foreground hover:bg-accent hover:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',\n        dim: 'text-muted-foreground hover:text-foreground data-[state=open]:text-foreground',\n        foreground: '',\n        inverse: '',\n      },\n      appearance: {\n        default: '',\n        ghost: '',\n      },\n      underline: {\n        solid: '',\n        dashed: '',\n      },\n      underlined: {\n        solid: '',\n        dashed: '',\n      },\n      size: {\n        lg: 'h-10 rounded-md px-4 text-sm gap-1.5 [&_svg:not([class*=size-])]:size-4',\n        md: 'h-8.5 rounded-md px-3 gap-1.5 text-[0.8125rem] leading-(--text-sm--line-height) [&_svg:not([class*=size-])]:size-4',\n        sm: 'h-7 rounded-md px-2.5 gap-1.25 text-xs [&_svg:not([class*=size-])]:size-3.5',\n        icon: 'size-8.5 rounded-md [&_svg:not([class*=size-])]:size-4 shrink-0',\n      },\n      autoHeight: {\n        true: '',\n        false: '',\n      },\n      shape: {\n        default: '',\n        circle: 'rounded-full',\n      },\n      mode: {\n        default: 'focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n        icon: 'focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 shrink-0',\n        link: 'text-primary h-auto p-0 bg-transparent rounded-none hover:bg-transparent data-[state=open]:bg-transparent',\n        input: `\n            justify-start font-normal hover:bg-background [&_svg]:transition-colors [&_svg]:hover:text-foreground data-[state=open]:bg-background \n            focus-visible:border-ring focus-visible:outline-hidden focus-visible:ring-[3px] focus-visible:ring-ring/30 \n            [[data-state=open]>&]:border-ring [[data-state=open]>&]:outline-hidden [[data-state=open]>&]:ring-[3px] \n            [[data-state=open]>&]:ring-ring/30 \n            aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n            in-data-[invalid=true]:border-destructive/60 in-data-[invalid=true]:ring-destructive/10  dark:in-data-[invalid=true]:border-destructive dark:in-data-[invalid=true]:ring-destructive/20\n          `,\n      },\n      placeholder: {\n        true: 'text-muted-foreground',\n        false: '',\n      },\n    },\n    compoundVariants: [\n      // Icons opacity for default mode\n      {\n        variant: 'ghost',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'outline',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'dashed',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'secondary',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n\n      // Icons opacity for default mode\n      {\n        variant: 'outline',\n        mode: 'input',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'outline',\n        mode: 'icon',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n\n      // Auto height\n      {\n        size: 'md',\n        autoHeight: true,\n        className: 'h-auto min-h-8.5',\n      },\n      {\n        size: 'sm',\n        autoHeight: true,\n        className: 'h-auto min-h-7',\n      },\n      {\n        size: 'lg',\n        autoHeight: true,\n        className: 'h-auto min-h-10',\n      },\n\n      // Shadow support\n      {\n        variant: 'primary',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'mono',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'secondary',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'outline',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'dashed',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'destructive',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n\n      // Shadow support\n      {\n        variant: 'primary',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'mono',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'secondary',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'outline',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'dashed',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'destructive',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n\n      // Link\n      {\n        variant: 'primary',\n        mode: 'link',\n        underline: 'solid',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-solid',\n      },\n      {\n        variant: 'primary',\n        mode: 'link',\n        underline: 'dashed',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-dashed decoration-1',\n      },\n      {\n        variant: 'primary',\n        mode: 'link',\n        underlined: 'solid',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-solid',\n      },\n      {\n        variant: 'primary',\n        mode: 'link',\n        underlined: 'dashed',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg]:opacity-60 underline underline-offset-4 decoration-dashed decoration-1',\n      },\n\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underline: 'solid',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-solid',\n      },\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underline: 'dashed',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-dashed decoration-1',\n      },\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underlined: 'solid',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-solid',\n      },\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underlined: 'dashed',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-dashed decoration-1',\n      },\n\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underline: 'solid',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-solid',\n      },\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underline: 'dashed',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-dashed decoration-1',\n      },\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underlined: 'solid',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-solid',\n      },\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underlined: 'dashed',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-dashed decoration-1',\n      },\n\n      // Ghost\n      {\n        variant: 'primary',\n        appearance: 'ghost',\n        className: 'bg-transparent text-primary/90 hover:bg-primary/5 data-[state=open]:bg-primary/5',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'ghost',\n        className: 'bg-transparent text-destructive/90 hover:bg-destructive/5 data-[state=open]:bg-destructive/5',\n      },\n      {\n        variant: 'ghost',\n        mode: 'icon',\n        className: 'text-muted-foreground',\n      },\n\n      // Size\n      {\n        size: 'sm',\n        mode: 'icon',\n        className: 'w-7 h-7 p-0 [[&_svg:not([class*=size-])]:size-3.5',\n      },\n      {\n        size: 'md',\n        mode: 'icon',\n        className: 'w-8.5 h-8.5 p-0 [&_svg:not([class*=size-])]:size-4',\n      },\n      {\n        size: 'icon',\n        className: 'w-8.5 h-8.5 p-0 [&_svg:not([class*=size-])]:size-4',\n      },\n      {\n        size: 'lg',\n        mode: 'icon',\n        className: 'w-10 h-10 p-0 [&_svg:not([class*=size-])]:size-4',\n      },\n\n      // Input mode\n      {\n        mode: 'input',\n        placeholder: true,\n        variant: 'outline',\n        className: 'font-normal text-muted-foreground',\n      },\n      {\n        mode: 'input',\n        variant: 'outline',\n        size: 'sm',\n        className: 'gap-1.25',\n      },\n      {\n        mode: 'input',\n        variant: 'outline',\n        size: 'md',\n        className: 'gap-1.5',\n      },\n      {\n        mode: 'input',\n        variant: 'outline',\n        size: 'lg',\n        className: 'gap-1.5',\n      },\n    ],\n    defaultVariants: {\n      variant: 'primary',\n      mode: 'default',\n      size: 'md',\n      shape: 'default',\n      appearance: 'default',\n    },\n  },\n);\n\nfunction Button({\n  className,\n  selected,\n  variant,\n  shape,\n  appearance,\n  mode,\n  size,\n  autoHeight,\n  underlined,\n  underline,\n  asChild = false,\n  placeholder = false,\n  ...props\n}: React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    selected?: boolean;\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? SlotPrimitive.Slot : 'button';\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(\n        buttonVariants({\n          variant,\n          size,\n          shape,\n          appearance,\n          mode,\n          autoHeight,\n          placeholder,\n          underlined,\n          underline,\n          className,\n        }),\n        asChild && props.disabled && 'pointer-events-none opacity-50',\n      )}\n      {...(selected && { 'data-state': 'open' })}\n      {...props}\n    />\n  );\n}\n\ninterface ButtonArrowProps extends React.SVGProps<SVGSVGElement> {\n  icon?: LucideIcon; // Allows passing any Lucide icon\n}\n\nfunction ButtonArrow({ icon: Icon = ChevronDown, className, ...props }: ButtonArrowProps) {\n  return <Icon data-slot=\"button-arrow\" className={cn('ms-auto -me-1', className)} {...props} />;\n}\n\nexport { Button, ButtonArrow, buttonVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/dropdown-menu.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Check, ChevronRight, Circle } from 'lucide-react';\nimport { DropdownMenu as DropdownMenuPrimitive } from 'radix-ui';\n\nfunction DropdownMenu({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />;\n}\n\nfunction DropdownMenuPortal({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />;\n}\n\nfunction DropdownMenuTrigger({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return <DropdownMenuPrimitive.Trigger className=\"select-none\" data-slot=\"dropdown-menu-trigger\" {...props} />;\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean;\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      className={cn(\n        'flex cursor-default gap-2 select-none items-center rounded-md px-2 py-1.5 text-sm outline-hidden',\n        'focus:bg-accent focus:text-foreground',\n        'data-[state=open]:bg-accent data-[state=open]:text-foreground',\n        'data-[here=true]:bg-accent data-[here=true]:text-foreground',\n        '[&>svg]:pointer-events-none [&_svg:not([role=img]):not([class*=text-])]:opacity-60 [&>svg]:size-4 [&>svg]:shrink-0',\n        inset && 'ps-8',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRight data-slot=\"dropdown-menu-sub-trigger-indicator\" className=\"ms-auto size-3.5! rtl:rotate-180\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  );\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        'space-y-0.5 z-50 min-w-[8rem] overflow-hidden shadow-md shadow-black/5 rounded-md border border-border bg-popover text-popover-foreground p-2 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          'space-y-0.5 z-50 min-w-[8rem] overflow-hidden rounded-md border border-border bg-popover p-2 text-popover-foreground shadow-md shadow-black/5 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n          className,\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  );\n}\n\nfunction DropdownMenuGroup({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />;\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean;\n  variant?: 'destructive';\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      className={cn(\n        'text-foreground relative flex cursor-default select-none items-center gap-2 rounded-md px-2 py-1.5 text-sm outline-hidden transition-colors data-disabled:pointer-events-none data-disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([role=img]):not([class*=text-])]:opacity-60 [&_svg:not([class*=size-])]:size-4 [&_svg]:shrink-0',\n        'focus:bg-accent focus:text-foreground',\n        'data-[active=true]:bg-accent data-[active=true]:text-accent-foreground',\n        inset && 'ps-8',\n        variant === 'destructive' &&\n          'text-destructive hover:text-destructive focus:text-destructive hover:bg-destructive/5 focus:bg-destructive/5 data-[active=true]:bg-destructive/5',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        'relative flex cursor-default select-none items-center rounded-md py-1.5 ps-8 pe-2 text-sm outline-hidden transition-colors focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50',\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"absolute start-2 flex h-3.5 w-3.5 items-center text-muted-foreground justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <Check className=\"h-4 w-4 text-primary\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  );\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        'relative flex cursor-default select-none items-center rounded-md py-1.5 ps-6 pe-2 text-sm outline-hidden transition-colors focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"absolute start-1.5 flex h-3.5 w-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <Circle className=\"h-1.5 w-1.5 fill-primary stroke-primary\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  );\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean;\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      className={cn('px-2 py-1.5 text-xs text-muted-foreground font-medium', inset && 'ps-8', className)}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuRadioGroup({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return <DropdownMenuPrimitive.RadioGroup data-slot=\"dropdown-menu-radio-group\" {...props} />;\n}\n\nfunction DropdownMenuSeparator({ className, ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn('-mx-2 my-1.5 h-px bg-muted', className)}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuShortcut({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn('ms-auto text-xs tracking-widest opacity-60', className)}\n      {...props}\n    />\n  );\n}\n\nfunction DropdownMenuSub({ ...props }: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />;\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuPortal,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/select.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { isValidElement, ReactNode } from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport { Check, ChevronDown, ChevronUp } from 'lucide-react';\nimport { Select as SelectPrimitive } from 'radix-ui';\n\n// Create a Context for `indicatorPosition` and `indicator` control\nconst SelectContext = React.createContext<{\n  indicatorPosition: 'left' | 'right';\n  indicatorVisibility: boolean;\n  indicator: ReactNode;\n}>({ indicatorPosition: 'left', indicator: null, indicatorVisibility: true });\n\n// Root Component\nconst Select = ({\n  indicatorPosition = 'left',\n  indicatorVisibility = true,\n  indicator,\n  ...props\n}: {\n  indicatorPosition?: 'left' | 'right';\n  indicatorVisibility?: boolean;\n  indicator?: ReactNode;\n} & React.ComponentProps<typeof SelectPrimitive.Root>) => {\n  return (\n    <SelectContext.Provider value={{ indicatorPosition, indicatorVisibility, indicator }}>\n      <SelectPrimitive.Root {...props} />\n    </SelectContext.Provider>\n  );\n};\n\nfunction SelectGroup({ ...props }: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />;\n}\n\nfunction SelectValue({ ...props }: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />;\n}\n\n// Define size variants for SelectTrigger\nconst selectTriggerVariants = cva(\n  `\n    flex bg-background w-full items-center justify-between outline-none border border-input shadow-xs shadow-black/5 transition-shadow \n    text-foreground data-placeholder:text-muted-foreground focus-visible:border-ring focus-visible:outline-none focus-visible:ring-[3px] \n    focus-visible:ring-ring/30 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 \n    aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n    [[data-invalid=true]_&]:border-destructive/60 [[data-invalid=true]_&]:ring-destructive/10  dark:[[data-invalid=true]_&]:border-destructive dark:[[data-invalid=true]_&]:ring-destructive/20\n  `,\n  {\n    variants: {\n      size: {\n        sm: 'h-7 px-2.5 text-xs gap-1 rounded-md',\n        md: 'h-8.5 px-3 text-[0.8125rem] leading-(--text-sm--line-height) gap-1 rounded-md',\n        lg: 'h-10 px-4 text-sm gap-1.5 rounded-md',\n      },\n    },\n    defaultVariants: {\n      size: 'md',\n    },\n  },\n);\n\nexport interface SelectTriggerProps\n  extends React.ComponentProps<typeof SelectPrimitive.Trigger>,\n    VariantProps<typeof selectTriggerVariants> {}\n\nfunction SelectTrigger({ className, children, size, ...props }: SelectTriggerProps) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      className={cn(selectTriggerVariants({ size }), className)}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDown className=\"h-4 w-4 opacity-60 -me-0.5\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  );\n}\n\nfunction SelectScrollUpButton({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn('flex cursor-default items-center justify-center py-1', className)}\n      {...props}\n    >\n      <ChevronUp className=\"h-4 w-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  );\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn('flex cursor-default items-center justify-center py-1', className)}\n      {...props}\n    >\n      <ChevronDown className=\"h-4 w-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  );\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = 'popper',\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          'relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border border-border bg-popover shadow-md shadow-black/5 text-secondary-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n          position === 'popper' &&\n            'data-[side=bottom]:translate-y-1.5 data-[side=left]:-translate-x-1.5 data-[side=right]:translate-x-1.5 data-[side=top]:-translate-y-1.5',\n          className,\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            'p-1.5',\n            position === 'popper' &&\n              'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]',\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  );\n}\n\nfunction SelectLabel({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn('py-1.5 ps-8 pe-2 text-xs text-muted-foreground font-medium', className)}\n      {...props}\n    />\n  );\n}\n\nfunction SelectItem({ className, children, ...props }: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  const { indicatorPosition, indicatorVisibility, indicator } = React.useContext(SelectContext);\n\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 text-sm outline-hidden text-foreground hover:bg-accent focus:bg-accent data-disabled:pointer-events-none data-disabled:opacity-50',\n        indicatorPosition === 'left' ? 'ps-8 pe-2' : 'pe-8 ps-2',\n        className,\n      )}\n      {...props}\n    >\n      {indicatorVisibility &&\n        (indicator && isValidElement(indicator) ? (\n          indicator\n        ) : (\n          <span\n            className={cn(\n              'absolute flex h-3.5 w-3.5 items-center justify-center',\n              indicatorPosition === 'left' ? 'start-2' : 'end-2',\n            )}\n          >\n            <SelectPrimitive.ItemIndicator>\n              <Check className=\"h-4 w-4 text-primary\" />\n            </SelectPrimitive.ItemIndicator>\n          </span>\n        ))}\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  );\n}\n\nfunction SelectIndicator({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ItemIndicator>) {\n  const { indicatorPosition } = React.useContext(SelectContext);\n\n  return (\n    <span\n      data-slot=\"select-indicator\"\n      className={cn(\n        'absolute flex top-1/2 -translate-y-1/2 items-center justify-center',\n        indicatorPosition === 'left' ? 'start-2' : 'end-2',\n        className,\n      )}\n      {...props}\n    >\n      <SelectPrimitive.ItemIndicator>{children}</SelectPrimitive.ItemIndicator>\n    </span>\n  );\n}\n\nfunction SelectSeparator({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn('-mx-1.5 my-1.5 h-px bg-border', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectIndicator,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/skeleton.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\n\nfunction Skeleton({ className, ...props }: React.ComponentProps<'div'>) {\n  return <div data-slot=\"skeleton\" className={cn('animate-pulse rounded-md bg-accent', className)} {...props} />;\n}\n\nexport { Skeleton };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}