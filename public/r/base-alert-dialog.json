{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "base-alert-dialog",
  "type": "registry:ui",
  "dependencies": ["@base-ui-components/react", "clsx", "tailwind-merge"],
  "files": [
    {
      "path": "registry/default/ui/base-alert-dialog.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { AlertDialog } from '@base-ui-components/react/alert-dialog';\n\n// Base UI Alert Dialog Root\nfunction AlertDialogRoot({ ...props }: React.ComponentProps<typeof AlertDialog.Root>) {\n  return <AlertDialog.Root data-slot=\"alert-dialog\" {...props} />;\n}\n\n// Base UI Alert Dialog Trigger with asChild support\nfunction AlertDialogTrigger({\n  asChild = false,\n  children,\n  ...props\n}: React.ComponentProps<typeof AlertDialog.Trigger> & { asChild?: boolean }) {\n  const triggerProps = {\n    'data-slot': 'alert-dialog-trigger' as const,\n    ...props,\n    ...(asChild && {\n      render: children as React.ReactElement<Record<string, unknown>, string | React.JSXElementConstructor<unknown>>,\n    }),\n  };\n\n  return asChild ? (\n    <AlertDialog.Trigger {...triggerProps} />\n  ) : (\n    <AlertDialog.Trigger {...triggerProps}>{children}</AlertDialog.Trigger>\n  );\n}\n\n// Base UI Alert Dialog Portal\nfunction AlertDialogPortal({ ...props }: React.ComponentProps<typeof AlertDialog.Portal>) {\n  return <AlertDialog.Portal data-slot=\"alert-dialog-portal\" {...props} />;\n}\n\n// Base UI Alert Dialog Backdrop\nfunction AlertDialogBackdrop({ className, ...props }: React.ComponentProps<typeof AlertDialog.Backdrop>) {\n  return (\n    <AlertDialog.Backdrop\n      data-slot=\"alert-dialog-backdrop\"\n      className={cn(\n        'fixed inset-0 z-50 bg-black/30 [backdrop-filter:blur(4px)] transition-all duration-150 data-[ending-style]:opacity-0 data-[starting-style]:opacity-0',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\n// Base UI Alert Dialog Popup\nfunction AlertDialogPopup({ className, ...props }: React.ComponentProps<typeof AlertDialog.Popup>) {\n  return (\n    <AlertDialog.Popup\n      data-slot=\"alert-dialog-popup\"\n      className={cn(\n        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg shadow-black/5 transition-all duration-150 data-[ending-style]:scale-90 data-[ending-style]:opacity-0 data-[starting-style]:scale-90 data-[starting-style]:opacity-0 sm:rounded-lg',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\n// Alert Dialog Header (helper component)\nconst AlertDialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    data-slot=\"alert-dialog-header\"\n    className={cn('flex flex-col space-y-2 text-center sm:text-left', className)}\n    {...props}\n  />\n);\n\n// Alert Dialog Footer (helper component)\nconst AlertDialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    data-slot=\"alert-dialog-footer\"\n    className={cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2.5', className)}\n    {...props}\n  />\n);\n\n// Base UI Alert Dialog Title\nfunction AlertDialogTitle({ className, ...props }: React.ComponentProps<typeof AlertDialog.Title>) {\n  return (\n    <AlertDialog.Title data-slot=\"alert-dialog-title\" className={cn('text-lg font-semibold', className)} {...props} />\n  );\n}\n\n// Base UI Alert Dialog Description\nfunction AlertDialogDescription({ className, ...props }: React.ComponentProps<typeof AlertDialog.Description>) {\n  return (\n    <AlertDialog.Description\n      data-slot=\"alert-dialog-description\"\n      className={cn('text-sm text-muted-foreground', className)}\n      {...props}\n    />\n  );\n}\n\n// Base UI Alert Dialog Close (generic) with asChild support\nfunction AlertDialogClose({\n  asChild = false,\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AlertDialog.Close> & { asChild?: boolean }) {\n  const closeProps = {\n    'data-slot': 'alert-dialog-close' as const,\n    className: cn(className),\n    ...props,\n    ...(asChild && {\n      render: children as React.ReactElement<Record<string, unknown>, string | React.JSXElementConstructor<unknown>>,\n    }),\n  };\n\n  return asChild ? (\n    <AlertDialog.Close {...closeProps} />\n  ) : (\n    <AlertDialog.Close {...closeProps}>{children}</AlertDialog.Close>\n  );\n}\n\n// Exports with proper naming to match Base UI pattern\nexport {\n  AlertDialogRoot as AlertDialog,\n  AlertDialogTrigger,\n  AlertDialogPortal,\n  AlertDialogBackdrop,\n  AlertDialogPopup,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogClose,\n  AlertDialogHeader,\n  AlertDialogFooter,\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
