{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tabs-vertical",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "tailwind-merge",
    "class-variance-authority",
    "radix-ui",
    "lucide-react",
    "@radix-ui/react-direction",
    "next-themes",
    "jotai"
  ],
  "registryDependencies": ["https://reui.io/r/badge.json", "https://reui.io/r/tabs.json"],
  "files": [
    {
      "path": "registry/default/components/tabs/vertical.tsx",
      "content": "import { Badge } from '@/registry/default/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/registry/default/ui/tabs';\nimport { Bell, ShieldCheck, UserRound } from 'lucide-react';\nimport { useComponentPreview } from '@/components/component-preview';\n\nexport default function TabsDemo() {\n  const { rtl } = useComponentPreview();\n  const dir = rtl ? 'rtl' : 'ltr';\n\n  return (\n    <Tabs\n      defaultValue=\"profile\"\n      orientation=\"vertical\"\n      className=\"flex flex-col justify-stretch lg:flex-row gap-4 text-sm text-muted-foreground w-full lg:w-[500px] p-4 border border-border rounded-lg\"\n      dir={dir}\n    >\n      <div className=\"lg:w-[175px] lg:shrink-0\">\n        <TabsList variant=\"button\" className=\"flex flex-col items-stretch *:justify-start\">\n          <TabsTrigger value=\"profile\">\n            <UserRound /> Profile\n          </TabsTrigger>\n          <TabsTrigger value=\"security\">\n            <ShieldCheck /> Security\n          </TabsTrigger>\n          <TabsTrigger value=\"notifications\">\n            <Bell /> Notifications\n            <Badge variant=\"destructive\" shape=\"circle\" size=\"xs\">\n              5\n            </Badge>\n          </TabsTrigger>\n        </TabsList>\n      </div>\n\n      <div className=\"grow border-s border-border py-0 ps-4\">\n        <TabsContent value=\"profile\">Content for Profile</TabsContent>\n        <TabsContent value=\"security\">Content for Security</TabsContent>\n        <TabsContent value=\"notifications\">Content for Notifications</TabsContent>\n      </div>\n    </Tabs>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/badge.tsx",
      "content": "import * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { Slot as SlotPrimitive } from 'radix-ui';\n\nexport interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {\n  asChild?: boolean;\n  dotClassName?: string;\n  disabled?: boolean;\n}\n\nexport interface BadgeButtonProps\n  extends React.ButtonHTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeButtonVariants> {\n  asChild?: boolean;\n}\n\nexport type BadgeDotProps = React.HTMLAttributes<HTMLSpanElement>;\n\nconst badgeVariants = cva(\n  'inline-flex items-center whitespace-nowrap justify-center border border-transparent font-medium focus:outline-hidden focus:ring-2 focus:ring-ring focus:ring-offset-2 [&_svg]:-ms-px [&_svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        primary: 'bg-primary text-primary-foreground',\n        secondary: 'bg-secondary text-secondary-foreground',\n        success:\n          'bg-[var(--color-success-accent,var(--color-green-500))] text-[var(--color-success-foreground,var(--color-white))]',\n        warning:\n          'bg-[var(--color-warning-accent,var(--color-yellow-500))] text-[var(--color-warning-foreground,var(--color-white))]',\n        info: 'bg-[var(--color-info-accent,var(--color-violet-500))] text-[var(--color-info-foreground,var(--color-white))]',\n        outline: 'bg-transparent border border-border text-secondary-foreground',\n        destructive: 'bg-destructive text-destructive-foreground',\n      },\n      appearance: {\n        default: '',\n        light: '',\n        outline: '',\n        ghost: 'border-transparent bg-transparent',\n      },\n      disabled: {\n        true: 'opacity-50 pointer-events-none',\n      },\n      size: {\n        lg: 'rounded-md px-[0.5rem] h-7 min-w-7 gap-1.5 text-xs [&_svg]:size-3.5',\n        md: 'rounded-md px-[0.45rem] h-6 min-w-6 gap-1.5 text-xs [&_svg]:size-3.5 ',\n        sm: 'rounded-sm px-[0.325rem] h-5 min-w-5 gap-1 text-[0.6875rem] leading-[0.75rem] [&_svg]:size-3',\n        xs: 'rounded-sm px-[0.25rem] h-4 min-w-4 gap-1 text-[0.625rem] leading-[0.5rem] [&_svg]:size-3',\n      },\n      shape: {\n        default: '',\n        circle: 'rounded-full',\n      },\n    },\n    compoundVariants: [\n      /* Light */\n      {\n        variant: 'primary',\n        appearance: 'light',\n        className:\n          'text-[var(--color-primary-accent,var(--color-blue-700))] bg-[var(--color-primary-soft,var(--color-blue-50))] dark:bg-[var(--color-primary-soft,var(--color-blue-950))] dark:text-[var(--color-primary-soft,var(--color-blue-600))]',\n      },\n      {\n        variant: 'secondary',\n        appearance: 'light',\n        className: 'bg-secondary dark:bg-secondary/50 text-secondary-foreground',\n      },\n      {\n        variant: 'success',\n        appearance: 'light',\n        className:\n          'text-[var(--color-success-accent,var(--color-green-800))] bg-[var(--color-success-soft,var(--color-green-100))] dark:bg-[var(--color-success-soft,var(--color-green-950))] dark:text-[var(--color-success-soft,var(--color-green-600))]',\n      },\n      {\n        variant: 'warning',\n        appearance: 'light',\n        className:\n          'text-[var(--color-warning-accent,var(--color-yellow-700))] bg-[var(--color-warning-soft,var(--color-yellow-100))] dark:bg-[var(--color-warning-soft,var(--color-yellow-950))] dark:text-[var(--color-warning-soft,var(--color-yellow-600))]',\n      },\n      {\n        variant: 'info',\n        appearance: 'light',\n        className:\n          'text-[var(--color-info-accent,var(--color-violet-700))] bg-[var(--color-info-soft,var(--color-violet-100))] dark:bg-[var(--color-info-soft,var(--color-violet-950))] dark:text-[var(--color-info-soft,var(--color-violet-400))]',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'light',\n        className:\n          'text-[var(--color-destructive-accent,var(--color-red-700))] bg-[var(--color-destructive-soft,var(--color-red-50))] dark:bg-[var(--color-destructive-soft,var(--color-red-950))] dark:text-[var(--color-destructive-soft,var(--color-red-600))]',\n      },\n      /* Outline */\n      {\n        variant: 'primary',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-primary-accent,var(--color-blue-700))] border-[var(--color-primary-soft,var(--color-blue-100))] bg-[var(--color-primary-soft,var(--color-blue-50))] dark:bg-[var(--color-primary-soft,var(--color-blue-950))] dark:border-[var(--color-primary-soft,var(--color-blue-900))] dark:text-[var(--color-primary-soft,var(--color-blue-600))]',\n      },\n      {\n        variant: 'success',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-success-accent,var(--color-green-700))] border-[var(--color-success-soft,var(--color-green-200))] bg-[var(--color-success-soft,var(--color-green-50))] dark:bg-[var(--color-success-soft,var(--color-green-950))] dark:border-[var(--color-success-soft,var(--color-green-900))] dark:text-[var(--color-success-soft,var(--color-green-600))]',\n      },\n      {\n        variant: 'warning',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-warning-accent,var(--color-yellow-700))] border-[var(--color-warning-soft,var(--color-yellow-200))] bg-[var(--color-warning-soft,var(--color-yellow-50))] dark:bg-[var(--color-warning-soft,var(--color-yellow-950))] dark:border-[var(--color-warning-soft,var(--color-yellow-900))] dark:text-[var(--color-warning-soft,var(--color-yellow-600))]',\n      },\n      {\n        variant: 'info',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-info-accent,var(--color-violet-700))] border-[var(--color-info-soft,var(--color-violet-100))] bg-[var(--color-info-soft,var(--color-violet-50))] dark:bg-[var(--color-info-soft,var(--color-violet-950))] dark:border-[var(--color-info-soft,var(--color-violet-900))] dark:text-[var(--color-info-soft,var(--color-violet-400))]',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'outline',\n        className:\n          'text-[var(--color-destructive-accent,var(--color-red-700))] border-[var(--color-destructive-soft,var(--color-red-100))] bg-[var(--color-destructive-soft,var(--color-red-50))] dark:bg-[var(--color-destructive-soft,var(--color-red-950))] dark:border-[var(--color-destructive-soft,var(--color-red-900))] dark:text-[var(--color-destructive-soft,var(--color-red-600))]',\n      },\n      /* Ghost */\n      {\n        variant: 'primary',\n        appearance: 'ghost',\n        className: 'text-primary',\n      },\n      {\n        variant: 'secondary',\n        appearance: 'ghost',\n        className: 'text-secondary-foreground',\n      },\n      {\n        variant: 'success',\n        appearance: 'ghost',\n        className: 'text-[var(--color-success-accent,var(--color-green-500))]',\n      },\n      {\n        variant: 'warning',\n        appearance: 'ghost',\n        className: 'text-[var(--color-warning-accent,var(--color-yellow-500))]',\n      },\n      {\n        variant: 'info',\n        appearance: 'ghost',\n        className: 'text-[var(--color-info-accent,var(--color-violet-500))]',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'ghost',\n        className: 'text-destructive',\n      },\n\n      { size: 'lg', appearance: 'ghost', className: 'px-0' },\n      { size: 'md', appearance: 'ghost', className: 'px-0' },\n      { size: 'sm', appearance: 'ghost', className: 'px-0' },\n      { size: 'xs', appearance: 'ghost', className: 'px-0' },\n    ],\n    defaultVariants: {\n      variant: 'primary',\n      appearance: 'default',\n      size: 'md',\n    },\n  },\n);\n\nconst badgeButtonVariants = cva(\n  'cursor-pointer transition-all inline-flex items-center justify-center leading-none size-3.5 [&>svg]:opacity-100! [&>svg]:size-3.5! p-0 rounded-md -me-0.5 opacity-60 hover:opacity-100',\n  {\n    variants: {\n      variant: {\n        default: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nfunction Badge({\n  className,\n  variant,\n  size,\n  appearance,\n  shape,\n  asChild = false,\n  disabled,\n  ...props\n}: React.ComponentProps<'span'> & VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? SlotPrimitive.Slot : 'span';\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant, size, appearance, shape, disabled }), className)}\n      {...props}\n    />\n  );\n}\n\nfunction BadgeButton({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'button'> & VariantProps<typeof badgeButtonVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? SlotPrimitive.Slot : 'span';\n  return (\n    <Comp\n      data-slot=\"badge-button\"\n      className={cn(badgeButtonVariants({ variant, className }))}\n      role=\"button\"\n      {...props}\n    />\n  );\n}\n\nfunction BadgeDot({ className, ...props }: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"badge-dot\"\n      className={cn('size-1.5 rounded-full bg-[currentColor] opacity-75', className)}\n      {...props}\n    />\n  );\n}\n\nexport { Badge, BadgeButton, BadgeDot, badgeVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/tabs.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { Tabs as TabsPrimitive } from 'radix-ui';\n\n// Variants for TabsList\nconst tabsListVariants = cva('flex items-center shrink-0', {\n  variants: {\n    variant: {\n      default: 'bg-accent p-1',\n      button: '',\n      line: 'border-b border-border',\n    },\n    shape: {\n      default: '',\n      pill: '',\n    },\n    size: {\n      lg: 'gap-2.5',\n      md: 'gap-2',\n      sm: 'gap-1.5',\n      xs: 'gap-1',\n    },\n  },\n  compoundVariants: [\n    { variant: 'default', size: 'lg', className: 'p-1.5 gap-2.5' },\n    { variant: 'default', size: 'md', className: 'p-1 gap-2' },\n    { variant: 'default', size: 'sm', className: 'p-1 gap-1.5' },\n    { variant: 'default', size: 'xs', className: 'p-1 gap-1' },\n\n    {\n      variant: 'default',\n      shape: 'default',\n      size: 'lg',\n      className: 'rounded-lg',\n    },\n    {\n      variant: 'default',\n      shape: 'default',\n      size: 'md',\n      className: 'rounded-lg',\n    },\n    {\n      variant: 'default',\n      shape: 'default',\n      size: 'sm',\n      className: 'rounded-md',\n    },\n    {\n      variant: 'default',\n      shape: 'default',\n      size: 'xs',\n      className: 'rounded-md',\n    },\n\n    { variant: 'line', size: 'lg', className: 'gap-9' },\n    { variant: 'line', size: 'md', className: 'gap-8' },\n    { variant: 'line', size: 'sm', className: 'gap-4' },\n    { variant: 'line', size: 'xs', className: 'gap-4' },\n\n    {\n      variant: 'default',\n      shape: 'pill',\n      className: 'rounded-full [&_[role=tab]]:rounded-full',\n    },\n    {\n      variant: 'button',\n      shape: 'pill',\n      className: 'rounded-full [&_[role=tab]]:rounded-full',\n    },\n  ],\n  defaultVariants: {\n    variant: 'default',\n    size: 'md',\n  },\n});\n\n// Variants for TabsTrigger\nconst tabsTriggerVariants = cva(\n  'shrink-0 cursor-pointer whitespace-nowrap inline-flex justify-center items-center font-medium ring-offset-background transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-disabled:pointer-events-none data-disabled:opacity-50 [&_svg]:shrink-0 [&_svg]:text-muted-foreground [&:hover_svg]:text-primary [&[data-state=active]_svg]:text-primary',\n  {\n    variants: {\n      variant: {\n        default:\n          'text-muted-foreground data-[state=active]:bg-background hover:text-foreground data-[state=active]:text-foreground data-[state=active]:shadow-xs data-[state=active]:shadow-black/5',\n        button:\n          'focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 rounded-lg text-accent-foreground hover:text-foreground data-[state=active]:bg-accent data-[state=active]:text-foreground',\n        line: 'border-b-2 text-muted-foreground border-transparent data-[state=active]:border-primary hover:text-primary data-[state=active]:text-primary data-[state=active]:border-primary data-[state=active]:text-primary',\n      },\n      size: {\n        lg: 'gap-2.5 [&_svg]:size-5 text-sm',\n        md: 'gap-2 [&_svg]:size-4 text-sm',\n        sm: 'gap-1.5 [&_svg]:size-3.5 text-xs',\n        xs: 'gap-1 [&_svg]:size-3.5 text-xs',\n      },\n    },\n    compoundVariants: [\n      { variant: 'default', size: 'lg', className: 'py-2.5 px-4 rounded-md' },\n      { variant: 'default', size: 'md', className: 'py-1.5 px-3 rounded-md' },\n      { variant: 'default', size: 'sm', className: 'py-1.5 px-2.5 rounded-sm' },\n      { variant: 'default', size: 'xs', className: 'py-1 px-2 rounded-sm' },\n\n      { variant: 'button', size: 'lg', className: 'py-3 px-4 rounded-lg' },\n      { variant: 'button', size: 'md', className: 'py-2.5 px-3 rounded-lg' },\n      { variant: 'button', size: 'sm', className: 'py-2 px-2.5 rounded-md' },\n      { variant: 'button', size: 'xs', className: 'py-1.5 px-2 rounded-md' },\n\n      { variant: 'line', size: 'lg', className: 'py-3' },\n      { variant: 'line', size: 'md', className: 'py-2.5' },\n      { variant: 'line', size: 'sm', className: 'py-2' },\n      { variant: 'line', size: 'xs', className: 'py-1.5' },\n    ],\n    defaultVariants: {\n      variant: 'default',\n      size: 'md',\n    },\n  },\n);\n\n// Variants for TabsContent\nconst tabsContentVariants = cva(\n  'mt-2.5 focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n  {\n    variants: {\n      variant: {\n        default: '',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\n// Context\ntype TabsContextType = {\n  variant?: 'default' | 'button' | 'line';\n  size?: 'lg' | 'sm' | 'xs' | 'md';\n};\nconst TabsContext = React.createContext<TabsContextType>({\n  variant: 'default',\n  size: 'md',\n});\n\n// Components\nfunction Tabs({ className, ...props }: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return <TabsPrimitive.Root data-slot=\"tabs\" className={cn('', className)} {...props} />;\n}\n\nfunction TabsList({\n  className,\n  variant = 'default',\n  shape = 'default',\n  size = 'md',\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List> & VariantProps<typeof tabsListVariants>) {\n  return (\n    <TabsContext.Provider value={{ variant: variant || 'default', size: size || 'md' }}>\n      <TabsPrimitive.List\n        data-slot=\"tabs-list\"\n        className={cn(tabsListVariants({ variant, shape, size }), className)}\n        {...props}\n      />\n    </TabsContext.Provider>\n  );\n}\n\nfunction TabsTrigger({ className, ...props }: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  const { variant, size } = React.useContext(TabsContext);\n\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(tabsTriggerVariants({ variant, size }), className)}\n      {...props}\n    />\n  );\n}\n\nfunction TabsContent({\n  className,\n  variant,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content> & VariantProps<typeof tabsContentVariants>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn(tabsContentVariants({ variant }), className)}\n      {...props}\n    />\n  );\n}\n\nexport { Tabs, TabsContent, TabsList, TabsTrigger };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "components/component-preview.tsx",
      "content": "'use client';\n\nimport React, { ReactNode, useEffect, useState } from 'react';\nimport { useCopyToClipboard } from '@/registry/default/hooks/use-copy-to-clipboard';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Button } from '@/registry/default/ui/button';\nimport { Tabs, TabsList, TabsTrigger } from '@/registry/default/ui/tabs';\nimport { DirectionProvider } from '@radix-ui/react-direction';\nimport { Check, Copy, LoaderCircleIcon, Moon, RotateCw, Sun } from 'lucide-react';\nimport { useTheme } from 'next-themes';\nimport { trackCodeCopy, trackDirectionChange, trackViewChange } from '@/lib/analytics';\nimport { CliCodeCopyButton } from './cli-code-copy-button';\n\ntype themeType = 'dark' | 'light' | '';\n\ntype ComponentPreviewContext = {\n  path: string;\n  highlightedCode: string;\n  code: string;\n  codeHeight?: number;\n  codeCollapsed?: boolean;\n  view: 'code' | 'preview';\n  setView: (view: 'code' | 'preview') => void;\n  theme: themeType;\n  setTheme: React.Dispatch<React.SetStateAction<themeType>>;\n  rtl: boolean;\n  setRtl: React.Dispatch<React.SetStateAction<boolean>>;\n  reloadKey: number;\n  reload: () => void;\n  children: ReactNode;\n};\n\nexport interface ComponentPreviewProps {\n  path: string;\n  code: string;\n  highlightedCode: string;\n  codeHeight?: number;\n  codeCollapsed?: boolean;\n}\n\nconst ComponentPreviewContext = React.createContext<ComponentPreviewContext | null>(null);\n\nexport function useComponentPreview() {\n  const context = React.useContext(ComponentPreviewContext);\n  if (!context) {\n    throw new Error('useComponentPreview must be used within a ComponentPreviewProvider.');\n  }\n  return context;\n}\n\nfunction ComponentPreviewProvider({\n  path,\n  code,\n  highlightedCode,\n  codeHeight,\n  children,\n}: {\n  path: string;\n  code: string;\n  highlightedCode: string;\n  codeHeight?: number;\n  children: ReactNode;\n}) {\n  const [view, setView] = useState<ComponentPreviewContext['view']>('preview');\n  const [theme, setTheme] = useState<themeType>('');\n  const [rtl, setRtl] = useState(false);\n  const [reloadKey, setReloadKey] = useState(0);\n\n  const reload = () => {\n    setReloadKey((prev) => prev + 1);\n  };\n\n  return (\n    <ComponentPreviewContext.Provider\n      value={{\n        path,\n        code,\n        highlightedCode,\n        codeHeight,\n        children,\n        view,\n        setView,\n        theme,\n        setTheme,\n        rtl,\n        setRtl,\n        reloadKey,\n        reload,\n      }}\n    >\n      <div\n        data-view={view}\n        className=\"group/block-view-wrapper flex min-w-0 flex-col items-stretch gap-4\"\n        style={\n          {\n            '--height': `${codeHeight || ''}px`,\n          } as React.CSSProperties\n        }\n      >\n        {children}\n      </div>\n    </ComponentPreviewContext.Provider>\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction ThemeToggleButton() {\n  const { resolvedTheme } = useTheme();\n  const { theme, setTheme } = useComponentPreview();\n  const [activeTheme, setActiveTheme] = useState<string | undefined>(undefined);\n\n  useEffect(() => {\n    setActiveTheme(theme === '' ? resolvedTheme : theme);\n  }, [theme, resolvedTheme]);\n\n  const toggleTheme = () => {\n    const newTheme = activeTheme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n  };\n\n  return (\n    <Button mode=\"icon\" size=\"sm\" variant=\"outline\" className=\"size-7.5\" onClick={toggleTheme}>\n      {activeTheme === 'dark' ? <Sun className=\"h-3.5 w-3.5\" /> : <Moon className=\"h-3.5 w-3.5\" />}\n    </Button>\n  );\n}\n\nfunction RtlToggleButton() {\n  const { path, rtl, setRtl } = useComponentPreview();\n\n  return (\n    <Button\n      mode=\"icon\"\n      size=\"sm\"\n      variant=\"outline\"\n      className={cn('size-7.5 leading-[0] text-muted-foreground text-[0.6rem]')}\n      onClick={() => {\n        const newDirection = rtl ? 'ltr' : 'rtl';\n        setRtl(!rtl);\n        trackDirectionChange(path, newDirection);\n      }}\n    >\n      {rtl ? 'LTR' : 'RTL'}\n    </Button>\n  );\n}\n\nfunction ReloadButton() {\n  const { reload } = useComponentPreview();\n\n  return (\n    <Button mode=\"icon\" size=\"sm\" variant=\"outline\" className=\"size-7.5\" onClick={reload}>\n      <RotateCw className=\"size-3.5\" />\n    </Button>\n  );\n}\n\nfunction ComponentPreviewToolbar() {\n  const { setView } = useComponentPreview();\n  const { path } = useComponentPreview();\n\n  return (\n    <div className=\"flex items-center gap-2.5 justify-between\">\n      <div className={cn('w-full flex items-center justify-between gap-2')}>\n        <Tabs\n          defaultValue=\"preview\"\n          onValueChange={(value) => {\n            setView(value as 'preview' | 'code');\n            trackViewChange(path, value as 'preview' | 'code');\n          }}\n          className=\"flex\"\n        >\n          <TabsList className=\"h-7.5 flex items-stretch rounded-md gap-1 px-1 py-1 bg-accent/70\">\n            <TabsTrigger value=\"preview\" className=\"rounded-sm text-xs px-2.5\">\n              Preview\n            </TabsTrigger>\n            <TabsTrigger value=\"code\" className=\"rounded-sm text-xs px-2.5\">\n              Code\n            </TabsTrigger>\n          </TabsList>\n        </Tabs>\n\n        <div className=\"flex items-center gap-2\">\n          <CliCodeCopyButton name={path.replaceAll('/', '-')} />\n          <RtlToggleButton />\n          <ReloadButton />\n          <PreviewCopyCodeButton />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction PreviewCopyCodeButton() {\n  const { code, path } = useComponentPreview();\n  const { copy, copied } = useCopyToClipboard();\n\n  return (\n    <Button\n      mode=\"icon\"\n      size=\"sm\"\n      variant=\"outline\"\n      onClick={() => {\n        copy(code);\n        // Track the copy event\n        trackCodeCopy(path);\n      }}\n    >\n      {copied ? <Check /> : <Copy />}\n    </Button>\n  );\n}\n\nfunction ComponentPreviewDemo() {\n  const { theme, rtl, path, view, reloadKey } = useComponentPreview();\n  const [Component, setComponent] = useState<React.ComponentType | null>(null);\n\n  // Load the component dynamically\n  useEffect(() => {\n    const loadComponent = async () => {\n      try {\n        // Clear the component first to show loading state\n        setComponent(null);\n\n        // Force module reload by adding timestamp to bypass cache\n        const ComponentModule = await import(`@/registry/default/components/${path}`);\n        setComponent(() => ComponentModule.default);\n      } catch (error) {\n        console.error(`Failed to load component at path: ${path}`, error);\n        // Fallback: try loading without timestamp\n        try {\n          const ComponentModule = await import(`@/registry/default/components/${path}`);\n          setComponent(() => ComponentModule.default);\n        } catch (fallbackError) {\n          console.error(`Fallback load also failed:`, fallbackError);\n        }\n      }\n    };\n\n    loadComponent();\n  }, [path, reloadKey]); // reloadKey dependency will trigger reload\n\n  if (view !== 'preview') return null; // Return null if not in preview mode\n\n  // Always render component skeleton\n  return (\n    <DirectionProvider dir={rtl ? 'rtl' : 'ltr'}>\n      <div\n        className={cn(\n          'flex lg:min-h-[350px] grow justify-center items-center bg-card border border-border/90 rounded-lg p-6 lg:p-10',\n          theme === 'dark' && 'dark',\n          theme === 'light' && 'light',\n        )}\n        dir={rtl ? 'rtl' : 'ltr'}\n        style={{ direction: rtl ? 'rtl' : 'ltr' }}\n      >\n        {Component ? (\n          <Component key={reloadKey} />\n        ) : (\n          <div className=\"h-full text-xs flex items-center justify-center gap-1.5 text-muted-foreground\">\n            <LoaderCircleIcon className=\"size-4 animate-spin\" />\n            Loading\n          </div>\n        )}\n      </div>\n    </DirectionProvider>\n  );\n}\n\nfunction ComponentPreviewCode() {\n  const { view, highlightedCode } = useComponentPreview();\n\n  if (view !== 'code') return;\n\n  return (\n    <div>\n      <div className={cn('relative overflow-hidden rounded-xl bg-neutral-950 dark:bg-neutral-900 text-white')}>\n        <div\n          data-rehype-pretty-code-fragment\n          dangerouslySetInnerHTML={{ __html: highlightedCode || '' }}\n          className=\"\n              relative [tab-size:2] flex-1 overflow-hidden after:absolute after:inset-y-0 after:left-0 after:w-10 after:bg-neutral-950 dark:after:bg-neutral-900 [&_.line:before]:sticky [&_.line:before]:left-2 [&_.line:before]:z-10 [&_.line:before]:translate-y-[-1px] [&_.line:before]:pr-1 [&_pre]:max-h-(--height) [&_pre]:overflow-auto [&_pre]:!bg-transparent [&_pre]:pt-4 [&_pre]:font-mono [&_pre]:text-sm [&_pre]:leading-relaxed\n            \"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function ComponentPreview({ path, code, highlightedCode, codeHeight = 800 }: ComponentPreviewProps) {\n  if (!code) {\n    return null;\n  }\n\n  return (\n    <div className=\"pt-3.5 mb-14\">\n      <ComponentPreviewProvider path={path} code={code} highlightedCode={highlightedCode} codeHeight={codeHeight}>\n        <ComponentPreviewToolbar />\n        <ComponentPreviewDemo />\n        <ComponentPreviewCode />\n      </ComponentPreviewProvider>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "registry/default/hooks/use-copy-to-clipboard.ts",
      "content": "'use client';\n\nimport * as React from 'react';\n\nexport function useCopyToClipboard({\n  timeout = 2000,\n  onCopy,\n}: {\n  timeout?: number;\n  onCopy?: () => void;\n} = {}) {\n  const [copied, setCopied] = React.useState(false);\n\n  const copy = (value: string) => {\n    if (typeof window === 'undefined' || !navigator.clipboard.writeText) {\n      return;\n    }\n\n    if (!value) return;\n\n    navigator.clipboard.writeText(value).then(() => {\n      setCopied(true);\n\n      if (onCopy) {\n        onCopy();\n      }\n\n      setTimeout(() => {\n        setCopied(false);\n      }, timeout);\n    }, console.error);\n  };\n\n  return { copied, copy };\n}\n",
      "type": "registry:hook",
      "target": ""
    },
    {
      "path": "registry/default/ui/button.tsx",
      "content": "import * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { ChevronDown, LucideIcon } from 'lucide-react';\nimport { Slot as SlotPrimitive } from 'radix-ui';\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  'cursor-pointer group whitespace-nowrap focus-visible:outline-hidden inline-flex items-center justify-center has-data-[arrow=true]:justify-between whitespace-nowrap text-sm font-medium ring-offset-background transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-60 [&_svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        primary: 'bg-primary text-primary-foreground hover:bg-primary/90 data-[state=open]:bg-primary/90',\n        mono: 'bg-zinc-950 text-white dark:bg-zinc-300 dark:text-black hover:bg-zinc-950/90 dark:hover:bg-zinc-300/90 data-[state=open]:bg-zinc-950/90 dark:data-[state=open]:bg-zinc-300/90',\n        destructive:\n          'bg-destructive text-destructive-foreground hover:bg-destructive/90 data-[state=open]:bg-destructive/90',\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/90 data-[state=open]:bg-secondary/90',\n        outline: 'bg-background text-accent-foreground border border-input hover:bg-accent data-[state=open]:bg-accent',\n        dashed:\n          'text-accent-foreground border border-input border-dashed bg-background hover:bg-accent hover:text-accent-foreground data-[state=open]:text-accent-foreground',\n        ghost:\n          'text-accent-foreground hover:bg-accent hover:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',\n        dim: 'text-muted-foreground hover:text-foreground data-[state=open]:text-foreground',\n        foreground: '',\n        inverse: '',\n      },\n      appearance: {\n        default: '',\n        ghost: '',\n      },\n      underline: {\n        solid: '',\n        dashed: '',\n      },\n      underlined: {\n        solid: '',\n        dashed: '',\n      },\n      size: {\n        lg: 'h-10 rounded-md px-4 text-sm gap-1.5 [&_svg:not([class*=size-])]:size-4',\n        md: 'h-8.5 rounded-md px-3 gap-1.5 text-[0.8125rem] leading-(--text-sm--line-height) [&_svg:not([class*=size-])]:size-4',\n        sm: 'h-7 rounded-md px-2.5 gap-1.25 text-xs [&_svg:not([class*=size-])]:size-3.5',\n        icon: 'size-8.5 rounded-md [&_svg:not([class*=size-])]:size-4 shrink-0',\n      },\n      autoHeight: {\n        true: '',\n        false: '',\n      },\n      shape: {\n        default: '',\n        circle: 'rounded-full',\n      },\n      mode: {\n        default: 'focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n        icon: 'focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 shrink-0',\n        link: 'text-primary h-auto p-0 bg-transparent rounded-none hover:bg-transparent data-[state=open]:bg-transparent',\n        input: `\n            justify-start font-normal hover:bg-background [&_svg]:transition-colors [&_svg]:hover:text-foreground data-[state=open]:bg-background \n            focus-visible:border-ring focus-visible:outline-hidden focus-visible:ring-[3px] focus-visible:ring-ring/30 \n            [[data-state=open]>&]:border-ring [[data-state=open]>&]:outline-hidden [[data-state=open]>&]:ring-[3px] \n            [[data-state=open]>&]:ring-ring/30 \n            aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n            in-data-[invalid=true]:border-destructive/60 in-data-[invalid=true]:ring-destructive/10  dark:in-data-[invalid=true]:border-destructive dark:in-data-[invalid=true]:ring-destructive/20\n          `,\n      },\n      placeholder: {\n        true: 'text-muted-foreground',\n        false: '',\n      },\n    },\n    compoundVariants: [\n      // Icons opacity for default mode\n      {\n        variant: 'ghost',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'outline',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'dashed',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'secondary',\n        mode: 'default',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n\n      // Icons opacity for default mode\n      {\n        variant: 'outline',\n        mode: 'input',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n      {\n        variant: 'outline',\n        mode: 'icon',\n        className: '[&_svg:not([role=img]):not([class*=text-]):not([class*=opacity-])]:opacity-60',\n      },\n\n      // Auto height\n      {\n        size: 'md',\n        autoHeight: true,\n        className: 'h-auto min-h-8.5',\n      },\n      {\n        size: 'sm',\n        autoHeight: true,\n        className: 'h-auto min-h-7',\n      },\n      {\n        size: 'lg',\n        autoHeight: true,\n        className: 'h-auto min-h-10',\n      },\n\n      // Shadow support\n      {\n        variant: 'primary',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'mono',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'secondary',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'outline',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'dashed',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'destructive',\n        mode: 'default',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n\n      // Shadow support\n      {\n        variant: 'primary',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'mono',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'secondary',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'outline',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'dashed',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n      {\n        variant: 'destructive',\n        mode: 'icon',\n        appearance: 'default',\n        className: 'shadow-xs shadow-black/5',\n      },\n\n      // Link\n      {\n        variant: 'primary',\n        mode: 'link',\n        underline: 'solid',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-solid',\n      },\n      {\n        variant: 'primary',\n        mode: 'link',\n        underline: 'dashed',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-dashed decoration-1',\n      },\n      {\n        variant: 'primary',\n        mode: 'link',\n        underlined: 'solid',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-solid',\n      },\n      {\n        variant: 'primary',\n        mode: 'link',\n        underlined: 'dashed',\n        className:\n          'font-medium text-primary hover:text-primary/90 [&_svg]:opacity-60 underline underline-offset-4 decoration-dashed decoration-1',\n      },\n\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underline: 'solid',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-solid',\n      },\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underline: 'dashed',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-dashed decoration-1',\n      },\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underlined: 'solid',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-solid',\n      },\n      {\n        variant: 'inverse',\n        mode: 'link',\n        underlined: 'dashed',\n        className:\n          'font-medium text-inherit [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-dashed decoration-1',\n      },\n\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underline: 'solid',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-solid',\n      },\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underline: 'dashed',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 hover:underline hover:underline-offset-4 hover:decoration-dashed decoration-1',\n      },\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underlined: 'solid',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-solid',\n      },\n      {\n        variant: 'foreground',\n        mode: 'link',\n        underlined: 'dashed',\n        className:\n          'font-medium text-foreground [&_svg:not([role=img]):not([class*=text-])]:opacity-60 underline underline-offset-4 decoration-dashed decoration-1',\n      },\n\n      // Ghost\n      {\n        variant: 'primary',\n        appearance: 'ghost',\n        className: 'bg-transparent text-primary/90 hover:bg-primary/5 data-[state=open]:bg-primary/5',\n      },\n      {\n        variant: 'destructive',\n        appearance: 'ghost',\n        className: 'bg-transparent text-destructive/90 hover:bg-destructive/5 data-[state=open]:bg-destructive/5',\n      },\n      {\n        variant: 'ghost',\n        mode: 'icon',\n        className: 'text-muted-foreground',\n      },\n\n      // Size\n      {\n        size: 'sm',\n        mode: 'icon',\n        className: 'w-7 h-7 p-0 [[&_svg:not([class*=size-])]:size-3.5',\n      },\n      {\n        size: 'md',\n        mode: 'icon',\n        className: 'w-8.5 h-8.5 p-0 [&_svg:not([class*=size-])]:size-4',\n      },\n      {\n        size: 'icon',\n        className: 'w-8.5 h-8.5 p-0 [&_svg:not([class*=size-])]:size-4',\n      },\n      {\n        size: 'lg',\n        mode: 'icon',\n        className: 'w-10 h-10 p-0 [&_svg:not([class*=size-])]:size-4',\n      },\n\n      // Input mode\n      {\n        mode: 'input',\n        placeholder: true,\n        variant: 'outline',\n        className: 'font-normal text-muted-foreground',\n      },\n      {\n        mode: 'input',\n        variant: 'outline',\n        size: 'sm',\n        className: 'gap-1.25',\n      },\n      {\n        mode: 'input',\n        variant: 'outline',\n        size: 'md',\n        className: 'gap-1.5',\n      },\n      {\n        mode: 'input',\n        variant: 'outline',\n        size: 'lg',\n        className: 'gap-1.5',\n      },\n    ],\n    defaultVariants: {\n      variant: 'primary',\n      mode: 'default',\n      size: 'md',\n      shape: 'default',\n      appearance: 'default',\n    },\n  },\n);\n\nfunction Button({\n  className,\n  selected,\n  variant,\n  shape,\n  appearance,\n  mode,\n  size,\n  autoHeight,\n  underlined,\n  underline,\n  asChild = false,\n  placeholder = false,\n  ...props\n}: React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    selected?: boolean;\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? SlotPrimitive.Slot : 'button';\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(\n        buttonVariants({\n          variant,\n          size,\n          shape,\n          appearance,\n          mode,\n          autoHeight,\n          placeholder,\n          underlined,\n          underline,\n          className,\n        }),\n        asChild && props.disabled && 'pointer-events-none opacity-50',\n      )}\n      {...(selected && { 'data-state': 'open' })}\n      {...props}\n    />\n  );\n}\n\ninterface ButtonArrowProps extends React.SVGProps<SVGSVGElement> {\n  icon?: LucideIcon; // Allows passing any Lucide icon\n}\n\nfunction ButtonArrow({ icon: Icon = ChevronDown, className, ...props }: ButtonArrowProps) {\n  return <Icon data-slot=\"button-arrow\" className={cn('ms-auto -me-1', className)} {...props} />;\n}\n\nexport { Button, ButtonArrow, buttonVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "lib/analytics.ts",
      "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\ntype EventProps = {\n  name: string;\n  properties?: Record<string, string | number | boolean>;\n};\n\nexport const trackEvent = ({ name, properties }: EventProps) => {\n  // Track in Google Analytics\n  if (typeof window !== 'undefined' && (window as any).gtag) {\n    // GA4 recommended event structure\n    (window as any).gtag('event', name, {\n      ...properties,\n      // GA4 recommended parameters\n      event_category: properties?.category || 'engagement',\n      event_label: properties?.label,\n      value: properties?.value,\n    });\n  }\n};\n\n// Helper function to safely get component name\nconst getComponentName = (componentPath: string): string => {\n  const parts = componentPath.split('/');\n  return parts.length > 1 ? parts[0] : componentPath;\n};\n\n// Function to track code copy events\nexport const trackCodeCopy = (componentPath: string) => {\n  const componentName = getComponentName(componentPath);\n  trackEvent({\n    name: 'doc_copy',\n    properties: {\n      component_name: componentName,\n      content_type: 'code',\n      category: 'engagement',\n      label: `Code Copy - ${componentPath}`,\n    },\n  });\n};\n\n// Function to track theme mode changes\nexport const trackThemeChange = (componentPath: string, newTheme: 'dark' | 'light') => {\n  const componentName = getComponentName(componentPath);\n  trackEvent({\n    name: 'doc_select_theme',\n    properties: {\n      component_name: componentName,\n      theme_mode: newTheme,\n      category: 'engagement',\n      label: `Theme Change - ${componentPath}`,\n    },\n  });\n};\n\n// Function to track RTL/LTR changes\nexport const trackDirectionChange = (componentPath: string, newDirection: 'rtl' | 'ltr') => {\n  const componentName = getComponentName(componentPath);\n  trackEvent({\n    name: 'doc_select_direction',\n    properties: {\n      component_name: componentName,\n      text_direction: newDirection,\n      category: 'engagement',\n      label: `Direction Change - ${componentPath}`,\n    },\n  });\n};\n\n// Function to track view mode changes\nexport const trackViewChange = (componentPath: string, newView: 'preview' | 'code') => {\n  const componentName = getComponentName(componentPath);\n  trackEvent({\n    name: 'doc_select_view',\n    properties: {\n      component_name: componentName,\n      view_mode: newView,\n      category: 'engagement',\n      label: `View Change - ${componentPath}`,\n    },\n  });\n};\n\n// Function to track item creation events\nexport const trackItemCreate = (module: string, itemType: string, itemId?: string | number) => {\n  trackEvent({\n    name: 'crud_create',\n    properties: {\n      module,\n      item_type: itemType,\n      ...(itemId && { item_id: itemId.toString() }),\n      category: 'crud',\n      label: `Create ${itemType} - ${module}`,\n    },\n  });\n};\n\n// Function to track item view/read events\nexport const trackItemView = (module: string, itemType: string, itemId: string | number) => {\n  trackEvent({\n    name: 'crud_view',\n    properties: {\n      module,\n      item_type: itemType,\n      item_id: itemId.toString(),\n      category: 'crud',\n      label: `View ${itemType} - ${module}`,\n    },\n  });\n};\n\n// Function to track item update events\nexport const trackItemUpdate = (module: string, itemType: string, itemId: string | number) => {\n  trackEvent({\n    name: 'crud_update',\n    properties: {\n      module,\n      item_type: itemType,\n      item_id: itemId.toString(),\n      category: 'crud',\n      label: `Update ${itemType} - ${module}`,\n    },\n  });\n};\n\n// Function to track item delete events\nexport const trackItemDelete = (\n  module: string,\n  itemType: string,\n  itemId: string | number,\n  isHardDelete: boolean = false,\n) => {\n  trackEvent({\n    name: 'crud_delete',\n    properties: {\n      module,\n      item_type: itemType,\n      item_id: itemId.toString(),\n      delete_type: isHardDelete ? 'hard' : 'soft',\n      category: 'crud',\n      label: `Delete ${itemType} - ${module}`,\n    },\n  });\n};\n\n// Function to track item restore events\nexport const trackItemRestore = (module: string, itemType: string, itemId: string | number) => {\n  trackEvent({\n    name: 'crud_restore',\n    properties: {\n      module,\n      item_type: itemType,\n      item_id: itemId.toString(),\n      category: 'crud',\n      label: `Restore ${itemType} - ${module}`,\n    },\n  });\n};\n\n// Function to track block code copy events\nexport const trackBlockCodeCopy = (blockName: string, blockPath?: string) => {\n  trackEvent({\n    name: 'block_code_copy',\n    properties: {\n      block_name: blockName,\n      block_path: blockPath || '',\n      content_type: 'code',\n      category: 'engagement',\n      label: `Block Code Copy - ${blockName}`,\n    },\n  });\n};\n\n// Function to track block CLI command copy events\nexport const trackBlockCliCopy = (blockName: string, packageManager: string) => {\n  trackEvent({\n    name: 'block_cli_copy',\n    properties: {\n      block_name: blockName,\n      package_manager: packageManager,\n      content_type: 'cli_command',\n      category: 'engagement',\n      label: `Block CLI Copy - ${blockName}`,\n    },\n  });\n};\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "components/cli-code-copy-button.tsx",
      "content": "import { Button } from '@/registry/default/ui/button';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/registry/default/ui/tooltip';\nimport { Check } from 'lucide-react';\nimport { trackBlockCliCopy } from '@/lib/analytics';\nimport { useConfig } from '@/hooks/use-config';\nimport { useCopyToClipboard } from '@/hooks/use-copy-to-clipboard';\n\nexport function CliCodeCopyButton({ name }: { name: string } & React.ComponentProps<typeof Button>) {\n  const { copy, copied } = useCopyToClipboard();\n  const [config] = useConfig();\n  const packageManager = config.packageManager || 'pnpm';\n  const commands = {\n    pnpm: `pnpm dlx shadcn@latest add https://reui.io/r/${name}.json`,\n    npm: `npx shadcn@latest add https://reui.io/r/${name}.json`,\n    yarn: `npx shadcn@latest add https://reui.io/r/${name}.json`,\n    bun: `bunx --bun shadcn@latest add https://reui.io/r/${name}.json`,\n  };\n\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            className=\"h-7.5 text-muted-foreground w-36 justify-start\"\n            title=\"Copy CLI command\"\n            onClick={() => {\n              copy(commands[packageManager]);\n              // Track the CLI command copy event\n              trackBlockCliCopy(name, packageManager);\n            }}\n          >\n            {copied ? <Check className=\"text-secondary-foreground\" /> : '>_'}\n            <span className=\"truncate\">{commands[packageManager]}</span>\n          </Button>\n        </TooltipTrigger>\n        <TooltipContent>{commands[packageManager]}</TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "registry/default/ui/tooltip.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { Tooltip as TooltipPrimitive } from 'radix-ui';\n\nfunction TooltipProvider({ delayDuration = 0, ...props }: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return <TooltipPrimitive.Provider data-slot=\"tooltip-provider\" delayDuration={delayDuration} {...props} />;\n}\n\nfunction Tooltip({ ...props }: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  );\n}\n\nfunction TooltipTrigger({ ...props }: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />;\n}\n\nconst tooltipVariants = cva(\n  'z-50 overflow-hidden rounded-md px-3 py-1.5 text-xs animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n  {\n    variants: {\n      variant: {\n        light: 'border border-border bg-background text-foreground shadow-md shadow-black/5',\n        dark: 'dark:border dark:border-border bg-zinc-950 text-white dark:bg-zinc-300 dark:text-black shadow-md shadow-black/5',\n      },\n    },\n    defaultVariants: {\n      variant: 'dark',\n    },\n  },\n);\n\nfunction TooltipContent({\n  className,\n  sideOffset = 4,\n  variant,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content> & VariantProps<typeof tooltipVariants>) {\n  return (\n    <TooltipPrimitive.Content\n      data-slot=\"tooltip-content\"\n      sideOffset={sideOffset}\n      className={cn(tooltipVariants({ variant }), className)}\n      {...props}\n    />\n  );\n}\n\nexport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "hooks/use-config.ts",
      "content": "import { useAtom } from 'jotai';\nimport { atomWithStorage } from 'jotai/utils';\n\ntype Config = {\n  packageManager: 'npm' | 'yarn' | 'pnpm' | 'bun';\n};\n\nconst configAtom = atomWithStorage<Config>('config', {\n  packageManager: 'pnpm',\n});\n\nexport function useConfig() {\n  return useAtom(configAtom);\n}\n",
      "type": "registry:hook",
      "target": ""
    },
    {
      "path": "hooks/use-copy-to-clipboard.ts",
      "content": "'use client';\n\nimport * as React from 'react';\n\nexport function useCopyToClipboard({\n  timeout = 2000,\n  onCopy,\n}: {\n  timeout?: number;\n  onCopy?: () => void;\n} = {}) {\n  const [copied, setCopied] = React.useState(false);\n\n  const copy = (value: string) => {\n    if (typeof window === 'undefined' || !navigator.clipboard.writeText) {\n      return;\n    }\n\n    if (!value) return;\n\n    navigator.clipboard.writeText(value).then(() => {\n      setCopied(true);\n\n      if (onCopy) {\n        onCopy();\n      }\n\n      setTimeout(() => {\n        setCopied(false);\n      }, timeout);\n    }, console.error);\n  };\n\n  return { copied, copy };\n}\n",
      "type": "registry:hook",
      "target": ""
    }
  ]
}
