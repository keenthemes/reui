{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "stepper",
  "type": "registry:ui",
  "dependencies": ["clsx", "tailwind-merge"],
  "files": [
    {
      "path": "registry/default/ui/stepper.tsx",
      "content": "/* eslint-disable react-hooks/exhaustive-deps */\n\n'use client';\n\nimport * as React from 'react';\nimport { createContext, useContext } from 'react';\nimport { cn } from '@/registry/default/lib/utils';\n\n// Types\ntype StepperOrientation = 'horizontal' | 'vertical';\ntype StepState = 'active' | 'completed' | 'inactive' | 'loading';\ntype StepIndicators = {\n  active?: React.ReactNode;\n  completed?: React.ReactNode;\n  inactive?: React.ReactNode;\n  loading?: React.ReactNode;\n};\n\ninterface StepperContextValue {\n  activeStep: number;\n  setActiveStep: (step: number) => void;\n  stepsCount: number;\n  orientation: StepperOrientation;\n  registerTrigger: (node: HTMLButtonElement | null) => void;\n  triggerNodes: HTMLButtonElement[];\n  focusNext: (currentIdx: number) => void;\n  focusPrev: (currentIdx: number) => void;\n  focusFirst: () => void;\n  focusLast: () => void;\n  indicators: StepIndicators;\n}\n\ninterface StepItemContextValue {\n  step: number;\n  state: StepState;\n  isDisabled: boolean;\n  isLoading: boolean;\n}\n\nconst StepperContext = createContext<StepperContextValue | undefined>(undefined);\nconst StepItemContext = createContext<StepItemContextValue | undefined>(undefined);\n\nfunction useStepper() {\n  const ctx = useContext(StepperContext);\n  if (!ctx) throw new Error('useStepper must be used within a Stepper');\n  return ctx;\n}\n\nfunction useStepItem() {\n  const ctx = useContext(StepItemContext);\n  if (!ctx) throw new Error('useStepItem must be used within a StepperItem');\n  return ctx;\n}\n\ninterface StepperProps extends React.HTMLAttributes<HTMLDivElement> {\n  defaultValue?: number;\n  value?: number;\n  onValueChange?: (value: number) => void;\n  orientation?: StepperOrientation;\n  indicators?: StepIndicators;\n}\n\nfunction Stepper({\n  defaultValue = 1,\n  value,\n  onValueChange,\n  orientation = 'horizontal',\n  className,\n  children,\n  indicators = {},\n  ...props\n}: StepperProps) {\n  const [activeStep, setActiveStep] = React.useState(defaultValue);\n  const [triggerNodes, setTriggerNodes] = React.useState<HTMLButtonElement[]>([]);\n\n  // Register/unregister triggers\n  const registerTrigger = React.useCallback((node: HTMLButtonElement | null) => {\n    setTriggerNodes((prev) => {\n      if (node && !prev.includes(node)) {\n        return [...prev, node];\n      } else if (!node && prev.includes(node!)) {\n        return prev.filter((n) => n !== node);\n      } else {\n        return prev;\n      }\n    });\n  }, []);\n\n  const handleSetActiveStep = React.useCallback(\n    (step: number) => {\n      if (value === undefined) {\n        setActiveStep(step);\n      }\n      onValueChange?.(step);\n    },\n    [value, onValueChange],\n  );\n\n  const currentStep = value ?? activeStep;\n\n  // Keyboard navigation logic\n  const focusTrigger = (idx: number) => {\n    if (triggerNodes[idx]) triggerNodes[idx].focus();\n  };\n  const focusNext = (currentIdx: number) => focusTrigger((currentIdx + 1) % triggerNodes.length);\n  const focusPrev = (currentIdx: number) => focusTrigger((currentIdx - 1 + triggerNodes.length) % triggerNodes.length);\n  const focusFirst = () => focusTrigger(0);\n  const focusLast = () => focusTrigger(triggerNodes.length - 1);\n\n  // Context value\n  const contextValue = React.useMemo<StepperContextValue>(\n    () => ({\n      activeStep: currentStep,\n      setActiveStep: handleSetActiveStep,\n      stepsCount: React.Children.toArray(children).filter(\n        (child): child is React.ReactElement =>\n          React.isValidElement(child) && (child.type as { displayName?: string }).displayName === 'StepperItem',\n      ).length,\n      orientation,\n      registerTrigger,\n      focusNext,\n      focusPrev,\n      focusFirst,\n      focusLast,\n      triggerNodes,\n      indicators,\n    }),\n    [currentStep, handleSetActiveStep, children, orientation, registerTrigger, triggerNodes],\n  );\n\n  return (\n    <StepperContext.Provider value={contextValue}>\n      <div\n        role=\"tablist\"\n        aria-orientation={orientation}\n        data-slot=\"stepper\"\n        className={cn('w-full', className)}\n        data-orientation={orientation}\n        {...props}\n      >\n        {children}\n      </div>\n    </StepperContext.Provider>\n  );\n}\n\ninterface StepperItemProps extends React.HTMLAttributes<HTMLDivElement> {\n  step: number;\n  completed?: boolean;\n  disabled?: boolean;\n  loading?: boolean;\n}\n\nfunction StepperItem({\n  step,\n  completed = false,\n  disabled = false,\n  loading = false,\n  className,\n  children,\n  ...props\n}: StepperItemProps) {\n  const { activeStep } = useStepper();\n\n  const state: StepState = completed || step < activeStep ? 'completed' : activeStep === step ? 'active' : 'inactive';\n\n  const isLoading = loading && step === activeStep;\n\n  return (\n    <StepItemContext.Provider value={{ step, state, isDisabled: disabled, isLoading }}>\n      <div\n        data-slot=\"stepper-item\"\n        className={cn(\n          'group/step flex items-center justify-center group-data-[orientation=horizontal]/stepper-nav:flex-row group-data-[orientation=vertical]/stepper-nav:flex-col not-last:flex-1',\n          className,\n        )}\n        data-state={state}\n        {...(isLoading ? { 'data-loading': true } : {})}\n        {...props}\n      >\n        {children}\n      </div>\n    </StepItemContext.Provider>\n  );\n}\n\ninterface StepperTriggerProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  asChild?: boolean;\n}\n\nfunction StepperTrigger({ asChild = false, className, children, tabIndex, ...props }: StepperTriggerProps) {\n  const { state, isLoading } = useStepItem();\n  const stepperCtx = useStepper();\n  const { setActiveStep, activeStep, registerTrigger, triggerNodes, focusNext, focusPrev, focusFirst, focusLast } =\n    stepperCtx;\n  const { step, isDisabled } = useStepItem();\n  const isSelected = activeStep === step;\n  const id = `stepper-tab-${step}`;\n  const panelId = `stepper-panel-${step}`;\n\n  // Register this trigger for keyboard navigation\n  const btnRef = React.useRef<HTMLButtonElement>(null);\n  React.useEffect(() => {\n    if (btnRef.current) {\n      registerTrigger(btnRef.current);\n    }\n  }, [btnRef.current]);\n\n  // Find our index among triggers for navigation\n  const myIdx = React.useMemo(\n    () => triggerNodes.findIndex((n: HTMLButtonElement) => n === btnRef.current),\n    [triggerNodes, btnRef.current],\n  );\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLButtonElement>) => {\n    switch (e.key) {\n      case 'ArrowRight':\n      case 'ArrowDown':\n        e.preventDefault();\n        if (myIdx !== -1 && focusNext) focusNext(myIdx);\n        break;\n      case 'ArrowLeft':\n      case 'ArrowUp':\n        e.preventDefault();\n        if (myIdx !== -1 && focusPrev) focusPrev(myIdx);\n        break;\n      case 'Home':\n        e.preventDefault();\n        if (focusFirst) focusFirst();\n        break;\n      case 'End':\n        e.preventDefault();\n        if (focusLast) focusLast();\n        break;\n      case 'Enter':\n      case ' ':\n        e.preventDefault();\n        setActiveStep(step);\n        break;\n    }\n  };\n\n  if (asChild) {\n    return (\n      <span data-slot=\"stepper-trigger\" data-state={state} className={className}>\n        {children}\n      </span>\n    );\n  }\n\n  return (\n    <button\n      ref={btnRef}\n      role=\"tab\"\n      id={id}\n      aria-selected={isSelected}\n      aria-controls={panelId}\n      tabIndex={typeof tabIndex === 'number' ? tabIndex : isSelected ? 0 : -1}\n      data-slot=\"stepper-trigger\"\n      data-state={state}\n      data-loading={isLoading}\n      className={cn(\n        'cursor-pointer focus-visible:border-ring focus-visible:ring-ring/50 inline-flex items-center gap-3 rounded-full outline-none focus-visible:z-10 focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-60',\n        className,\n      )}\n      onClick={() => setActiveStep(step)}\n      onKeyDown={handleKeyDown}\n      disabled={isDisabled}\n      {...props}\n    >\n      {children}\n    </button>\n  );\n}\n\nfunction StepperIndicator({ children, className }: React.ComponentProps<'div'>) {\n  const { state, isLoading } = useStepItem();\n  const { indicators } = useStepper();\n\n  return (\n    <div\n      data-slot=\"stepper-indicator\"\n      data-state={state}\n      className={cn(\n        'relative flex items-center overflow-hidden justify-center size-6 shrink-0 border-background bg-accent text-accent-foreground rounded-full text-xs data-[state=completed]:bg-primary data-[state=completed]:text-primary-foreground data-[state=active]:bg-primary data-[state=active]:text-primary-foreground',\n        className,\n      )}\n    >\n      <div className=\"absolute\">\n        {indicators &&\n        ((isLoading && indicators.loading) ||\n          (state === 'completed' && indicators.completed) ||\n          (state === 'active' && indicators.active) ||\n          (state === 'inactive' && indicators.inactive))\n          ? (isLoading && indicators.loading) ||\n            (state === 'completed' && indicators.completed) ||\n            (state === 'active' && indicators.active) ||\n            (state === 'inactive' && indicators.inactive)\n          : children}\n      </div>\n    </div>\n  );\n}\n\nfunction StepperSeparator({ className }: React.ComponentProps<'div'>) {\n  const { state } = useStepItem();\n\n  return (\n    <div\n      data-slot=\"stepper-separator\"\n      data-state={state}\n      className={cn(\n        'm-0.5 rounded-full bg-muted group-data-[orientation=vertical]/stepper-nav:h-12 group-data-[orientation=vertical]/stepper-nav:w-0.5 group-data-[orientation=horizontal]/stepper-nav:h-0.5 group-data-[orientation=horizontal]/stepper-nav:flex-1',\n        className,\n      )}\n    />\n  );\n}\n\nfunction StepperTitle({ children, className }: React.ComponentProps<'h3'>) {\n  const { state } = useStepItem();\n\n  return (\n    <h3 data-slot=\"stepper-title\" data-state={state} className={cn('text-sm font-medium leading-none', className)}>\n      {children}\n    </h3>\n  );\n}\n\nfunction StepperDescription({ children, className }: React.ComponentProps<'div'>) {\n  const { state } = useStepItem();\n\n  return (\n    <div data-slot=\"stepper-description\" data-state={state} className={cn('text-sm text-muted-foreground', className)}>\n      {children}\n    </div>\n  );\n}\n\nfunction StepperNav({ children, className }: React.ComponentProps<'nav'>) {\n  const { activeStep, orientation } = useStepper();\n\n  return (\n    <nav\n      data-slot=\"stepper-nav\"\n      data-state={activeStep}\n      data-orientation={orientation}\n      className={cn(\n        'group/stepper-nav inline-flex data-[orientation=horizontal]:w-full data-[orientation=horizontal]:flex-row data-[orientation=vertical]:flex-col',\n        className,\n      )}\n    >\n      {children}\n    </nav>\n  );\n}\n\nfunction StepperPanel({ children, className }: React.ComponentProps<'div'>) {\n  const { activeStep } = useStepper();\n\n  return (\n    <div data-slot=\"stepper-panel\" data-state={activeStep} className={cn('w-full', className)}>\n      {children}\n    </div>\n  );\n}\n\ninterface StepperContentProps extends React.ComponentProps<'div'> {\n  value: number;\n  forceMount?: boolean;\n}\n\nfunction StepperContent({ value, forceMount, children, className }: StepperContentProps) {\n  const { activeStep } = useStepper();\n  const isActive = value === activeStep;\n\n  if (!forceMount && !isActive) {\n    return null;\n  }\n\n  return (\n    <div\n      data-slot=\"stepper-content\"\n      data-state={activeStep}\n      className={cn('w-full', className, !isActive && forceMount && 'hidden')}\n      hidden={!isActive && forceMount}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport {\n  useStepper,\n  useStepItem,\n  Stepper,\n  StepperItem,\n  StepperTrigger,\n  StepperIndicator,\n  StepperSeparator,\n  StepperTitle,\n  StepperDescription,\n  StepperPanel,\n  StepperContent,\n  StepperNav,\n  type StepperProps,\n  type StepperItemProps,\n  type StepperTriggerProps,\n  type StepperContentProps,\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
