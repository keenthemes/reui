{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tree-plus-minus",
  "type": "registry:component",
  "dependencies": ["@headless-tree/core", "@headless-tree/react", "clsx", "tailwind-merge", "lucide-react", "radix-ui"],
  "registryDependencies": ["https://reui.io/r/tree.json"],
  "files": [
    {
      "path": "registry/default/components/tree/plus-minus.tsx",
      "content": "'use client';\n\nimport React from 'react';\nimport { Tree, TreeItem, TreeItemLabel } from '@/registry/default/ui/tree';\nimport { hotkeysCoreFeature, syncDataLoaderFeature } from '@headless-tree/core';\nimport { useTree } from '@headless-tree/react';\nimport { FileIcon, FolderIcon, FolderOpenIcon } from 'lucide-react';\n\ninterface Item {\n  name: string;\n  children?: string[];\n}\n\nconst items: Record<string, Item> = {\n  crm: {\n    name: 'CRM',\n    children: ['leads', 'accounts', 'activities', 'support'],\n  },\n  leads: {\n    name: 'Leads',\n    children: ['new-lead', 'contacted-lead', 'qualified-lead'],\n  },\n  'new-lead': { name: 'New Lead' },\n  'contacted-lead': { name: 'Contacted Lead' },\n  'qualified-lead': { name: 'Qualified Lead' },\n  accounts: {\n    name: 'Accounts',\n    children: ['acme-corp', 'globex-inc'],\n  },\n  'acme-corp': {\n    name: 'Acme Corp',\n    children: ['acme-contacts', 'acme-opportunities'],\n  },\n  'acme-contacts': {\n    name: 'Contacts',\n    children: ['john-smith', 'jane-doe'],\n  },\n  'john-smith': { name: 'John Smith' },\n  'jane-doe': { name: 'Jane Doe' },\n  'acme-opportunities': {\n    name: 'Opportunities',\n    children: ['website-redesign', 'annual-maintenance'],\n  },\n  'website-redesign': { name: 'Website Redesign' },\n  'annual-maintenance': { name: 'Annual Maintenance' },\n  'globex-inc': {\n    name: 'Globex Inc',\n    children: ['globex-contacts', 'globex-opportunities'],\n  },\n  'globex-contacts': {\n    name: 'Contacts',\n    children: ['alice-johnson'],\n  },\n  'alice-johnson': { name: 'Alice Johnson' },\n  'globex-opportunities': {\n    name: 'Opportunities',\n    children: ['cloud-migration'],\n  },\n  'cloud-migration': { name: 'Cloud Migration' },\n  activities: {\n    name: 'Activities',\n    children: ['calls', 'meetings', 'emails'],\n  },\n  calls: { name: 'Calls' },\n  meetings: { name: 'Meetings' },\n  emails: { name: 'Emails' },\n  support: {\n    name: 'Support',\n    children: ['open-tickets', 'closed-tickets'],\n  },\n  'open-tickets': { name: 'Open Tickets' },\n  'closed-tickets': { name: 'Closed Tickets' },\n};\n\nconst indent = 20;\n\nexport default function Component() {\n  const tree = useTree<Item>({\n    initialState: {\n      expandedItems: ['leads', 'accounts', 'activities'],\n    },\n    indent,\n    rootItemId: 'crm',\n    getItemName: (item) => item.getItemData().name,\n    isItemFolder: (item) => (item.getItemData()?.children?.length ?? 0) > 0,\n    dataLoader: {\n      getItem: (itemId) => items[itemId],\n      getChildren: (itemId) => items[itemId].children ?? [],\n    },\n    features: [syncDataLoaderFeature, hotkeysCoreFeature],\n  });\n\n  return (\n    <div className=\"self-start lg:w-[225px]\">\n      <Tree\n        className=\"relative before:absolute before:inset-0 before:-ms-1.25 before:bg-[repeating-linear-gradient(to_right,transparent_0,transparent_calc(var(--tree-indent)-1px),var(--border)_calc(var(--tree-indent)-1px),var(--border)_calc(var(--tree-indent)))]\"\n        indent={indent}\n        tree={tree}\n        toggleIconType=\"plus-minus\"\n      >\n        {tree.getItems().map((item) => {\n          return (\n            <TreeItem key={item.getId()} item={item}>\n              <TreeItemLabel className=\"before:bg-background relative before:absolute before:inset-x-0 before:-inset-y-0.5 before:-z-10\">\n                <span className=\"flex items-center gap-2 ms-1\">\n                  {item.isFolder() ? (\n                    item.isExpanded() ? (\n                      <FolderOpenIcon className=\"text-muted-foreground pointer-events-none size-4\" />\n                    ) : (\n                      <FolderIcon className=\"text-muted-foreground pointer-events-none size-4\" />\n                    )\n                  ) : (\n                    <FileIcon className=\"text-muted-foreground pointer-events-none size-4\" />\n                  )}\n                  {item.getItemName()}\n                </span>\n              </TreeItemLabel>\n            </TreeItem>\n          );\n        })}\n      </Tree>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/tree.tsx",
      "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\n'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { ItemInstance } from '@headless-tree/core';\nimport { ChevronDownIcon, SquareMinus, SquarePlus } from 'lucide-react';\nimport { Slot as SlotPrimitive } from 'radix-ui';\n\ntype ToggleIconType = 'chevron' | 'plus-minus';\n\ninterface TreeContextValue<T = any> {\n  indent: number;\n  currentItem?: ItemInstance<T>;\n  tree?: any;\n  toggleIconType?: ToggleIconType;\n}\n\nconst TreeContext = React.createContext<TreeContextValue>({\n  indent: 20,\n  currentItem: undefined,\n  tree: undefined,\n  toggleIconType: 'plus-minus',\n});\n\nfunction useTreeContext<T = any>() {\n  return React.useContext(TreeContext) as TreeContextValue<T>;\n}\n\ninterface TreeProps extends React.HTMLAttributes<HTMLDivElement> {\n  indent?: number;\n  tree?: any;\n  toggleIconType?: ToggleIconType;\n}\n\nfunction Tree({ indent = 20, tree, className, toggleIconType = 'chevron', ...props }: TreeProps) {\n  const containerProps = tree && typeof tree.getContainerProps === 'function' ? tree.getContainerProps() : {};\n  const mergedProps = { ...props, ...containerProps };\n\n  // Extract style from mergedProps to merge with our custom styles\n  const { style: propStyle, ...otherProps } = mergedProps;\n\n  // Merge styles\n  const mergedStyle = {\n    ...propStyle,\n    '--tree-indent': `${indent}px`,\n  } as React.CSSProperties;\n\n  return (\n    <TreeContext.Provider value={{ indent, tree, toggleIconType }}>\n      <div data-slot=\"tree\" style={mergedStyle} className={cn('flex flex-col', className)} {...otherProps} />\n    </TreeContext.Provider>\n  );\n}\n\ninterface TreeItemProps<T = any> extends React.HTMLAttributes<HTMLButtonElement> {\n  item: ItemInstance<T>;\n  indent?: number;\n  asChild?: boolean;\n}\n\nfunction TreeItem<T = any>({ item, className, asChild, children, ...props }: Omit<TreeItemProps<T>, 'indent'>) {\n  const parentContext = useTreeContext<T>();\n  const { indent } = parentContext;\n\n  const itemProps = typeof item.getProps === 'function' ? item.getProps() : {};\n  const mergedProps = { ...props, ...itemProps };\n\n  // Extract style from mergedProps to merge with our custom styles\n  const { style: propStyle, ...otherProps } = mergedProps;\n\n  // Merge styles\n  const mergedStyle = {\n    ...propStyle,\n    '--tree-padding': `${item.getItemMeta().level * indent}px`,\n  } as React.CSSProperties;\n\n  const Comp = asChild ? SlotPrimitive.Slot : 'button';\n\n  return (\n    <TreeContext.Provider value={{ ...parentContext, currentItem: item }}>\n      <Comp\n        data-slot=\"tree-item\"\n        style={mergedStyle}\n        className={cn(\n          'z-10 ps-(--tree-padding) outline-hidden select-none not-last:pb-0.5 focus:z-20 data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n          className,\n        )}\n        data-focus={typeof item.isFocused === 'function' ? item.isFocused() || false : undefined}\n        data-folder={typeof item.isFolder === 'function' ? item.isFolder() || false : undefined}\n        data-selected={typeof item.isSelected === 'function' ? item.isSelected() || false : undefined}\n        data-drag-target={typeof item.isDragTarget === 'function' ? item.isDragTarget() || false : undefined}\n        data-search-match={typeof item.isMatchingSearch === 'function' ? item.isMatchingSearch() || false : undefined}\n        aria-expanded={item.isExpanded()}\n        {...otherProps}\n      >\n        {children}\n      </Comp>\n    </TreeContext.Provider>\n  );\n}\n\ninterface TreeItemLabelProps<T = any> extends React.HTMLAttributes<HTMLSpanElement> {\n  item?: ItemInstance<T>;\n}\n\nfunction TreeItemLabel<T = any>({ item: propItem, children, className, ...props }: TreeItemLabelProps<T>) {\n  const { currentItem, toggleIconType } = useTreeContext<T>();\n  const item = propItem || currentItem;\n\n  if (!item) {\n    console.warn('TreeItemLabel: No item provided via props or context');\n    return null;\n  }\n\n  return (\n    <span\n      data-slot=\"tree-item-label\"\n      className={cn(\n        'in-focus-visible:ring-ring/50 bg-background hover:bg-accent in-data-[selected=true]:bg-accent in-data-[selected=true]:text-accent-foreground in-data-[drag-target=true]:bg-accent flex items-center gap-1 rounded-sm px-2 py-1.5 text-sm transition-colors not-in-data-[folder=true]:ps-7 in-focus-visible:ring-[3px] in-data-[search-match=true]:bg-blue-50! [&_svg]:pointer-events-none [&_svg]:shrink-0',\n        className,\n      )}\n      {...props}\n    >\n      {item.isFolder() &&\n        (toggleIconType === 'plus-minus' ? (\n          item.isExpanded() ? (\n            <SquareMinus className=\"text-muted-foreground size-3.5\" stroke=\"currentColor\" strokeWidth=\"1\" />\n          ) : (\n            <SquarePlus className=\"text-muted-foreground size-3.5\" stroke=\"currentColor\" strokeWidth=\"1\" />\n          )\n        ) : (\n          <ChevronDownIcon className=\"text-muted-foreground size-4 in-aria-[expanded=false]:-rotate-90\" />\n        ))}\n      {children || (typeof item.getItemName === 'function' ? item.getItemName() : null)}\n    </span>\n  );\n}\n\nfunction TreeDragLine({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { tree } = useTreeContext();\n\n  if (!tree || typeof tree.getDragLineStyle !== 'function') {\n    console.warn('TreeDragLine: No tree provided via context or tree does not have getDragLineStyle method');\n    return null;\n  }\n\n  const dragLine = tree.getDragLineStyle();\n  return (\n    <div\n      style={dragLine}\n      className={cn(\n        'bg-primary before:bg-background before:border-primary absolute z-30 -mt-px h-0.5 w-[unset] before:absolute before:-top-[3px] before:left-0 before:size-2 before:rounded-full before:border-2',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Tree, TreeItem, TreeItemLabel, TreeDragLine };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
