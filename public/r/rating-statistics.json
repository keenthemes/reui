{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "rating-statistics",
  "type": "registry:component",
  "dependencies": [
    "clsx",
    "tailwind-merge",
    "class-variance-authority",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://reui.io/r/card.json",
    "https://reui.io/r/rating.json"
  ],
  "files": [
    {
      "path": "registry/default/components/rating/statistics.tsx",
      "content": "import {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardHeading,\n  CardTitle,\n} from '@/registry/default/ui/card';\nimport { Rating } from '@/registry/default/ui/rating';\n\nexport default function RatingStatisticsDemo() {\n  return (\n    <Card className=\"w-full max-w-sm\">\n      <CardHeader className=\"min-h-auto border-b-0 pt-6\">\n        <CardHeading>\n          <CardTitle>Customer Reviews Summary</CardTitle>\n          <CardDescription>Based on 1,247 reviews</CardDescription>\n        </CardHeading>\n      </CardHeader>\n\n      <CardContent className=\"space-y-3\">\n        {[\n          { stars: 5, count: 745, percentage: 59.7 },\n          { stars: 4, count: 312, percentage: 25.0 },\n          { stars: 3, count: 124, percentage: 9.9 },\n          { stars: 2, count: 41, percentage: 3.3 },\n          { stars: 1, count: 25, percentage: 2.0 },\n        ].map((item) => (\n          <div key={item.stars} className=\"flex items-center justify-between gap-3\">\n            <div className=\"flex items-center gap-2.5\">\n              <span className=\"text-sm font-medium w-2\">{item.stars}</span>\n              <Rating rating={item.stars} />\n            </div>\n            <div className=\"flex items-center gap-0.5 text-sm text-muted-foreground\">\n              <span>{item.count}</span>\n              <span>({item.percentage}%)</span>\n            </div>\n          </div>\n        ))}\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/card.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\n// Define CardContext\ntype CardContextType = {\n  variant: 'default' | 'accent';\n};\n\nconst CardContext = React.createContext<CardContextType>({\n  variant: 'default', // Default value\n});\n\n// Hook to use CardContext\nconst useCardContext = () => {\n  const context = React.useContext(CardContext);\n  if (!context) {\n    throw new Error('useCardContext must be used within a Card component');\n  }\n  return context;\n};\n\n// Variants\nconst cardVariants = cva('flex flex-col items-stretch text-card-foreground rounded-xl', {\n  variants: {\n    variant: {\n      default: 'bg-card border border-border shadow-xs black/5',\n      accent: 'bg-muted shadow-xs p-1',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardHeaderVariants = cva('flex items-center justify-between flex-wrap px-5 min-h-14 gap-2.5', {\n  variants: {\n    variant: {\n      default: 'border-b border-border',\n      accent: '',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardContentVariants = cva('grow p-5', {\n  variants: {\n    variant: {\n      default: '',\n      accent: 'bg-card rounded-t-xl [&:last-child]:rounded-b-xl',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardTableVariants = cva('grid grow', {\n  variants: {\n    variant: {\n      default: '',\n      accent: 'bg-card rounded-xl',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardFooterVariants = cva('flex items-center px-5 min-h-14', {\n  variants: {\n    variant: {\n      default: 'border-t border-border',\n      accent: 'bg-card rounded-b-xl mt-[2px]',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\n// Card Component\nfunction Card({\n  className,\n  variant = 'default',\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof cardVariants>) {\n  return (\n    <CardContext.Provider value={{ variant: variant || 'default' }}>\n      <div data-slot=\"card\" className={cn(cardVariants({ variant }), className)} {...props} />\n    </CardContext.Provider>\n  );\n}\n\n// CardHeader Component\nfunction CardHeader({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-header\" className={cn(cardHeaderVariants({ variant }), className)} {...props} />;\n}\n\n// CardContent Component\nfunction CardContent({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-content\" className={cn(cardContentVariants({ variant }), className)} {...props} />;\n}\n\n// CardTable Component\nfunction CardTable({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-table\" className={cn(cardTableVariants({ variant }), className)} {...props} />;\n}\n\n// CardFooter Component\nfunction CardFooter({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-footer\" className={cn(cardFooterVariants({ variant }), className)} {...props} />;\n}\n\n// Other Components\nfunction CardHeading({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-heading\" className={cn('space-y-1', className)} {...props} />;\n}\n\nfunction CardToolbar({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-toolbar\" className={cn('flex items-center gap-2.5', className)} {...props} />;\n}\n\nfunction CardTitle({ className, ...props }: React.HTMLAttributes<HTMLHeadingElement>) {\n  return (\n    <h3\n      data-slot=\"card-title\"\n      className={cn('text-base font-semibold leading-none tracking-tight', className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-description\" className={cn('text-sm text-muted-foreground', className)} {...props} />;\n}\n\n// Exports\nexport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardHeading, CardTable, CardTitle, CardToolbar };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/rating.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { Star } from 'lucide-react';\n\nconst ratingVariants = cva('flex items-center', {\n  variants: {\n    size: {\n      sm: 'gap-2',\n      md: 'gap-2.5',\n      lg: 'gap-3',\n    },\n  },\n  defaultVariants: {\n    size: 'md',\n  },\n});\n\nconst starVariants = cva('', {\n  variants: {\n    size: {\n      sm: 'w-4 h-4',\n      md: 'w-5 h-5',\n      lg: 'w-6 h-6',\n    },\n  },\n  defaultVariants: {\n    size: 'md',\n  },\n});\n\nconst valueVariants = cva('text-muted-foreground w-5', {\n  variants: {\n    size: {\n      sm: 'text-xs',\n      md: 'text-sm',\n      lg: 'text-base',\n    },\n  },\n  defaultVariants: {\n    size: 'md',\n  },\n});\n\nfunction Rating({\n  rating,\n  maxRating = 5,\n  size,\n  className,\n  starClassName,\n  showValue = false,\n  editable = false,\n  onRatingChange,\n  ...props\n}: React.ComponentProps<'div'> &\n  VariantProps<typeof ratingVariants> & {\n    /**\n     * Current rating value (supports decimal values for partial stars)\n     */\n    rating: number;\n    /**\n     * Maximum rating value (number of stars to show)\n     */\n    maxRating?: number;\n    /**\n     * Whether to show the numeric rating value\n     */\n    showValue?: boolean;\n    /**\n     * Class name for the value span\n     */\n    starClassName?: string;\n    /**\n     * Whether the rating is editable (clickable)\n     */\n    editable?: boolean;\n    /**\n     * Callback function called when rating changes\n     */\n    onRatingChange?: (rating: number) => void;\n  }) {\n  const [hoveredRating, setHoveredRating] = React.useState<number | null>(null);\n  const displayRating = editable && hoveredRating !== null ? hoveredRating : rating;\n\n  const handleStarClick = (starRating: number) => {\n    if (editable && onRatingChange) {\n      onRatingChange(starRating);\n    }\n  };\n\n  const handleStarMouseEnter = (starRating: number) => {\n    if (editable) {\n      setHoveredRating(starRating);\n    }\n  };\n\n  const handleStarMouseLeave = () => {\n    if (editable) {\n      setHoveredRating(null);\n    }\n  };\n\n  const renderStars = () => {\n    const stars = [];\n\n    for (let i = 1; i <= maxRating; i++) {\n      const filled = displayRating >= i;\n      const partiallyFilled = displayRating > i - 1 && displayRating < i;\n      const fillPercentage = partiallyFilled ? (displayRating - (i - 1)) * 100 : 0;\n\n      stars.push(\n        <div\n          key={i}\n          className={cn('relative', editable && 'cursor-pointer')}\n          onClick={() => handleStarClick(i)}\n          onMouseEnter={() => handleStarMouseEnter(i)}\n          onMouseLeave={handleStarMouseLeave}\n        >\n          {/* Background star (empty) */}\n          <Star data-slot=\"rating-star-empty\" className={cn(starVariants({ size }), 'text-muted-foreground/30')} />\n\n          {/* Filled star */}\n          <div\n            className=\"absolute inset-0 overflow-hidden\"\n            style={{\n              width: filled ? '100%' : `${fillPercentage}%`,\n            }}\n          >\n            <Star\n              data-slot=\"rating-star-filled\"\n              className={cn(starVariants({ size }), 'text-yellow-400 fill-yellow-400')}\n            />\n          </div>\n        </div>,\n      );\n    }\n\n    return stars;\n  };\n\n  return (\n    <div data-slot=\"rating\" className={cn(ratingVariants({ size }), className)} {...props}>\n      <div className=\"flex items-center\">{renderStars()}</div>\n      {showValue && (\n        <span data-slot=\"rating-value\" className={cn(valueVariants({ size }), starClassName)}>\n          {displayRating.toFixed(1)}\n        </span>\n      )}\n    </div>\n  );\n}\n\nexport { Rating };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}