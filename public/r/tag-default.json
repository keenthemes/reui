{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tag-default",
  "type": "registry:component",
  "dependencies": ["emblor", "clsx", "tailwind-merge", "class-variance-authority", "radix-ui"],
  "registryDependencies": ["https://reui.io/r/label.json"],
  "files": [
    {
      "path": "registry/default/components/tag/default.tsx",
      "content": "'use client';\n\nimport { useId, useState } from 'react';\nimport { Label } from '@/registry/default/ui/label';\nimport { Tag, TagInput } from 'emblor';\n\nconst tags = [\n  {\n    id: '1',\n    text: 'Red',\n  },\n];\n\nexport default function Component() {\n  const id = useId();\n  const [exampleTags, setExampleTags] = useState<Tag[]>(tags);\n  const [activeTagIndex, setActiveTagIndex] = useState<number | null>(null);\n\n  return (\n    <div className=\"w-full max-w-sm *:not-first:mt-2\">\n      <Label htmlFor={id}>Input external tags</Label>\n      <TagInput\n        id={id}\n        tags={exampleTags}\n        setTags={(newTags) => {\n          setExampleTags(newTags);\n        }}\n        placeholder=\"Add a tag\"\n        styleClasses={{\n          inlineTagsContainer:\n            'border-input rounded-md bg-background shadow-xs transition-[color,box-shadow] focus-within:border-ring outline-none focus-within:ring-[3px] focus-within:ring-ring/30 p-1 gap-1',\n          input: 'w-full shadow-none px-2 min-h-6 ',\n          tag: {\n            body: 'h-6 relative bg-background border border-input hover:bg-background rounded-md font-medium text-xs ps-2 pe-7',\n            closeButton:\n              'absolute -inset-y-px -end-px p-0 rounded-e-md flex size-6 transition-[color,box-shadow] outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] text-muted-foreground/80 hover:text-foreground',\n          },\n        }}\n        activeTagIndex={activeTagIndex}\n        setActiveTagIndex={setActiveTagIndex}\n      />\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/label.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { Label as LabelPrimitive } from 'radix-ui';\n\nconst labelVariants = cva(\n  'text-sm leading-none text-foreground peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        primary: 'font-medium',\n        secondary: 'font-normal',\n      },\n    },\n    defaultVariants: {\n      variant: 'primary',\n    },\n  },\n);\n\nfunction Label({\n  className,\n  variant,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root> & VariantProps<typeof labelVariants>) {\n  return <LabelPrimitive.Root data-slot=\"label\" className={cn(labelVariants({ variant }), className)} {...props} />;\n}\n\nexport { Label };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
