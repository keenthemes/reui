{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-scroll-position",
  "type": "registry:hook",
  "dependencies": [],
  "files": [
    {
      "path": "registry/default/hooks/use-scroll-position.ts",
      "content": "import { RefObject, useEffect, useState } from 'react';\n\ninterface IUseScrollPositionProps {\n  targetRef?: RefObject<HTMLElement | Document | undefined>; // Ref to the scrollable element\n}\n\nconst useScrollPosition = ({ targetRef }: IUseScrollPositionProps = {}): number => {\n  const [scrollPosition, setScrollPosition] = useState<number>(0);\n\n  useEffect(() => {\n    // If the ref is not provided or its current value is null, fall back to document\n    const target = targetRef?.current || document;\n    const scrollable = target === document ? window : target;\n\n    const updatePosition = () => {\n      // Determine if we're scrolling the document or a specific element\n      const scrollY = target === document ? window.scrollY : (target as HTMLElement).scrollTop;\n      setScrollPosition(scrollY);\n    };\n\n    scrollable.addEventListener('scroll', updatePosition);\n\n    // Set the initial position\n    updatePosition();\n\n    return () => {\n      scrollable.removeEventListener('scroll', updatePosition);\n    };\n  }, [targetRef]);\n\n  return scrollPosition;\n};\n\nexport { useScrollPosition };\n",
      "type": "registry:hook"
    }
  ]
}
