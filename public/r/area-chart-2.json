{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "area-chart-2",
  "type": "registry:block",
  "dependencies": [
    "recharts@2.15.1",
    "clsx",
    "tailwind-merge",
    "class-variance-authority",
    "recharts",
    "lucide-react",
    "radix-ui"
  ],
  "registryDependencies": [
    "https://reui.io/r/card.json",
    "https://reui.io/r/chart.json",
    "https://reui.io/r/select.json"
  ],
  "files": [
    {
      "path": "registry/default/blocks/charts/area-charts/area-chart-2.tsx",
      "content": "'use client';\n\nimport React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardToolbar } from '@/registry/default/ui/card';\nimport { ChartConfig, ChartContainer, ChartTooltip } from '@/registry/default/ui/chart';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/registry/default/ui/select';\nimport { CreditCard, Eye, ShoppingCart, Store, TrendingDown, TrendingUp } from 'lucide-react';\nimport { Area, AreaChart, CartesianGrid, XAxis, YAxis } from 'recharts';\nimport { cn } from '@/lib/utils';\n\n// E-commerce conversion funnel data for different periods\nconst conversionFunnelData = {\n  '7d': [\n    { period: 'Mon', storeVisits: 2500, productViews: 2100, addToCart: 1400, checkout: 1200 },\n    { period: 'Tue', storeVisits: 2800, productViews: 2300, addToCart: 1600, checkout: 1350 },\n    { period: 'Wed', storeVisits: 1900, productViews: 1500, addToCart: 950, checkout: 780 },\n    { period: 'Thu', storeVisits: 3100, productViews: 2600, addToCart: 1800, checkout: 1500 },\n    { period: 'Fri', storeVisits: 2400, productViews: 1900, addToCart: 1200, checkout: 980 },\n    { period: 'Sat', storeVisits: 3400, productViews: 2800, addToCart: 1950, checkout: 1620 },\n    { period: 'Sun', storeVisits: 2100, productViews: 1700, addToCart: 1100, checkout: 850 },\n  ],\n  '30d': [\n    { period: 'Week 1', storeVisits: 18500, productViews: 15200, addToCart: 10800, checkout: 8900 },\n    { period: 'Week 2', storeVisits: 21200, productViews: 17800, addToCart: 12400, checkout: 10200 },\n    { period: 'Week 3', storeVisits: 16800, productViews: 13500, addToCart: 8900, checkout: 7200 },\n    { period: 'Week 4', storeVisits: 14200, productViews: 11200, addToCart: 7800, checkout: 6100 },\n    { period: 'Week 5', storeVisits: 19800, productViews: 16500, addToCart: 11200, checkout: 9400 },\n    { period: 'Week 6', storeVisits: 22800, productViews: 19100, addToCart: 13500, checkout: 11200 },\n  ],\n  '90d': [\n    { period: 'Jan', storeVisits: 78000, productViews: 65000, addToCart: 45000, checkout: 37000 },\n    { period: 'Feb', storeVisits: 82000, productViews: 68500, addToCart: 48000, checkout: 39500 },\n    { period: 'Mar', storeVisits: 69000, productViews: 54000, addToCart: 36000, checkout: 28500 },\n    { period: 'Apr', storeVisits: 61000, productViews: 47000, addToCart: 31000, checkout: 24000 },\n    { period: 'May', storeVisits: 75000, productViews: 62000, addToCart: 43000, checkout: 35500 },\n    { period: 'Jun', storeVisits: 84000, productViews: 71000, addToCart: 49000, checkout: 41000 },\n  ],\n  '12m': [\n    { period: 'Q1', storeVisits: 235000, productViews: 195000, addToCart: 136000, checkout: 112000 },\n    { period: 'Q2', storeVisits: 268000, productViews: 223000, addToCart: 156000, checkout: 128000 },\n    { period: 'Q3', storeVisits: 198000, productViews: 158000, addToCart: 105000, checkout: 82000 },\n    { period: 'Q4', storeVisits: 175000, productViews: 138000, addToCart: 89000, checkout: 68000 },\n    { period: 'Q1 24', storeVisits: 251000, productViews: 209000, addToCart: 146000, checkout: 120000 },\n    { period: 'Q2 24', storeVisits: 289000, productViews: 241000, addToCart: 168000, checkout: 138000 },\n  ],\n};\n\nconst chartConfig = {\n  storeVisits: {\n    label: 'Store Visits',\n    color: 'var(--color-indigo-400)',\n  },\n  productViews: {\n    label: 'Product Views',\n    color: 'var(--color-indigo-500)',\n  },\n  addToCart: {\n    label: 'Add to Cart',\n    color: 'var(--color-indigo-600)',\n  },\n  checkout: {\n    label: 'Checkout',\n    color: 'var(--color-indigo-700)',\n  },\n} satisfies ChartConfig;\n\n// Period configuration\nconst PERIODS = {\n  '7d': { key: '7d', label: 'Last 7 days' },\n  '30d': { key: '30d', label: 'Last 30 days' },\n  '90d': { key: '90d', label: 'Last 90 days' },\n  '12m': { key: '12m', label: 'Last 12 months' },\n} as const;\n\ntype PeriodKey = keyof typeof PERIODS;\n\n// Define stage metrics\nconst stageMetrics = [\n  { key: 'storeVisits', label: 'Store Visits', icon: Store, color: chartConfig.storeVisits.color },\n  { key: 'productViews', label: 'Product Views', icon: Eye, color: chartConfig.productViews.color },\n  { key: 'addToCart', label: 'Add to Cart', icon: ShoppingCart, color: chartConfig.addToCart.color },\n  { key: 'checkout', label: 'Checkout', icon: CreditCard, color: chartConfig.checkout.color },\n] as const;\n\n// Custom Tooltip Component\ninterface TooltipProps {\n  active?: boolean;\n  payload?: Array<{\n    dataKey: string;\n    value: number;\n    color: string;\n  }>;\n  label?: string;\n}\n\nconst CustomTooltip = ({ active, payload, label }: TooltipProps) => {\n  if (active && payload && payload.length) {\n    return (\n      <div className=\"rounded-lg border bg-popover/95 backdrop-blur-sm p-4 shadow-lg min-w-[200px]\">\n        <div className=\"text-sm font-semibold text-popover-foreground mb-3.5 pb-2 border-b border-border/50\">\n          {label}\n        </div>\n        <div className=\"space-y-1.5\">\n          {stageMetrics.map((stage) => {\n            const dataPoint = payload.find((p) => p.dataKey === stage.key);\n            const value = dataPoint?.value || 0;\n\n            return (\n              <div key={stage.key} className=\"flex items-center justify-between gap-1.5\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"size-2.5 rounded-sm\" style={{ backgroundColor: stage.color }} />\n                  <span className=\"text-xs font-medium text-muted-foreground\">{stage.label}</span>\n                </div>\n                <span className=\"text-sm font-semibold text-popover-foreground\">{value.toLocaleString()}</span>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n  return null;\n};\n\nexport default function AreaChart2() {\n  const [selectedPeriod, setSelectedPeriod] = useState<PeriodKey>('30d');\n\n  // Get data for selected period\n  const currentData = conversionFunnelData[selectedPeriod];\n\n  // Calculate current totals for the latest data point\n  const latestData = currentData[currentData.length - 1];\n\n  // Calculate percentage changes (simulated based on period)\n  const getChangeForMetric = (metric: string) => {\n    const changes = {\n      '7d': { storeVisits: -16, productViews: 8, addToCart: -12, checkout: 5 },\n      '30d': { storeVisits: 23, productViews: -7, addToCart: 15, checkout: -4 },\n      '90d': { storeVisits: 12, productViews: 18, addToCart: -8, checkout: 21 },\n      '12m': { storeVisits: -5, productViews: 23, addToCart: 32, checkout: -11 },\n    };\n    return changes[selectedPeriod][metric as keyof (typeof changes)[typeof selectedPeriod]] || 0;\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-6 lg:p-8\">\n      <Card className=\"w-full max-w-5xl\">\n        <CardHeader className=\"border-0 min-h-auto py-6\">\n          <CardTitle className=\"text-lg font-semibold\">Conversion Funnel</CardTitle>\n          <CardToolbar>\n            {/* Period Selector */}\n            <Select value={selectedPeriod} onValueChange={(value) => setSelectedPeriod(value as PeriodKey)}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent align=\"end\">\n                {Object.values(PERIODS).map((period) => (\n                  <SelectItem key={period.key} value={period.key}>\n                    {period.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </CardToolbar>\n        </CardHeader>\n\n        <CardContent className=\"px-2.5\">\n          {/* Stats Section */}\n          <div className=\"@container px-2.5\">\n            <div className=\"grid @3xl:grid-cols-2 @4xl:grid-cols-4 gap-6 mb-10\">\n              {stageMetrics.map((stage) => {\n                const value = latestData[stage.key as keyof typeof latestData] as number;\n                const change = getChangeForMetric(stage.key);\n\n                return (\n                  <div key={stage.key} className=\"space-y-1\">\n                    <div className=\"flex items-center gap-2.5\">\n                      <div className=\"w-0.5 h-12 rounded-full bg-border\"></div>\n                      <div className=\"flex flex-col gap-2\">\n                        <div className=\"text-sm font-medium text-muted-foreground\">{stage.label}</div>\n                        <div className=\"flex items-center gap-2.5\">\n                          <span className=\"text-2xl font-semibold leading-none\">{value.toLocaleString()}</span>\n                          <span\n                            className={cn(\n                              'inline-flex items-center gap-1 text-xs font-medium',\n                              change >= 0 ? 'text-green-500' : 'text-destructive',\n                            )}\n                          >\n                            {change >= 0 ? <TrendingUp className=\"size-4\" /> : <TrendingDown className=\"size-4\" />}{' '}\n                            {/* TODO: Add icon */}\n                            {Math.abs(change)}%\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Chart */}\n          <ChartContainer\n            config={chartConfig}\n            className=\"h-[400px] w-full [&_.recharts-curve.recharts-tooltip-cursor]:stroke-initial\"\n          >\n            <AreaChart\n              accessibilityLayer\n              data={currentData}\n              margin={{\n                top: 10,\n                bottom: 10,\n                left: 20,\n                right: 20,\n              }}\n            >\n              {/* Background pattern for chart area only */}\n              <defs>\n                {/* Modern Abstract Background Pattern */}\n                <pattern id=\"modernPattern\" x=\"0\" y=\"0\" width=\"32\" height=\"32\" patternUnits=\"userSpaceOnUse\">\n                  {/* Diagonal grid lines */}\n                  <path\n                    d=\"M0,16 L32,16 M16,0 L16,32\"\n                    stroke=\"hsl(var(--muted-foreground))\"\n                    strokeWidth=\"0.5\"\n                    strokeOpacity=\"0.03\"\n                  />\n                  <path\n                    d=\"M0,0 L32,32 M0,32 L32,0\"\n                    stroke=\"hsl(var(--muted-foreground))\"\n                    strokeWidth=\"0.3\"\n                    strokeOpacity=\"0.02\"\n                  />\n\n                  {/* Modern geometric elements */}\n                  <circle cx=\"8\" cy=\"8\" r=\"1.5\" fill=\"hsl(var(--muted-foreground))\" fillOpacity=\"0.04\" />\n                  <circle cx=\"24\" cy=\"24\" r=\"1.5\" fill=\"hsl(var(--muted-foreground))\" fillOpacity=\"0.04\" />\n\n                  {/* Abstract rounded rectangles */}\n                  <rect\n                    x=\"12\"\n                    y=\"4\"\n                    width=\"8\"\n                    height=\"2\"\n                    rx=\"1\"\n                    fill=\"hsl(var(--muted-foreground))\"\n                    fillOpacity=\"0.02\"\n                  />\n                  <rect\n                    x=\"4\"\n                    y=\"26\"\n                    width=\"8\"\n                    height=\"2\"\n                    rx=\"1\"\n                    fill=\"hsl(var(--muted-foreground))\"\n                    fillOpacity=\"0.02\"\n                  />\n                  <rect\n                    x=\"20\"\n                    y=\"12\"\n                    width=\"2\"\n                    height=\"8\"\n                    rx=\"1\"\n                    fill=\"hsl(var(--muted-foreground))\"\n                    fillOpacity=\"0.02\"\n                  />\n\n                  {/* Minimal dots */}\n                  <circle cx=\"6\" cy=\"20\" r=\"0.5\" fill=\"hsl(var(--muted-foreground))\" fillOpacity=\"0.06\" />\n                  <circle cx=\"26\" cy=\"10\" r=\"0.5\" fill=\"hsl(var(--muted-foreground))\" fillOpacity=\"0.06\" />\n                  <circle cx=\"14\" cy=\"28\" r=\"0.5\" fill=\"hsl(var(--muted-foreground))\" fillOpacity=\"0.06\" />\n                </pattern>\n\n                <linearGradient id=\"fillStoreVisits\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"5%\" stopColor=\"var(--color-storeVisits)\" stopOpacity={0.8} />\n                  <stop offset=\"95%\" stopColor=\"var(--color-storeVisits)\" stopOpacity={0.1} />\n                </linearGradient>\n                <linearGradient id=\"fillProductViews\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"5%\" stopColor=\"var(--color-productViews)\" stopOpacity={0.8} />\n                  <stop offset=\"95%\" stopColor=\"var(--color-productViews)\" stopOpacity={0.1} />\n                </linearGradient>\n                <linearGradient id=\"fillAddToCart\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"5%\" stopColor=\"var(--color-addToCart)\" stopOpacity={0.8} />\n                  <stop offset=\"95%\" stopColor=\"var(--color-addToCart)\" stopOpacity={0.1} />\n                </linearGradient>\n                <linearGradient id=\"fillCheckout\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"5%\" stopColor=\"var(--color-checkout)\" stopOpacity={0.8} />\n                  <stop offset=\"95%\" stopColor=\"var(--color-checkout)\" stopOpacity={0.1} />\n                </linearGradient>\n              </defs>\n\n              <CartesianGrid vertical={false} />\n\n              <XAxis\n                dataKey=\"period\"\n                tickLine={false}\n                axisLine={false}\n                tickMargin={10}\n                tick={{ textAnchor: 'middle', fontSize: 12 }}\n                interval={0}\n              />\n\n              <YAxis hide />\n\n              <ChartTooltip\n                cursor={{\n                  strokeDasharray: '4 4',\n                  stroke: 'oklch(45.7% 0.24 277.023)',\n                  strokeWidth: 1,\n                  strokeOpacity: 0.6,\n                }}\n                content={<CustomTooltip />}\n                offset={20}\n                position={{ x: undefined, y: undefined }}\n              />\n\n              {/* Background Pattern Areas */}\n              <Area\n                dataKey=\"storeVisits\"\n                type=\"natural\"\n                fill=\"url(#modernPattern)\"\n                fillOpacity={1}\n                stroke=\"transparent\"\n                stackId=\"pattern\"\n                dot={false}\n                activeDot={false}\n              />\n              <Area\n                dataKey=\"productViews\"\n                type=\"natural\"\n                fill=\"url(#modernPattern)\"\n                fillOpacity={1}\n                stroke=\"transparent\"\n                stackId=\"pattern\"\n                dot={false}\n                activeDot={false}\n              />\n              <Area\n                dataKey=\"addToCart\"\n                type=\"natural\"\n                fill=\"url(#modernPattern)\"\n                fillOpacity={1}\n                stroke=\"transparent\"\n                stackId=\"pattern\"\n                dot={false}\n                activeDot={false}\n              />\n              <Area\n                dataKey=\"checkout\"\n                type=\"natural\"\n                fill=\"url(#modernPattern)\"\n                fillOpacity={1}\n                stroke=\"transparent\"\n                stackId=\"pattern\"\n                dot={false}\n                activeDot={false}\n              />\n\n              {/* Stacked Areas */}\n              <Area\n                dataKey=\"checkout\"\n                type=\"natural\"\n                fill=\"url(#fillCheckout)\"\n                fillOpacity={0.5}\n                stroke=\"var(--color-checkout)\"\n                stackId=\"a\"\n                dot={false}\n                activeDot={{\n                  r: 4,\n                  fill: 'var(--color-checkout)',\n                  stroke: 'white',\n                  strokeWidth: 1.5,\n                }}\n              />\n              <Area\n                dataKey=\"addToCart\"\n                type=\"natural\"\n                fill=\"url(#fillAddToCart)\"\n                fillOpacity={0.4}\n                stroke=\"var(--color-addToCart)\"\n                stackId=\"a\"\n                dot={false}\n                activeDot={{\n                  r: 4,\n                  fill: 'var(--color-addToCart)',\n                  stroke: 'white',\n                  strokeWidth: 1.5,\n                }}\n              />\n              <Area\n                dataKey=\"productViews\"\n                type=\"natural\"\n                fill=\"url(#fillProductViews)\"\n                fillOpacity={0.3}\n                stroke=\"var(--color-productViews)\"\n                stackId=\"a\"\n                dot={false}\n                activeDot={{\n                  r: 4,\n                  fill: 'var(--color-productViews)',\n                  stroke: 'white',\n                  strokeWidth: 1.5,\n                }}\n              />\n              <Area\n                dataKey=\"storeVisits\"\n                type=\"natural\"\n                fill=\"url(#fillStoreVisits)\"\n                fillOpacity={0.2}\n                stroke=\"var(--color-storeVisits)\"\n                stackId=\"a\"\n                dot={false}\n                activeDot={{\n                  r: 4,\n                  fill: 'var(--color-storeVisits)',\n                  stroke: 'white',\n                  strokeWidth: 1.5,\n                }}\n              />\n            </AreaChart>\n          </ChartContainer>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
      "type": "registry:block"
    },
    {
      "path": "registry/default/ui/card.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\n// Define CardContext\ntype CardContextType = {\n  variant: 'default' | 'accent';\n};\n\nconst CardContext = React.createContext<CardContextType>({\n  variant: 'default', // Default value\n});\n\n// Hook to use CardContext\nconst useCardContext = () => {\n  const context = React.useContext(CardContext);\n  if (!context) {\n    throw new Error('useCardContext must be used within a Card component');\n  }\n  return context;\n};\n\n// Variants\nconst cardVariants = cva('flex flex-col items-stretch text-card-foreground rounded-xl', {\n  variants: {\n    variant: {\n      default: 'bg-card border border-border shadow-xs black/5',\n      accent: 'bg-muted shadow-xs p-1',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardHeaderVariants = cva('flex items-center justify-between flex-wrap px-5 min-h-14 gap-2.5', {\n  variants: {\n    variant: {\n      default: 'border-b border-border',\n      accent: '',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardContentVariants = cva('grow p-5', {\n  variants: {\n    variant: {\n      default: '',\n      accent: 'bg-card rounded-t-xl [&:last-child]:rounded-b-xl',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardTableVariants = cva('grid grow', {\n  variants: {\n    variant: {\n      default: '',\n      accent: 'bg-card rounded-xl',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardFooterVariants = cva('flex items-center px-5 min-h-14', {\n  variants: {\n    variant: {\n      default: 'border-t border-border',\n      accent: 'bg-card rounded-b-xl mt-[2px]',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\n// Card Component\nfunction Card({\n  className,\n  variant = 'default',\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof cardVariants>) {\n  return (\n    <CardContext.Provider value={{ variant: variant || 'default' }}>\n      <div data-slot=\"card\" className={cn(cardVariants({ variant }), className)} {...props} />\n    </CardContext.Provider>\n  );\n}\n\n// CardHeader Component\nfunction CardHeader({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-header\" className={cn(cardHeaderVariants({ variant }), className)} {...props} />;\n}\n\n// CardContent Component\nfunction CardContent({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-content\" className={cn(cardContentVariants({ variant }), className)} {...props} />;\n}\n\n// CardTable Component\nfunction CardTable({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-table\" className={cn(cardTableVariants({ variant }), className)} {...props} />;\n}\n\n// CardFooter Component\nfunction CardFooter({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-footer\" className={cn(cardFooterVariants({ variant }), className)} {...props} />;\n}\n\n// Other Components\nfunction CardHeading({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-heading\" className={cn('space-y-1', className)} {...props} />;\n}\n\nfunction CardToolbar({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-toolbar\" className={cn('flex items-center gap-2.5', className)} {...props} />;\n}\n\nfunction CardTitle({ className, ...props }: React.HTMLAttributes<HTMLHeadingElement>) {\n  return (\n    <h3\n      data-slot=\"card-title\"\n      className={cn('text-base font-semibold leading-none tracking-tight', className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-description\" className={cn('text-sm text-muted-foreground', className)} {...props} />;\n}\n\n// Exports\nexport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardHeading, CardTable, CardTitle, CardToolbar };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/chart.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport * as RechartsPrimitive from 'recharts';\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: '', dark: '.dark' } as const;\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode;\n    icon?: React.ComponentType;\n  } & ({ color?: string; theme?: never } | { color?: never; theme: Record<keyof typeof THEMES, string> });\n};\n\ntype ChartContextProps = {\n  config: ChartConfig;\n};\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null);\n\nfunction useChart() {\n  const context = React.useContext(ChartContext);\n\n  if (!context) {\n    throw new Error('useChart must be used within a <ChartContainer />');\n  }\n\n  return context;\n}\n\nfunction ChartContainer({\n  id,\n  className,\n  children,\n  config,\n  ...props\n}: React.ComponentProps<'div'> & {\n  config: ChartConfig;\n  children: React.ComponentProps<typeof RechartsPrimitive.ResponsiveContainer>['children'];\n}) {\n  const uniqueId = React.useId();\n  const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`;\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-slot=\"chart\"\n        data-chart={chartId}\n        className={cn(\n          \"[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden\",\n          className,\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>{children}</RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  );\n}\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(([, config]) => config.theme || config.color);\n\n  if (!colorConfig.length) {\n    return null;\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color;\n    return color ? `  --color-${key}: ${color};` : null;\n  })\n  .join('\\n')}\n}\n`,\n          )\n          .join('\\n'),\n      }}\n    />\n  );\n};\n\nconst ChartTooltip = RechartsPrimitive.Tooltip;\n\nfunction ChartTooltipContent({\n  active,\n  payload,\n  className,\n  indicator = 'dot',\n  hideLabel = false,\n  hideIndicator = false,\n  label,\n  labelFormatter,\n  labelClassName,\n  formatter,\n  color,\n  nameKey,\n  labelKey,\n}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n  React.ComponentProps<'div'> & {\n    hideLabel?: boolean;\n    hideIndicator?: boolean;\n    indicator?: 'line' | 'dot' | 'dashed';\n    nameKey?: string;\n    labelKey?: string;\n  }) {\n  const { config } = useChart();\n\n  const tooltipLabel = React.useMemo(() => {\n    if (hideLabel || !payload?.length) {\n      return null;\n    }\n\n    const [item] = payload;\n    const key = `${labelKey || item?.dataKey || item?.name || 'value'}`;\n    const itemConfig = getPayloadConfigFromPayload(config, item, key);\n    const value =\n      !labelKey && typeof label === 'string' ? config[label as keyof typeof config]?.label || label : itemConfig?.label;\n\n    if (labelFormatter) {\n      return <div className={cn('font-medium', labelClassName)}>{labelFormatter(value, payload)}</div>;\n    }\n\n    if (!value) {\n      return null;\n    }\n\n    return <div className={cn('font-medium', labelClassName)}>{value}</div>;\n  }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey]);\n\n  if (!active || !payload?.length) {\n    return null;\n  }\n\n  const nestLabel = payload.length === 1 && indicator !== 'dot';\n\n  return (\n    <div\n      className={cn(\n        'border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl',\n        className,\n      )}\n    >\n      {!nestLabel ? tooltipLabel : null}\n      <div className=\"grid gap-1.5\">\n        {payload.map((item, index) => {\n          const key = `${nameKey || item.name || item.dataKey || 'value'}`;\n          const itemConfig = getPayloadConfigFromPayload(config, item, key);\n          const indicatorColor = color || item.payload.fill || item.color;\n\n          return (\n            <div\n              key={item.dataKey}\n              className={cn(\n                '[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5',\n                indicator === 'dot' && 'items-center',\n              )}\n            >\n              {formatter && item?.value !== undefined && item.name ? (\n                formatter(item.value, item.name, item, index, item.payload)\n              ) : (\n                <>\n                  {itemConfig?.icon ? (\n                    <itemConfig.icon />\n                  ) : (\n                    !hideIndicator && (\n                      <div\n                        className={cn('shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)', {\n                          'h-2.5 w-2.5': indicator === 'dot',\n                          'w-1': indicator === 'line',\n                          'w-0 border-[1.5px] border-dashed bg-transparent': indicator === 'dashed',\n                          'my-0.5': nestLabel && indicator === 'dashed',\n                        })}\n                        style={\n                          {\n                            '--color-bg': indicatorColor,\n                            '--color-border': indicatorColor,\n                          } as React.CSSProperties\n                        }\n                      />\n                    )\n                  )}\n                  <div\n                    className={cn('flex flex-1 justify-between leading-none', nestLabel ? 'items-end' : 'items-center')}\n                  >\n                    <div className=\"grid gap-1.5\">\n                      {nestLabel ? tooltipLabel : null}\n                      <span className=\"text-muted-foreground\">{itemConfig?.label || item.name}</span>\n                    </div>\n                    {item.value && (\n                      <span className=\"text-foreground font-mono font-medium tabular-nums\">\n                        {item.value.toLocaleString()}\n                      </span>\n                    )}\n                  </div>\n                </>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nconst ChartLegend = RechartsPrimitive.Legend;\n\nfunction ChartLegendContent({\n  className,\n  hideIcon = false,\n  payload,\n  verticalAlign = 'bottom',\n  nameKey,\n}: React.ComponentProps<'div'> &\n  Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {\n    hideIcon?: boolean;\n    nameKey?: string;\n  }) {\n  const { config } = useChart();\n\n  if (!payload?.length) {\n    return null;\n  }\n\n  return (\n    <div className={cn('flex items-center justify-center gap-4', verticalAlign === 'top' ? 'pb-3' : 'pt-3', className)}>\n      {payload.map((item) => {\n        const key = `${nameKey || item.dataKey || 'value'}`;\n        const itemConfig = getPayloadConfigFromPayload(config, item, key);\n\n        return (\n          <div\n            key={item.value}\n            className={cn('[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3')}\n          >\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                style={{\n                  backgroundColor: item.color,\n                }}\n              />\n            )}\n            {itemConfig?.label}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(config: ChartConfig, payload: unknown, key: string) {\n  if (typeof payload !== 'object' || payload === null) {\n    return undefined;\n  }\n\n  const payloadPayload =\n    'payload' in payload && typeof payload.payload === 'object' && payload.payload !== null\n      ? payload.payload\n      : undefined;\n\n  let configLabelKey: string = key;\n\n  if (key in payload && typeof payload[key as keyof typeof payload] === 'string') {\n    configLabelKey = payload[key as keyof typeof payload] as string;\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'\n  ) {\n    configLabelKey = payloadPayload[key as keyof typeof payloadPayload] as string;\n  }\n\n  return configLabelKey in config ? config[configLabelKey] : config[key as keyof typeof config];\n}\n\nexport { ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent, ChartStyle };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/select.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { isValidElement, ReactNode } from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport { Check, ChevronDown, ChevronUp } from 'lucide-react';\nimport { Select as SelectPrimitive } from 'radix-ui';\n\n// Create a Context for `indicatorPosition` and `indicator` control\nconst SelectContext = React.createContext<{\n  indicatorPosition: 'left' | 'right';\n  indicatorVisibility: boolean;\n  indicator: ReactNode;\n}>({ indicatorPosition: 'left', indicator: null, indicatorVisibility: true });\n\n// Root Component\nconst Select = ({\n  indicatorPosition = 'left',\n  indicatorVisibility = true,\n  indicator,\n  ...props\n}: {\n  indicatorPosition?: 'left' | 'right';\n  indicatorVisibility?: boolean;\n  indicator?: ReactNode;\n} & React.ComponentProps<typeof SelectPrimitive.Root>) => {\n  return (\n    <SelectContext.Provider value={{ indicatorPosition, indicatorVisibility, indicator }}>\n      <SelectPrimitive.Root {...props} />\n    </SelectContext.Provider>\n  );\n};\n\nfunction SelectGroup({ ...props }: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />;\n}\n\nfunction SelectValue({ ...props }: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />;\n}\n\n// Define size variants for SelectTrigger\nconst selectTriggerVariants = cva(\n  `\n    flex bg-background w-full items-center justify-between outline-none border border-input shadow-xs shadow-black/5 transition-shadow \n    text-foreground data-placeholder:text-muted-foreground focus-visible:border-ring focus-visible:outline-none focus-visible:ring-[3px] \n    focus-visible:ring-ring/30 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 \n    aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n    [[data-invalid=true]_&]:border-destructive/60 [[data-invalid=true]_&]:ring-destructive/10  dark:[[data-invalid=true]_&]:border-destructive dark:[[data-invalid=true]_&]:ring-destructive/20\n  `,\n  {\n    variants: {\n      size: {\n        sm: 'h-7 px-2.5 text-xs gap-1 rounded-md',\n        md: 'h-8.5 px-3 text-[0.8125rem] leading-(--text-sm--line-height) gap-1 rounded-md',\n        lg: 'h-10 px-4 text-sm gap-1.5 rounded-md',\n      },\n    },\n    defaultVariants: {\n      size: 'md',\n    },\n  },\n);\n\nexport interface SelectTriggerProps\n  extends React.ComponentProps<typeof SelectPrimitive.Trigger>,\n    VariantProps<typeof selectTriggerVariants> {}\n\nfunction SelectTrigger({ className, children, size, ...props }: SelectTriggerProps) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      className={cn(selectTriggerVariants({ size }), className)}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDown className=\"h-4 w-4 opacity-60 -me-0.5\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  );\n}\n\nfunction SelectScrollUpButton({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn('flex cursor-default items-center justify-center py-1', className)}\n      {...props}\n    >\n      <ChevronUp className=\"h-4 w-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  );\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn('flex cursor-default items-center justify-center py-1', className)}\n      {...props}\n    >\n      <ChevronDown className=\"h-4 w-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  );\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = 'popper',\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          'relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border border-border bg-popover shadow-md shadow-black/5 text-secondary-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n          position === 'popper' &&\n            'data-[side=bottom]:translate-y-1.5 data-[side=left]:-translate-x-1.5 data-[side=right]:translate-x-1.5 data-[side=top]:-translate-y-1.5',\n          className,\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            'p-1.5',\n            position === 'popper' &&\n              'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]',\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  );\n}\n\nfunction SelectLabel({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn('py-1.5 ps-8 pe-2 text-xs text-muted-foreground font-medium', className)}\n      {...props}\n    />\n  );\n}\n\nfunction SelectItem({ className, children, ...props }: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  const { indicatorPosition, indicatorVisibility, indicator } = React.useContext(SelectContext);\n\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 text-sm outline-hidden text-foreground hover:bg-accent focus:bg-accent data-disabled:pointer-events-none data-disabled:opacity-50',\n        indicatorPosition === 'left' ? 'ps-8 pe-2' : 'pe-8 ps-2',\n        className,\n      )}\n      {...props}\n    >\n      {indicatorVisibility &&\n        (indicator && isValidElement(indicator) ? (\n          indicator\n        ) : (\n          <span\n            className={cn(\n              'absolute flex h-3.5 w-3.5 items-center justify-center',\n              indicatorPosition === 'left' ? 'start-2' : 'end-2',\n            )}\n          >\n            <SelectPrimitive.ItemIndicator>\n              <Check className=\"h-4 w-4 text-primary\" />\n            </SelectPrimitive.ItemIndicator>\n          </span>\n        ))}\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  );\n}\n\nfunction SelectIndicator({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ItemIndicator>) {\n  const { indicatorPosition } = React.useContext(SelectContext);\n\n  return (\n    <span\n      data-slot=\"select-indicator\"\n      className={cn(\n        'absolute flex top-1/2 -translate-y-1/2 items-center justify-center',\n        indicatorPosition === 'left' ? 'start-2' : 'end-2',\n        className,\n      )}\n      {...props}\n    >\n      <SelectPrimitive.ItemIndicator>{children}</SelectPrimitive.ItemIndicator>\n    </span>\n  );\n}\n\nfunction SelectSeparator({ className, ...props }: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn('-mx-1.5 my-1.5 h-px bg-border', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectIndicator,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
