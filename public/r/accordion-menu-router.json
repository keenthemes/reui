{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "accordion-menu-router",
  "type": "registry:component",
  "dependencies": ["class-variance-authority", "lucide-react", "radix-ui"],
  "registryDependencies": ["https://reui.io/r/accordion-menu.json"],
  "files": [
    {
      "path": "registry/default/components/accordion-menu/router.tsx",
      "content": "'use client';\n\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\nimport {\n  AccordionMenu,\n  AccordionMenuGroup,\n  AccordionMenuItem,\n  AccordionMenuLabel,\n  AccordionMenuSeparator,\n  AccordionMenuSub,\n  AccordionMenuSubContent,\n  AccordionMenuSubTrigger,\n} from '@/registry/default/ui/accordion-menu';\nimport {\n  AlertCircle,\n  Bell,\n  Box,\n  Calendar,\n  CheckSquare,\n  ChevronDown,\n  Edit,\n  Eye,\n  FileText,\n  Folder,\n  Grid,\n  Info,\n  List,\n  Logs,\n  MessageCircle,\n  Settings,\n  Sliders,\n  Star,\n  User,\n} from 'lucide-react';\n\nexport default function AccordionMenuDemo() {\n  const pathname = usePathname();\n\n  const matchPath = (path: string) => path === pathname || (path.length > 1 && pathname.startsWith(path));\n\n  return (\n    <div className=\"w-full md:w-[250px] overflow-hidden border border-border rounded-md p-2\">\n      <AccordionMenu\n        selectedValue={pathname}\n        matchPath={matchPath}\n        type=\"single\" // Kept as 'single' per your latest demo\n        collapsible\n        classNames={{ separator: '-mx-2 mb-2.5' }}\n      >\n        <AccordionMenuLabel>Components</AccordionMenuLabel>\n        <AccordionMenuSeparator />\n\n        <AccordionMenuGroup>\n          {/* Level 1: Components */}\n          <AccordionMenuSub value=\"components\">\n            <AccordionMenuSubTrigger>\n              <Folder />\n              <span>General</span>\n            </AccordionMenuSubTrigger>\n            <AccordionMenuSubContent type=\"single\" collapsible parentValue=\"components\">\n              <AccordionMenuGroup>\n                {/* Level 2: Core Components */}\n                <AccordionMenuItem value=\"/docs/accordion\">\n                  <Link href=\"/docs/accordion\">\n                    <Star />\n                    <span>Accordion</span>\n                  </Link>\n                </AccordionMenuItem>\n                <AccordionMenuItem value=\"/docs/button\">\n                  <Link href=\"/docs/button\">\n                    <Settings />\n                    <span>Button</span>\n                  </Link>\n                </AccordionMenuItem>\n                <AccordionMenuItem value=\"/docs/input\">\n                  <Link href=\"/docs/input\">\n                    <Edit />\n                    <span>Input</span>\n                  </Link>\n                </AccordionMenuItem>\n                <AccordionMenuItem value=\"/docs/select\">\n                  <Link href=\"/docs/select\">\n                    <List />\n                    <span>Select</span>\n                  </Link>\n                </AccordionMenuItem>\n                <AccordionMenuSub value=\"interactive\">\n                  <AccordionMenuSubTrigger>\n                    <Grid />\n                    <span>Interactive</span>\n                  </AccordionMenuSubTrigger>\n                  <AccordionMenuSubContent type=\"single\" collapsible parentValue=\"interactive\">\n                    <AccordionMenuGroup>\n                      {/* Level 3: Interactive Components */}\n                      <AccordionMenuItem value=\"/docs/tooltip\">\n                        <Link href=\"/docs/tooltip\">\n                          <MessageCircle />\n                          <span>Tooltip</span>\n                        </Link>\n                      </AccordionMenuItem>\n                      <AccordionMenuItem value=\"/docs/popover\">\n                        <Link href=\"/docs/popover\">\n                          <Bell />\n                          <span>Popover</span>\n                        </Link>\n                      </AccordionMenuItem>\n                      <AccordionMenuItem value=\"/docs/dropdown-menu\">\n                        <Link href=\"/docs/dropdown-menu\">\n                          <ChevronDown />\n                          <span>Dropdown Menu</span>\n                        </Link>\n                      </AccordionMenuItem>\n                      <AccordionMenuItem value=\"/docs/dialog\">\n                        <Link href=\"/docs/dialog\">\n                          <AlertCircle />\n                          <span>Dialog</span>\n                        </Link>\n                      </AccordionMenuItem>\n                      <AccordionMenuItem value=\"/docs/switch\">\n                        <Link href=\"/docs/switch\">\n                          <Sliders />\n                          <span>Switch</span>\n                        </Link>\n                      </AccordionMenuItem>\n                    </AccordionMenuGroup>\n                  </AccordionMenuSubContent>\n                </AccordionMenuSub>\n                <AccordionMenuSub value=\"data-display\">\n                  <AccordionMenuSubTrigger>\n                    <Box />\n                    <span>Data Display</span>\n                  </AccordionMenuSubTrigger>\n                  <AccordionMenuSubContent type=\"single\" collapsible parentValue=\"data-display\">\n                    <AccordionMenuGroup>\n                      {/* Level 3: Data Display Components */}\n                      <AccordionMenuItem value=\"/docs/table\">\n                        <Link href=\"/docs/table\">\n                          <FileText />\n                          <span>Table</span>\n                        </Link>\n                      </AccordionMenuItem>\n                      <AccordionMenuItem value=\"/docs/card\">\n                        <Link href=\"/docs/card\">\n                          <Box />\n                          <span>Card</span>\n                        </Link>\n                      </AccordionMenuItem>\n                      <AccordionMenuItem value=\"/docs/avatar\">\n                        <Link href=\"/docs/avatar\">\n                          <User />\n                          <span>Avatar</span>\n                        </Link>\n                      </AccordionMenuItem>\n                      <AccordionMenuItem value=\"/docs/badge\">\n                        <Link href=\"/docs/badge\">\n                          <Star />\n                          <span>Badge</span>\n                        </Link>\n                      </AccordionMenuItem>\n                      <AccordionMenuItem value=\"/docs/skeleton\">\n                        <Link href=\"/docs/skeleton\">\n                          <Eye />\n                          <span>Skeleton</span>\n                        </Link>\n                      </AccordionMenuItem>\n                    </AccordionMenuGroup>\n                  </AccordionMenuSubContent>\n                </AccordionMenuSub>\n              </AccordionMenuGroup>\n            </AccordionMenuSubContent>\n          </AccordionMenuSub>\n\n          {/* Level 1: Navigation */}\n          <AccordionMenuSub value=\"navigation\">\n            <AccordionMenuSubTrigger>\n              <Calendar />\n              <span>Navigation</span>\n            </AccordionMenuSubTrigger>\n            <AccordionMenuSubContent type=\"single\" collapsible parentValue=\"navigation\">\n              <AccordionMenuGroup>\n                <AccordionMenuItem value=\"/docs/separator\">\n                  <Link href=\"/docs/separator\">\n                    <FileText />\n                    <span>Separator</span>\n                  </Link>\n                </AccordionMenuItem>\n                <AccordionMenuItem value=\"/docs/tabs\">\n                  <Link href=\"/docs/tabs\">\n                    <Grid />\n                    <span>Tabs</span>\n                  </Link>\n                </AccordionMenuItem>\n                <AccordionMenuSub value=\"overlays\">\n                  <AccordionMenuSubTrigger>\n                    <Info />\n                    <span>Overlays</span>\n                  </AccordionMenuSubTrigger>\n                  <AccordionMenuSubContent type=\"single\" collapsible parentValue=\"overlays\">\n                    <AccordionMenuGroup>\n                      {/* Level 3: Overlay Components */}\n                      <AccordionMenuItem value=\"/docs/tooltip\">\n                        <Link href=\"/docs/tooltip\">\n                          <MessageCircle />\n                          <span>Tooltip</span>\n                        </Link>\n                      </AccordionMenuItem>\n                      <AccordionMenuItem value=\"/docs/accordion-menu\">\n                        <Link href=\"/docs/accordion-menu\">\n                          <Logs />\n                          <span>Accordion Menu</span>\n                        </Link>\n                      </AccordionMenuItem>\n                      <AccordionMenuItem value=\"/docs/popover\">\n                        <Link href=\"/docs/popover\">\n                          <Bell />\n                          <span>Popover</span>\n                        </Link>\n                      </AccordionMenuItem>\n                      <AccordionMenuItem value=\"/docs/dialog\">\n                        <Link href=\"/docs/dialog\">\n                          <AlertCircle />\n                          <span>Dialog</span>\n                        </Link>\n                      </AccordionMenuItem>\n                      <AccordionMenuItem value=\"/docs/sheet\">\n                        <Link href=\"/docs/sheet\">\n                          <Box />\n                          <span>Sheet</span>\n                        </Link>\n                      </AccordionMenuItem>\n                    </AccordionMenuGroup>\n                  </AccordionMenuSubContent>\n                </AccordionMenuSub>\n              </AccordionMenuGroup>\n            </AccordionMenuSubContent>\n          </AccordionMenuSub>\n\n          {/* Level 1: Utilities */}\n          <AccordionMenuSub value=\"utilities\">\n            <AccordionMenuSubTrigger>\n              <Settings />\n              <span>Utilities</span>\n            </AccordionMenuSubTrigger>\n            <AccordionMenuSubContent type=\"single\" collapsible parentValue=\"utilities\">\n              <AccordionMenuGroup>\n                <AccordionMenuItem value=\"/docs/scroll-area\">\n                  <Link href=\"/docs/scroll-area\">\n                    <Sliders />\n                    <span>Scroll Area</span>\n                  </Link>\n                </AccordionMenuItem>\n                <AccordionMenuItem value=\"/docs/sonner\">\n                  <Link href=\"/docs/sonner\">\n                    <Bell />\n                    <span>Sonner</span>\n                  </Link>\n                </AccordionMenuItem>\n                <AccordionMenuItem value=\"/docs/kbd\">\n                  <Link href=\"/docs/kbd\">\n                    <Edit />\n                    <span>Kbd</span>\n                  </Link>\n                </AccordionMenuItem>\n                <AccordionMenuItem value=\"/docs/collapsible\">\n                  <Link href=\"/docs/collapsible\">\n                    <CheckSquare />\n                    <span>Collapsible</span>\n                  </Link>\n                </AccordionMenuItem>\n                <AccordionMenuSub value=\"inputs\">\n                  <AccordionMenuSubTrigger>\n                    <User />\n                    <span>Inputs</span>\n                  </AccordionMenuSubTrigger>\n                  <AccordionMenuSubContent type=\"single\" collapsible parentValue=\"inputs\">\n                    <AccordionMenuGroup>\n                      {/* Level 3: Input Components */}\n                      <AccordionMenuItem value=\"/docs/checkbox\">\n                        <Link href=\"/docs/checkbox\">\n                          <CheckSquare />\n                          <span>Checkbox</span>\n                        </Link>\n                      </AccordionMenuItem>\n                      <AccordionMenuItem value=\"/docs/radio-group\">\n                        <Link href=\"/docs/radio-group\">\n                          <Star />\n                          <span>Radio Group</span>\n                        </Link>\n                      </AccordionMenuItem>\n                      <AccordionMenuItem value=\"/docs/slider\">\n                        <Link href=\"/docs/slider\">\n                          <Sliders />\n                          <span>Slider</span>\n                        </Link>\n                      </AccordionMenuItem>\n                      <AccordionMenuItem value=\"/docs/textarea\">\n                        <Link href=\"/docs/textarea\">\n                          <FileText />\n                          <span>Textarea</span>\n                        </Link>\n                      </AccordionMenuItem>\n                      <AccordionMenuItem value=\"/docs/date-picker\">\n                        <Link href=\"/docs/date-picker\">\n                          <Calendar />\n                          <span>Date Picker</span>\n                        </Link>\n                      </AccordionMenuItem>\n                    </AccordionMenuGroup>\n                  </AccordionMenuSubContent>\n                </AccordionMenuSub>\n              </AccordionMenuGroup>\n            </AccordionMenuSubContent>\n          </AccordionMenuSub>\n        </AccordionMenuGroup>\n      </AccordionMenu>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/accordion-menu.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { ChevronDown } from 'lucide-react';\nimport { Accordion as AccordionPrimitive } from 'radix-ui';\nimport { cn } from '@/lib/utils';\n\ninterface AccordionMenuContextValue {\n  matchPath: (href: string) => boolean;\n  selectedValue: string | undefined;\n  setSelectedValue: React.Dispatch<React.SetStateAction<string | undefined>>;\n  classNames?: AccordionMenuClassNames;\n  nestedStates: Record<string, string | string[]>;\n  setNestedStates: React.Dispatch<React.SetStateAction<Record<string, string | string[]>>>;\n  onItemClick?: (value: string, event: React.MouseEvent) => void;\n}\n\ninterface AccordionMenuClassNames {\n  root?: string;\n  group?: string;\n  label?: string;\n  separator?: string;\n  item?: string;\n  sub?: string;\n  subTrigger?: string;\n  subContent?: string;\n  subWrapper?: string;\n  indicator?: string;\n}\n\ninterface AccordionMenuProps {\n  selectedValue?: string;\n  matchPath?: (href: string) => boolean;\n  classNames?: AccordionMenuClassNames;\n  onItemClick?: (value: string, event: React.MouseEvent) => void;\n}\n\nconst AccordionMenuContext = React.createContext<AccordionMenuContextValue>({\n  matchPath: () => false,\n  selectedValue: '',\n  setSelectedValue: () => {},\n  nestedStates: {},\n  setNestedStates: () => {},\n});\n\nfunction AccordionMenu({\n  className,\n  matchPath = () => false,\n  classNames,\n  children,\n  selectedValue,\n  onItemClick,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Root> & AccordionMenuProps) {\n  const [internalSelectedValue, setInternalSelectedValue] = React.useState<string | undefined>(selectedValue);\n  React.useEffect(() => {\n    setInternalSelectedValue(selectedValue);\n  }, [selectedValue]);\n\n  const initialNestedStates = React.useMemo(() => {\n    const getActiveChain = (nodes: React.ReactNode, chain: string[] = []): string[] => {\n      let result: string[] = [];\n      React.Children.forEach(nodes, (node) => {\n        if (React.isValidElement(node)) {\n          const { value, children } = node.props as {\n            value?: string;\n            children?: React.ReactNode;\n          };\n          const newChain = value ? [...chain, value] : chain;\n          if (value && (value === selectedValue || matchPath(value))) {\n            result = newChain;\n          } else if (children) {\n            const childChain = getActiveChain(children, newChain);\n            if (childChain.length > 0) {\n              result = childChain;\n            }\n          }\n        }\n      });\n      return result;\n    };\n\n    const chain = getActiveChain(children);\n    const trimmedChain = chain.length > 1 ? chain.slice(0, chain.length - 1) : chain;\n    const mapping: Record<string, string | string[]> = {};\n    if (trimmedChain.length > 0) {\n      if (props.type === 'multiple') {\n        mapping['root'] = trimmedChain;\n      } else {\n        mapping['root'] = trimmedChain[0];\n        for (let i = 0; i < trimmedChain.length - 1; i++) {\n          mapping[trimmedChain[i]] = trimmedChain[i + 1];\n        }\n      }\n    }\n    return mapping;\n  }, [children, matchPath, selectedValue, props.type]);\n\n  const [nestedStates, setNestedStates] = React.useState<Record<string, string | string[]>>(initialNestedStates);\n  const multipleValue = (\n    Array.isArray(nestedStates['root'])\n      ? nestedStates['root']\n      : typeof nestedStates['root'] === 'string'\n        ? [nestedStates['root']]\n        : []\n  ) as string[];\n  const singleValue = (nestedStates['root'] ?? '') as string;\n\n  return (\n    <AccordionMenuContext.Provider\n      value={{\n        matchPath,\n        selectedValue: internalSelectedValue,\n        setSelectedValue: setInternalSelectedValue,\n        classNames,\n        onItemClick,\n        nestedStates,\n        setNestedStates,\n      }}\n    >\n      {props.type === 'single' ? (\n        <AccordionPrimitive.Root\n          data-slot=\"accordion-menu\"\n          value={singleValue}\n          className={cn('w-full', classNames?.root, className)}\n          onValueChange={(value: string) => setNestedStates((prev) => ({ ...prev, root: value }))}\n          {...props}\n          role=\"menu\"\n        >\n          {children}\n        </AccordionPrimitive.Root>\n      ) : (\n        <AccordionPrimitive.Root\n          data-slot=\"accordion-menu\"\n          value={multipleValue}\n          className={cn('w-full', classNames?.root, className)}\n          onValueChange={(value: string | string[]) => setNestedStates((prev) => ({ ...prev, root: value }))}\n          {...props}\n          role=\"menu\"\n        >\n          {children}\n        </AccordionPrimitive.Root>\n      )}\n    </AccordionMenuContext.Provider>\n  );\n}\n\ntype AccordionMenuGroupProps = React.ComponentPropsWithoutRef<'div'>;\n\nfunction AccordionMenuGroup({ children, className, ...props }: AccordionMenuGroupProps) {\n  const { classNames } = React.useContext(AccordionMenuContext);\n  return (\n    <div\n      data-slot=\"accordion-menu-group\"\n      role=\"group\"\n      className={cn('space-y-0.5', classNames?.group, className)}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n\ntype AccordionMenuLabelProps = React.ComponentPropsWithoutRef<'div'>;\n\nfunction AccordionMenuLabel({ children, className, ...props }: AccordionMenuLabelProps) {\n  const { classNames } = React.useContext(AccordionMenuContext);\n\n  return (\n    <div\n      data-slot=\"accordion-menu-label\"\n      role=\"presentation\"\n      className={cn('px-2 py-1.5 text-xs font-medium text-muted-foreground', classNames?.label, className)}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n\ntype AccordionMenuSeparatorProps = React.ComponentPropsWithoutRef<'div'>;\n\nfunction AccordionMenuSeparator({ className, ...props }: AccordionMenuSeparatorProps) {\n  const { classNames } = React.useContext(AccordionMenuContext);\n  return (\n    <div\n      data-slot=\"accordion-menu-separator\"\n      role=\"separator\"\n      className={cn('my-1 h-px bg-border', classNames?.separator, className)}\n      {...props}\n    />\n  );\n}\n\nconst itemVariants = cva(\n  'relative cursor-pointer select-none flex w-full text-start items-center text-foreground rounded-lg gap-2 px-2 py-1.5 text-sm outline-hidden transition-colors hover:bg-accent hover:text-accent-foreground data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground disabled:opacity-50 disabled:bg-transparent focus-visible:bg-accent focus-visible:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:opacity-60 [&_svg:not([class*=size-])]:size-4 [&_svg]:shrink-0 [&_a]:flex [&>a]:w-full [&>a]:items-center [&>a]:gap-2',\n  {\n    variants: {\n      variant: {\n        default: '',\n        destructive:\n          'text-destructive hover:text-destructive focus:text-destructive hover:bg-destructive/5 focus:bg-destructive/5 data-[active=true]:bg-destructive/5',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n);\n\nfunction AccordionMenuItem({\n  className,\n  children,\n  variant,\n  asChild,\n  onClick,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item> &\n  VariantProps<typeof itemVariants> & {\n    onClick?: React.MouseEventHandler<HTMLElement>;\n  }) {\n  const { classNames, selectedValue, matchPath, onItemClick } = React.useContext(AccordionMenuContext);\n  return (\n    <AccordionPrimitive.Item className=\"flex\" {...props}>\n      <AccordionPrimitive.Header className=\"flex w-full\">\n        <AccordionPrimitive.Trigger\n          asChild={asChild}\n          data-slot=\"accordion-menu-item\"\n          className={cn(itemVariants({ variant }), classNames?.item, className)}\n          onClick={(e) => {\n            if (onItemClick) {\n              onItemClick(props.value, e);\n            }\n\n            if (onClick) {\n              onClick(e);\n            }\n            e.preventDefault();\n          }}\n          onKeyDown={(e) => {\n            if (e.key === 'Enter') {\n              e.preventDefault();\n              const target = e.currentTarget as HTMLElement;\n              const firstChild = target.firstElementChild as HTMLElement | null;\n              if (firstChild) {\n                firstChild.click();\n              }\n            }\n          }}\n          data-selected={matchPath(props.value as string) || selectedValue === props.value ? 'true' : undefined}\n        >\n          {children}\n        </AccordionPrimitive.Trigger>\n      </AccordionPrimitive.Header>\n    </AccordionPrimitive.Item>\n  );\n}\n\nfunction AccordionMenuSub({\n  className,\n  children,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>) {\n  const { classNames } = React.useContext(AccordionMenuContext);\n  return (\n    <AccordionPrimitive.Item data-slot=\"accordion-menu-sub\" className={cn(classNames?.sub, className)} {...props}>\n      {children}\n    </AccordionPrimitive.Item>\n  );\n}\n\nfunction AccordionMenuSubTrigger({\n  className,\n  children,\n}: React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>) {\n  const { classNames } = React.useContext(AccordionMenuContext);\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        data-slot=\"accordion-menu-sub-trigger\"\n        className={cn(\n          'w-full relative flex items-center cursor-pointer select-none text-start rounded-lg gap-2 px-2 py-1.5 text-sm outline-hidden text-foreground transition-colors hover:bg-accent hover:text-accent-foreground focus-visible:bg-accent focus-visible:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([role=img]):not([class*=text-])]:opacity-60 [&_svg:not([class*=size-])]:size-4 [&_svg]:shrink-0',\n          classNames?.subTrigger,\n          className,\n        )}\n      >\n        <>\n          {children}\n          <ChevronDown\n            data-slot=\"accordion-menu-sub-indicator\"\n            className={cn(\n              'ms-auto size-3.5! shrink-0 text-muted-foreground transition-transform duration-200 [[data-state=open]>&]:-rotate-180',\n            )}\n          />\n        </>\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  );\n}\n\ntype AccordionMenuSubContentProps = (\n  | (React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content> & {\n      type: 'single';\n      collapsible: boolean;\n      defaultValue?: string;\n    })\n  | (React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content> & {\n      type: 'multiple';\n      collapsible?: boolean;\n      defaultValue?: string | string[];\n    })\n) & {\n  parentValue: string;\n};\n\nfunction AccordionMenuSubContent({\n  className,\n  children,\n  type,\n  collapsible,\n  defaultValue,\n  parentValue,\n  ...props\n}: AccordionMenuSubContentProps) {\n  const { nestedStates, setNestedStates, classNames } = React.useContext(AccordionMenuContext);\n  let currentValue;\n  if (type === 'multiple') {\n    const stateValue = nestedStates[parentValue];\n    if (Array.isArray(stateValue)) {\n      currentValue = stateValue;\n    } else if (typeof stateValue === 'string') {\n      currentValue = [stateValue];\n    } else if (defaultValue) {\n      currentValue = Array.isArray(defaultValue) ? defaultValue : [defaultValue];\n    } else {\n      currentValue = [];\n    }\n  } else {\n    currentValue = nestedStates[parentValue] ?? defaultValue ?? '';\n  }\n\n  return (\n    <AccordionPrimitive.Content\n      data-slot=\"accordion-menu-sub-content\"\n      className={cn(\n        'ps-5',\n        'overflow-hidden transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down',\n        classNames?.subContent,\n        className,\n      )}\n      {...props}\n    >\n      {type === 'multiple' ? (\n        <AccordionPrimitive.Root\n          className={cn('w-full py-0.5', classNames?.subWrapper)}\n          type=\"multiple\"\n          value={currentValue as string[]}\n          role=\"menu\"\n          data-slot=\"accordion-menu-sub-wrapper\"\n          onValueChange={(value: string | string[]) => {\n            const newValue = Array.isArray(value) ? value : [value];\n            setNestedStates((prev) => ({ ...prev, [parentValue]: newValue }));\n          }}\n        >\n          {children}\n        </AccordionPrimitive.Root>\n      ) : (\n        <AccordionPrimitive.Root\n          className={cn('w-full py-0.5', classNames?.subWrapper)}\n          type=\"single\"\n          collapsible={collapsible}\n          value={currentValue as string}\n          role=\"menu\"\n          data-slot=\"accordion-menu-sub-wrapper\"\n          onValueChange={(value: string | string[]) => setNestedStates((prev) => ({ ...prev, [parentValue]: value }))}\n        >\n          {children}\n        </AccordionPrimitive.Root>\n      )}\n    </AccordionPrimitive.Content>\n  );\n}\n\ntype AccordionMenuIndicatorProps = React.ComponentPropsWithoutRef<'span'>;\n\nfunction AccordionMenuIndicator({ className, ...props }: AccordionMenuIndicatorProps) {\n  const { classNames } = React.useContext(AccordionMenuContext);\n  return (\n    <span\n      aria-hidden=\"true\"\n      data-slot=\"accordion-menu-indicator\"\n      className={cn('ms-auto flex items-center font-medium', classNames?.indicator, className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  AccordionMenu,\n  AccordionMenuGroup,\n  AccordionMenuIndicator,\n  AccordionMenuItem,\n  AccordionMenuLabel,\n  AccordionMenuSeparator,\n  AccordionMenuSub,\n  AccordionMenuSubContent,\n  AccordionMenuSubTrigger,\n  type AccordionMenuClassNames,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
