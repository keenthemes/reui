{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "line-chart-9",
  "type": "registry:block",
  "dependencies": ["recharts@2.15.1", "clsx", "tailwind-merge", "class-variance-authority", "recharts", "lucide-react"],
  "registryDependencies": ["https://reui.io/r/card.json", "https://reui.io/r/chart.json"],
  "files": [
    {
      "path": "registry/default/blocks/charts/line-charts/line-chart-9.tsx",
      "content": "'use client';\n\nimport React from 'react';\nimport { Card, CardContent } from '@/registry/default/ui/card';\nimport { ChartConfig, ChartContainer, ChartTooltip } from '@/registry/default/ui/chart';\nimport { TrendingUp } from 'lucide-react';\nimport { CartesianGrid, ComposedChart, Line, ReferenceLine, XAxis, YAxis } from 'recharts';\n\n// E-commerce revenue tracking with seasonal fluctuations\nconst portfolioData = [\n  { date: 'Jan 1', value: 850, time: '20:00' },\n  { date: 'Jan 2', value: 1100, time: '00:00' },\n  { date: 'Jan 3', value: 1680, time: '04:00' },\n  { date: 'Jan 4', value: 1490, time: '08:00' },\n  { date: 'Jan 5', value: 2020, time: '12:00' },\n  { date: 'Jan 6', value: 2080, time: '16:00' },\n  { date: 'Jan 7', value: 2180, time: '20:00' },\n  { date: 'Jan 8', value: 2250, time: '00:00' },\n  { date: 'Jan 9', value: 2480, time: '04:00' },\n  { date: 'Jan 10', value: 2290, time: '08:00' },\n  { date: 'Jan 11', value: 2450, time: '12:00' },\n  { date: 'Jan 12', value: 2380, time: '16:00' },\n  { date: 'Jan 13', value: 2220, time: '20:00' },\n  { date: 'Jan 14', value: 1980, time: '00:00' },\n  { date: 'Jan 15', value: 1750, time: '04:00' },\n  { date: 'Jan 16', value: 1620, time: '08:00' },\n  { date: 'Jan 17', value: 1480, time: '12:00' },\n  { date: 'Jan 18', value: 1580, time: '16:00' },\n  { date: 'Jan 19', value: 1820, time: '20:00' },\n  { date: 'Jan 20', value: 1950, time: '00:00' },\n  { date: 'Jan 21', value: 2080, time: '04:00' },\n  { date: 'Jan 22', value: 2220, time: '08:00' },\n  { date: 'Jan 23', value: 2380, time: '12:00' },\n  { date: 'Jan 24', value: 2550, time: '16:00' },\n  { date: 'Jan 25', value: 2480, time: '20:00' },\n  { date: 'Jan 26', value: 2720, time: '00:00' },\n  { date: 'Jan 27', value: 2900, time: '04:00' },\n  { date: 'Jan 28', value: 2550, time: '08:00' },\n  { date: 'Jan 29', value: 2320, time: '12:00' },\n  { date: 'Feb 15', value: 2250, time: '14:00' },\n  { date: 'Mar 24', value: 1900, time: '16:00' },\n];\n\n// Chart configuration\nconst chartConfig = {\n  value: {\n    label: 'Balance',\n    color: 'var(--color-purple-500)',\n  },\n} satisfies ChartConfig;\n\n// Calculate portfolio metrics\nconst currentBalance = 24847.83;\nconst todaysPnL = 1249.0;\nconst pnlPercentage = 8;\nconst highValue = Math.max(...portfolioData.map((d) => d.value));\nconst lowValue = Math.min(...portfolioData.map((d) => d.value));\nconst change = -0.082;\n\n// Custom Tooltip\ninterface TooltipProps {\n  active?: boolean;\n  payload?: Array<{\n    payload: {\n      date: string;\n      value: number;\n    };\n  }>;\n  label?: string;\n}\n\nconst CustomTooltip = ({ active, payload }: TooltipProps) => {\n  if (active && payload && payload.length) {\n    const data = payload[0].payload;\n    return (\n      <div className=\"bg-popover border border-border rounded-lg p-3 shadow-lg\">\n        <div className=\"text-sm text-muted-foreground mb-1\">{data.date}</div>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"text-base font-bold\">${(data.value * 10).toLocaleString()}.00</div>\n          <div className=\"text-[11px] text-emerald-600\">+12.7%</div>\n        </div>\n      </div>\n    );\n  }\n  return null;\n};\n\nexport default function LineChart9() {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-6\">\n      <Card className=\"w-full max-w-5xl\">\n        <CardContent className=\"flex flex-col items-stretch gap-5\">\n          {/* Header */}\n          <div className=\"mb-5\">\n            <h1 className=\"text-base text-muted-foreground font-medium mb-1\">Current Balance</h1>\n            <div className=\"flex flex-wrap items-baseline gap-1.5 sm:gap-3.5\">\n              <span className=\"text-4xl font-bold\">${currentBalance.toLocaleString()}</span>\n              <div className=\"flex items-center gap-1 text-emerald-600\">\n                <TrendingUp className=\"w-4 h-4\" />\n                <span className=\"font-medium\">+12.7%</span>\n                <span className=\"text-muted-foreground font-normal\">Last 24 hours</span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"grow\">\n            {/* Stats Row */}\n            <div className=\"flex items-center justify-between flex-wrap gap-2.5 text-sm mb-2.5\">\n              {/* Today's Sales */}\n              <div className=\"flex items-center gap-6\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-muted-foreground\">Today&apos;s Sales:</span>\n                  <span className=\"font-semibold\">${todaysPnL.toLocaleString()}</span>\n                  <div className=\"flex items-center gap-1 text-emerald-600\">\n                    <TrendingUp className=\"w-3 h-3\" />\n                    <span>(+{pnlPercentage}%)</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Stats Row */}\n              <div className=\"flex items-center gap-6 text-muted-foreground\">\n                <span>\n                  High: <span className=\"text-sky-600 font-medium\">{highValue.toLocaleString()}.08</span>\n                </span>\n                <span>\n                  Low: <span className=\"text-yellow-600 font-medium\">{lowValue.toLocaleString()}.42</span>\n                </span>\n                <span>\n                  Change: <span className=\"text-red-600 font-medium\">{change}%</span>\n                </span>\n              </div>\n            </div>\n\n            {/* Chart */}\n            <ChartContainer\n              config={chartConfig}\n              className=\"h-96 w-full [&_.recharts-curve.recharts-tooltip-cursor]:stroke-initial\"\n            >\n              <ComposedChart\n                data={portfolioData}\n                margin={{\n                  top: 20,\n                  right: 10,\n                  left: 5,\n                  bottom: 20,\n                }}\n              >\n                <defs>\n                  <linearGradient id=\"areaGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"0%\" stopColor={chartConfig.value.color} stopOpacity={0.1} />\n                    <stop offset=\"100%\" stopColor={chartConfig.value.color} stopOpacity={0} />\n                  </linearGradient>\n                  <pattern id=\"dotGrid\" x=\"0\" y=\"0\" width=\"20\" height=\"20\" patternUnits=\"userSpaceOnUse\">\n                    <circle cx=\"10\" cy=\"10\" r=\"1\" fill=\"var(--input)\" fillOpacity=\"0.3\" />\n                  </pattern>\n                  <filter id=\"dotShadow\" x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n                    <feDropShadow dx=\"2\" dy=\"3\" stdDeviation=\"3\" floodColor=\"rgba(0,0,0,0.8)\" />\n                  </filter>\n                  <filter id=\"lineShadow\" x=\"-100%\" y=\"-100%\" width=\"300%\" height=\"300%\">\n                    <feDropShadow dx=\"4\" dy=\"6\" stdDeviation=\"25\" floodColor=\"rgba(59, 130, 246, 0.9)\" />\n                  </filter>\n                </defs>\n\n                <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" fill=\"url(#dotGrid)\" style={{ pointerEvents: 'none' }} />\n\n                <CartesianGrid\n                  strokeDasharray=\"4 8\"\n                  stroke=\"var(--input)\"\n                  strokeOpacity={1}\n                  horizontal={true}\n                  vertical={false}\n                />\n\n                {/* Active tick reference line */}\n                <ReferenceLine x=\"Jan 17\" stroke={chartConfig.value.color} strokeDasharray=\"4 4\" strokeWidth={1} />\n\n                <XAxis\n                  dataKey=\"date\"\n                  axisLine={false}\n                  tickLine={false}\n                  tick={{ fontSize: 12, fill: chartConfig.value.color }}\n                  tickMargin={15}\n                  interval=\"preserveStartEnd\"\n                  tickCount={5}\n                />\n\n                <YAxis\n                  axisLine={false}\n                  tickLine={false}\n                  tick={{ fontSize: 12, fill: chartConfig.value.color }}\n                  tickFormatter={(value) => `$${(value * 2).toLocaleString()}`}\n                  tickMargin={15}\n                />\n\n                <ChartTooltip\n                  content={<CustomTooltip />}\n                  cursor={{ strokeDasharray: '3 3', stroke: 'var(--muted-foreground)', strokeOpacity: 0.5 }}\n                />\n\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"value\"\n                  stroke={chartConfig.value.color}\n                  strokeWidth={2}\n                  filter=\"url(#lineShadow)\"\n                  dot={(props) => {\n                    const { cx, cy, payload } = props;\n                    if (payload.date === 'Jan 17' || payload.value > 2800 || payload.value < 1000) {\n                      return (\n                        <circle\n                          key={`dot-${payload.date}`}\n                          cx={cx}\n                          cy={cy}\n                          r={6}\n                          fill={chartConfig.value.color}\n                          stroke=\"white\"\n                          strokeWidth={2}\n                          filter=\"url(#dotShadow)\"\n                        />\n                      );\n                    }\n\n                    return <g key={`dot-${payload.date}`} />; // Return empty group for other points\n                  }}\n                  activeDot={{\n                    r: 6,\n                    fill: chartConfig.value.color,\n                    stroke: 'white',\n                    strokeWidth: 2,\n                    filter: 'url(#dotShadow)',\n                  }}\n                />\n              </ComposedChart>\n            </ChartContainer>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
      "type": "registry:block"
    },
    {
      "path": "registry/default/ui/card.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\n// Define CardContext\ntype CardContextType = {\n  variant: 'default' | 'accent';\n};\n\nconst CardContext = React.createContext<CardContextType>({\n  variant: 'default', // Default value\n});\n\n// Hook to use CardContext\nconst useCardContext = () => {\n  const context = React.useContext(CardContext);\n  if (!context) {\n    throw new Error('useCardContext must be used within a Card component');\n  }\n  return context;\n};\n\n// Variants\nconst cardVariants = cva('flex flex-col items-stretch text-card-foreground rounded-xl', {\n  variants: {\n    variant: {\n      default: 'bg-card border border-border shadow-xs black/5',\n      accent: 'bg-muted shadow-xs p-1',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardHeaderVariants = cva('flex items-center justify-between flex-wrap px-5 min-h-14 gap-2.5', {\n  variants: {\n    variant: {\n      default: 'border-b border-border',\n      accent: '',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardContentVariants = cva('grow p-5', {\n  variants: {\n    variant: {\n      default: '',\n      accent: 'bg-card rounded-t-xl [&:last-child]:rounded-b-xl',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardTableVariants = cva('grid grow', {\n  variants: {\n    variant: {\n      default: '',\n      accent: 'bg-card rounded-xl',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\nconst cardFooterVariants = cva('flex items-center px-5 min-h-14', {\n  variants: {\n    variant: {\n      default: 'border-t border-border',\n      accent: 'bg-card rounded-b-xl mt-[2px]',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\n// Card Component\nfunction Card({\n  className,\n  variant = 'default',\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof cardVariants>) {\n  return (\n    <CardContext.Provider value={{ variant: variant || 'default' }}>\n      <div data-slot=\"card\" className={cn(cardVariants({ variant }), className)} {...props} />\n    </CardContext.Provider>\n  );\n}\n\n// CardHeader Component\nfunction CardHeader({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-header\" className={cn(cardHeaderVariants({ variant }), className)} {...props} />;\n}\n\n// CardContent Component\nfunction CardContent({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-content\" className={cn(cardContentVariants({ variant }), className)} {...props} />;\n}\n\n// CardTable Component\nfunction CardTable({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-table\" className={cn(cardTableVariants({ variant }), className)} {...props} />;\n}\n\n// CardFooter Component\nfunction CardFooter({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  const { variant } = useCardContext();\n  return <div data-slot=\"card-footer\" className={cn(cardFooterVariants({ variant }), className)} {...props} />;\n}\n\n// Other Components\nfunction CardHeading({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-heading\" className={cn('space-y-1', className)} {...props} />;\n}\n\nfunction CardToolbar({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-toolbar\" className={cn('flex items-center gap-2.5', className)} {...props} />;\n}\n\nfunction CardTitle({ className, ...props }: React.HTMLAttributes<HTMLHeadingElement>) {\n  return (\n    <h3\n      data-slot=\"card-title\"\n      className={cn('text-base font-semibold leading-none tracking-tight', className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div data-slot=\"card-description\" className={cn('text-sm text-muted-foreground', className)} {...props} />;\n}\n\n// Exports\nexport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardHeading, CardTable, CardTitle, CardToolbar };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/chart.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport * as RechartsPrimitive from 'recharts';\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: '', dark: '.dark' } as const;\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode;\n    icon?: React.ComponentType;\n  } & ({ color?: string; theme?: never } | { color?: never; theme: Record<keyof typeof THEMES, string> });\n};\n\ntype ChartContextProps = {\n  config: ChartConfig;\n};\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null);\n\nfunction useChart() {\n  const context = React.useContext(ChartContext);\n\n  if (!context) {\n    throw new Error('useChart must be used within a <ChartContainer />');\n  }\n\n  return context;\n}\n\nfunction ChartContainer({\n  id,\n  className,\n  children,\n  config,\n  ...props\n}: React.ComponentProps<'div'> & {\n  config: ChartConfig;\n  children: React.ComponentProps<typeof RechartsPrimitive.ResponsiveContainer>['children'];\n}) {\n  const uniqueId = React.useId();\n  const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`;\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-slot=\"chart\"\n        data-chart={chartId}\n        className={cn(\n          \"[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden\",\n          className,\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>{children}</RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  );\n}\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(([, config]) => config.theme || config.color);\n\n  if (!colorConfig.length) {\n    return null;\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color;\n    return color ? `  --color-${key}: ${color};` : null;\n  })\n  .join('\\n')}\n}\n`,\n          )\n          .join('\\n'),\n      }}\n    />\n  );\n};\n\nconst ChartTooltip = RechartsPrimitive.Tooltip;\n\nfunction ChartTooltipContent({\n  active,\n  payload,\n  className,\n  indicator = 'dot',\n  hideLabel = false,\n  hideIndicator = false,\n  label,\n  labelFormatter,\n  labelClassName,\n  formatter,\n  color,\n  nameKey,\n  labelKey,\n}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n  React.ComponentProps<'div'> & {\n    hideLabel?: boolean;\n    hideIndicator?: boolean;\n    indicator?: 'line' | 'dot' | 'dashed';\n    nameKey?: string;\n    labelKey?: string;\n  }) {\n  const { config } = useChart();\n\n  const tooltipLabel = React.useMemo(() => {\n    if (hideLabel || !payload?.length) {\n      return null;\n    }\n\n    const [item] = payload;\n    const key = `${labelKey || item?.dataKey || item?.name || 'value'}`;\n    const itemConfig = getPayloadConfigFromPayload(config, item, key);\n    const value =\n      !labelKey && typeof label === 'string' ? config[label as keyof typeof config]?.label || label : itemConfig?.label;\n\n    if (labelFormatter) {\n      return <div className={cn('font-medium', labelClassName)}>{labelFormatter(value, payload)}</div>;\n    }\n\n    if (!value) {\n      return null;\n    }\n\n    return <div className={cn('font-medium', labelClassName)}>{value}</div>;\n  }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey]);\n\n  if (!active || !payload?.length) {\n    return null;\n  }\n\n  const nestLabel = payload.length === 1 && indicator !== 'dot';\n\n  return (\n    <div\n      className={cn(\n        'border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl',\n        className,\n      )}\n    >\n      {!nestLabel ? tooltipLabel : null}\n      <div className=\"grid gap-1.5\">\n        {payload.map((item, index) => {\n          const key = `${nameKey || item.name || item.dataKey || 'value'}`;\n          const itemConfig = getPayloadConfigFromPayload(config, item, key);\n          const indicatorColor = color || item.payload.fill || item.color;\n\n          return (\n            <div\n              key={item.dataKey}\n              className={cn(\n                '[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5',\n                indicator === 'dot' && 'items-center',\n              )}\n            >\n              {formatter && item?.value !== undefined && item.name ? (\n                formatter(item.value, item.name, item, index, item.payload)\n              ) : (\n                <>\n                  {itemConfig?.icon ? (\n                    <itemConfig.icon />\n                  ) : (\n                    !hideIndicator && (\n                      <div\n                        className={cn('shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)', {\n                          'h-2.5 w-2.5': indicator === 'dot',\n                          'w-1': indicator === 'line',\n                          'w-0 border-[1.5px] border-dashed bg-transparent': indicator === 'dashed',\n                          'my-0.5': nestLabel && indicator === 'dashed',\n                        })}\n                        style={\n                          {\n                            '--color-bg': indicatorColor,\n                            '--color-border': indicatorColor,\n                          } as React.CSSProperties\n                        }\n                      />\n                    )\n                  )}\n                  <div\n                    className={cn('flex flex-1 justify-between leading-none', nestLabel ? 'items-end' : 'items-center')}\n                  >\n                    <div className=\"grid gap-1.5\">\n                      {nestLabel ? tooltipLabel : null}\n                      <span className=\"text-muted-foreground\">{itemConfig?.label || item.name}</span>\n                    </div>\n                    {item.value && (\n                      <span className=\"text-foreground font-mono font-medium tabular-nums\">\n                        {item.value.toLocaleString()}\n                      </span>\n                    )}\n                  </div>\n                </>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nconst ChartLegend = RechartsPrimitive.Legend;\n\nfunction ChartLegendContent({\n  className,\n  hideIcon = false,\n  payload,\n  verticalAlign = 'bottom',\n  nameKey,\n}: React.ComponentProps<'div'> &\n  Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {\n    hideIcon?: boolean;\n    nameKey?: string;\n  }) {\n  const { config } = useChart();\n\n  if (!payload?.length) {\n    return null;\n  }\n\n  return (\n    <div className={cn('flex items-center justify-center gap-4', verticalAlign === 'top' ? 'pb-3' : 'pt-3', className)}>\n      {payload.map((item) => {\n        const key = `${nameKey || item.dataKey || 'value'}`;\n        const itemConfig = getPayloadConfigFromPayload(config, item, key);\n\n        return (\n          <div\n            key={item.value}\n            className={cn('[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3')}\n          >\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                style={{\n                  backgroundColor: item.color,\n                }}\n              />\n            )}\n            {itemConfig?.label}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(config: ChartConfig, payload: unknown, key: string) {\n  if (typeof payload !== 'object' || payload === null) {\n    return undefined;\n  }\n\n  const payloadPayload =\n    'payload' in payload && typeof payload.payload === 'object' && payload.payload !== null\n      ? payload.payload\n      : undefined;\n\n  let configLabelKey: string = key;\n\n  if (key in payload && typeof payload[key as keyof typeof payload] === 'string') {\n    configLabelKey = payload[key as keyof typeof payload] as string;\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'\n  ) {\n    configLabelKey = payloadPayload[key as keyof typeof payloadPayload] as string;\n  }\n\n  return configLabelKey in config ? config[configLabelKey] : config[key as keyof typeof config];\n}\n\nexport { ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent, ChartStyle };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
