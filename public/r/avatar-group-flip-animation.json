{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "avatar-group-flip-animation",
  "type": "registry:component",
  "dependencies": ["clsx", "tailwind-merge", "class-variance-authority", "radix-ui", "motion"],
  "registryDependencies": ["https://reui.io/r/avatar.json", "https://reui.io/r/avatar-group.json"],
  "files": [
    {
      "path": "registry/default/components/avatar-group/flip-animation.tsx",
      "content": "import { Avatar, AvatarFallback, AvatarImage } from '@/registry/default/ui/avatar';\nimport { AvatarGroup, AvatarGroupItem, AvatarGroupTooltip } from '@/registry/default/ui/avatar-group';\n\nexport default function Component() {\n  const AVATARS = [\n    {\n      src: 'https://randomuser.me/api/portraits/men/77.jpg',\n      fallback: 'A',\n      name: 'Nick Stone',\n      role: 'CEO, Loop Inc.',\n    },\n    {\n      src: 'https://randomuser.me/api/portraits/women/53.jpg',\n      fallback: 'JS',\n      name: 'Jessica Smith',\n      role: 'CTO, Kite Inc.',\n    },\n    {\n      src: 'https://randomuser.me/api/portraits/men/0.jpg',\n      fallback: 'MJ',\n      name: 'Michael Johnson',\n      role: 'Developer, Sito Inc.',\n    },\n    {\n      src: 'https://randomuser.me/api/portraits/women/24.jpg',\n      fallback: 'SW',\n      name: 'Samantha Williams',\n      role: 'Manager, TPO Inc.',\n    },\n  ];\n\n  return (\n    <AvatarGroup tooltipClassName=\"\" animation=\"flip\">\n      {AVATARS.map((avatar, index) => (\n        <AvatarGroupItem key={index}>\n          <Avatar className=\"size-12 rounded-full overflow-hidden border-4 border-background\">\n            <AvatarImage src={avatar.src} />\n            <AvatarFallback>{avatar.fallback}</AvatarFallback>\n          </Avatar>\n          <AvatarGroupTooltip className=\"flex flex-col gap-0.5 text-center\">\n            <span className=\"text-sm font-semibold\">{avatar.name}</span>\n            <span className=\"text-xs font-normal\">{avatar.role}</span>\n          </AvatarGroupTooltip>\n        </AvatarGroupItem>\n      ))}\n    </AvatarGroup>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/ui/avatar.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { cva, VariantProps } from 'class-variance-authority';\nimport { Avatar as AvatarPrimitive } from 'radix-ui';\n\nconst avatarStatusVariants = cva('flex items-center rounded-full size-2 border-2 border-background', {\n  variants: {\n    variant: {\n      online: 'bg-green-600',\n      offline: 'bg-zinc-600 dark:bg-zinc-300',\n      busy: 'bg-yellow-600',\n      away: 'bg-blue-600',\n    },\n  },\n  defaultVariants: {\n    variant: 'online',\n  },\n});\n\nfunction Avatar({ className, ...props }: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root data-slot=\"avatar\" className={cn('relative flex shrink-0 size-10', className)} {...props} />\n  );\n}\n\nfunction AvatarImage({ className, ...props }: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <div className={cn('relative overflow-hidden rounded-full', className)}>\n      <AvatarPrimitive.Image data-slot=\"avatar-image\" className={cn('aspect-square h-full w-full')} {...props} />\n    </div>\n  );\n}\n\nfunction AvatarFallback({ className, ...props }: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        'flex h-full w-full items-center justify-center rounded-full border border-border bg-accent text-accent-foreground text-xs',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction AvatarIndicator({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      data-slot=\"avatar-indicator\"\n      className={cn('absolute flex size-6 items-center justify-center', className)}\n      {...props}\n    />\n  );\n}\n\nfunction AvatarStatus({\n  className,\n  variant,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof avatarStatusVariants>) {\n  return <div data-slot=\"avatar-status\" className={cn(avatarStatusVariants({ variant }), className)} {...props} />;\n}\n\nexport { Avatar, AvatarFallback, AvatarImage, AvatarIndicator, AvatarStatus, avatarStatusVariants };\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/ui/avatar-group.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { AnimatePresence, Easing, motion, useMotionValue, useSpring, useTransform } from 'motion/react';\nimport { cn } from '@/lib/utils';\n\ntype AnimationVariantType = 'spring' | 'tween' | 'inertia' | 'decay' | 'keyframes';\ntype AnimationType = 'default' | 'flip' | 'reveal';\n\ninterface AvatarGroupContextValue {\n  tooltipClassName?: string;\n  animation?: 'default' | 'flip' | 'reveal';\n}\n\nconst AvatarGroupContext = React.createContext<AvatarGroupContextValue | null>(null);\n\ninterface AvatarGroupProps {\n  children: React.ReactNode;\n  className?: string;\n  tooltipClassName?: string;\n  animation?: AnimationType;\n}\n\ninterface AvatarGroupItemProps {\n  children: React.ReactNode;\n  className?: string;\n  tooltipClassName?: string;\n  animation?: AnimationType;\n}\n\ninterface AvatarGroupTooltipProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst StaggeredContent = ({ content }: { content: React.ReactNode }) => {\n  const children = React.Children.toArray(content);\n  return (\n    <motion.div\n      initial=\"initial\"\n      animate=\"animate\"\n      exit=\"exit\"\n      variants={{\n        animate: { transition: { staggerChildren: 0.08 } },\n      }}\n    >\n      {children.map((child, i) => (\n        <motion.div\n          key={i}\n          variants={{\n            initial: { opacity: 0, y: 20 },\n            animate: { opacity: 1, y: 0, transition: { duration: 0.3, ease: 'easeOut' } },\n            exit: { opacity: 0, y: -20, transition: { duration: 0.2, ease: 'easeIn' } },\n          }}\n        >\n          {child}\n        </motion.div>\n      ))}\n    </motion.div>\n  );\n};\n\nexport function AvatarGroup({ children, className, tooltipClassName, animation = 'default' }: AvatarGroupProps) {\n  const contextValue: AvatarGroupContextValue = {\n    tooltipClassName,\n    animation,\n  };\n\n  return (\n    <AvatarGroupContext.Provider value={contextValue}>\n      <div className={cn('flex -space-x-2.5', className)}>{children}</div>\n    </AvatarGroupContext.Provider>\n  );\n}\n\nexport function AvatarGroupItem({\n  children,\n  className,\n  tooltipClassName,\n  animation: itemAnimation,\n}: AvatarGroupItemProps) {\n  const context = React.useContext(AvatarGroupContext);\n  const [hoveredIndex, setHoveredIndex] = React.useState<boolean>(false);\n  const springConfig = { stiffness: 100, damping: 5 };\n  const x = useMotionValue(0);\n\n  const animation = itemAnimation || context?.animation || 'default';\n  const finalTooltipClassName = tooltipClassName || context?.tooltipClassName;\n\n  // rotate the tooltip\n  const rotate = useSpring(useTransform(x, [-100, 100], [-45, 45]), springConfig);\n  // translate the tooltip\n  const translateX = useSpring(useTransform(x, [-100, 100], [-50, 50]), springConfig);\n\n  // Extract tooltip from children\n  const tooltipChild = React.Children.toArray(children).find(\n    (child) => React.isValidElement(child) && child.type === AvatarGroupTooltip,\n  );\n\n  const otherChildren = React.Children.toArray(children).filter(\n    (child) => !(React.isValidElement(child) && child.type === AvatarGroupTooltip),\n  );\n\n  const tooltipContent =\n    tooltipChild && React.isValidElement(tooltipChild)\n      ? (tooltipChild.props as AvatarGroupTooltipProps).children\n      : null;\n\n  const handleMouseMove = (event: React.MouseEvent) => {\n    const halfWidth = (event.target as HTMLElement).offsetWidth / 2;\n    x.set((event.nativeEvent as MouseEvent).offsetX - halfWidth);\n  };\n\n  const animationVariants = {\n    default: {\n      initial: { opacity: 0, y: 20, scale: 0.6 },\n      animate: {\n        opacity: 1,\n        y: 0,\n        scale: 1,\n        transition: {\n          type: 'spring' as AnimationVariantType,\n          stiffness: 260,\n          damping: 10,\n        },\n      },\n      exit: {\n        opacity: 0,\n        y: 20,\n        scale: 0.6,\n        transition: {\n          duration: 0.2,\n          ease: 'easeInOut' as Easing,\n        },\n      },\n    },\n    flip: {\n      initial: { opacity: 0, rotateX: -90 },\n      animate: {\n        opacity: 1,\n        rotateX: 0,\n        transition: {\n          type: 'spring' as AnimationVariantType,\n          stiffness: 180,\n          damping: 25,\n        },\n      },\n      exit: {\n        opacity: 0,\n        rotateX: -90,\n        transition: {\n          duration: 0.3,\n          ease: 'easeInOut' as Easing,\n        },\n      },\n    },\n    reveal: {\n      initial: { opacity: 0, scale: 0.95 },\n      animate: { opacity: 1, scale: 1, transition: { duration: 0.15, ease: 'easeOut' as Easing } },\n      exit: { opacity: 0, scale: 0.95, transition: { duration: 0.1, ease: 'easeIn' as Easing } },\n    },\n  };\n\n  const selectedVariant = animationVariants[animation];\n\n  return (\n    <div\n      className={cn('group relative', className)}\n      onMouseEnter={() => setHoveredIndex(true)}\n      onMouseLeave={() => setHoveredIndex(false)}\n    >\n      <AnimatePresence mode=\"wait\">\n        {hoveredIndex && tooltipContent && (\n          <motion.div\n            initial={selectedVariant.initial}\n            animate={selectedVariant.animate}\n            exit={selectedVariant.exit}\n            style={{\n              translateX: animation === 'reveal' ? 0 : translateX,\n              rotate: animation === 'reveal' ? 0 : rotate,\n              whiteSpace: 'nowrap',\n              transformOrigin: 'center',\n            }}\n            className={cn(\n              'absolute -top-16 left-1/2 z-50 flex -translate-x-1/2 flex-col items-center justify-center rounded-md bg-black px-4 py-2 text-xs font-medium text-white shadow-xl',\n              finalTooltipClassName,\n            )}\n          >\n            <motion.div\n              className=\"absolute inset-x-10 -bottom-px z-30 h-px w-[20%] bg-gradient-to-r from-transparent via-emerald-500 dark:via-emerald-900 to-transparent\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              transition={{ duration: 0.15 }}\n            />\n            <motion.div\n              className=\"absolute -bottom-px left-10 z-30 h-px w-[40%] bg-gradient-to-r from-transparent via-sky-500 dark:via-sky-900 to-transparent\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              transition={{ duration: 0.15 }}\n            />\n            {animation === 'reveal' ? <StaggeredContent content={tooltipContent} /> : tooltipContent}\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      <motion.div\n        className=\"relative cursor-pointer\"\n        whileHover={{\n          zIndex: 30,\n        }}\n        whileTap={{ scale: 0.95 }}\n        transition={{\n          duration: 0.5,\n        }}\n        onMouseMove={handleMouseMove}\n      >\n        {otherChildren}\n      </motion.div>\n    </div>\n  );\n}\n\nexport function AvatarGroupTooltip({ children, className }: AvatarGroupTooltipProps) {\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20, scale: 0.6 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n      transition={{ duration: 0.15 }}\n      className={cn('hidden relative z-30', className)}\n    >\n      {children}\n    </motion.div>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
