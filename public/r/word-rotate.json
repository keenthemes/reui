{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "word-rotate",
  "type": "registry:ui",
  "dependencies": ["motion"],
  "files": [
    {
      "path": "registry/default/ui/word-rotate.tsx",
      "content": "'use client';\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { motion, MotionProps, useInView, UseInViewOptions, Variants } from 'motion/react';\nimport { cn } from '@/lib/utils';\n\ninterface WordRotateProps extends Omit<MotionProps, 'children'> {\n  words: string[];\n  duration?: number; // ms each word is visible\n  animationStyle?: 'fade' | 'slide-up' | 'slide-down' | 'scale' | 'flip';\n  loop?: boolean;\n  pauseDuration?: number; // ms between word transitions\n  className?: string;\n  containerClassName?: string;\n  startOnView?: boolean;\n  once?: boolean;\n  inViewMargin?: UseInViewOptions['margin'];\n}\n\nexport function WordRotate({\n  words,\n  duration = 1500,\n  animationStyle = 'fade',\n  loop = true,\n  className,\n  containerClassName,\n  pauseDuration = 300,\n  startOnView = true,\n  once = false,\n  inViewMargin,\n  ...props\n}: WordRotateProps) {\n  const ref = useRef<HTMLSpanElement>(null);\n  const isInView = useInView(ref, { once, margin: inViewMargin as UseInViewOptions['margin'] });\n  const [hasAnimated, setHasAnimated] = useState(false);\n  const [currentWord, setCurrentWord] = useState(0);\n  const [show, setShow] = useState(true);\n\n  // Animation variants\n  const variants: Record<string, Variants> = {\n    fade: {\n      initial: { opacity: 0 },\n      animate: {\n        opacity: 1,\n        transition: {\n          duration: 0.4,\n          ease: [0.4, 0.0, 0.2, 1], // Custom cubic-bezier for smooth fade\n        },\n      },\n      exit: {\n        opacity: 0,\n        transition: {\n          duration: 0.3,\n          ease: [0.4, 0.0, 1, 1], // Faster exit\n        },\n      },\n    },\n    'slide-up': {\n      initial: { opacity: 0, y: 24 },\n      animate: {\n        opacity: 1,\n        y: 0,\n        transition: {\n          type: 'spring',\n          stiffness: 300,\n          damping: 25,\n          mass: 0.8,\n        },\n      },\n      exit: {\n        opacity: 0,\n        y: -24,\n        transition: {\n          duration: 0.25,\n          ease: [0.4, 0.0, 1, 1],\n        },\n      },\n    },\n    'slide-down': {\n      initial: { opacity: 0, y: -24 },\n      animate: {\n        opacity: 1,\n        y: 0,\n        transition: {\n          type: 'spring',\n          stiffness: 300,\n          damping: 25,\n          mass: 0.8,\n        },\n      },\n      exit: {\n        opacity: 0,\n        y: 24,\n        transition: {\n          duration: 0.25,\n          ease: [0.4, 0.0, 1, 1],\n        },\n      },\n    },\n    scale: {\n      initial: { opacity: 0, scale: 0.8 },\n      animate: {\n        opacity: 1,\n        scale: 1,\n        transition: {\n          type: 'spring',\n          stiffness: 400,\n          damping: 30,\n          mass: 0.6,\n        },\n      },\n      exit: {\n        opacity: 0,\n        scale: 0.9,\n        transition: {\n          duration: 0.2,\n          ease: [0.4, 0.0, 1, 1],\n        },\n      },\n    },\n    flip: {\n      initial: { opacity: 0, rotateX: 90 },\n      animate: {\n        opacity: 1,\n        rotateX: 0,\n        transition: {\n          type: 'spring',\n          stiffness: 200,\n          damping: 20,\n          mass: 1,\n        },\n      },\n      exit: {\n        opacity: 0,\n        rotateX: -90,\n        transition: {\n          duration: 0.3,\n          ease: [0.4, 0.0, 1, 1],\n        },\n      },\n    },\n  };\n\n  // Determine if we should start animation\n  const shouldStart = !startOnView || (isInView && (!once || !hasAnimated));\n\n  useEffect(() => {\n    if (!shouldStart) return;\n    setHasAnimated(true);\n    const interval = setInterval(() => {\n      setShow(false);\n      setTimeout(() => {\n        setCurrentWord((prev) => {\n          if (loop) {\n            return (prev + 1) % words.length;\n          } else {\n            return prev < words.length - 1 ? prev + 1 : prev;\n          }\n        });\n        setShow(true);\n      }, pauseDuration);\n    }, duration + pauseDuration);\n    return () => clearInterval(interval);\n  }, [shouldStart, duration, pauseDuration, words.length, loop]);\n\n  return (\n    <motion.span ref={ref} className={cn('inline-block overflow-hidden', containerClassName)} {...props}>\n      <motion.span\n        key={currentWord}\n        initial=\"initial\"\n        animate={show ? 'animate' : 'exit'}\n        exit=\"exit\"\n        variants={variants[animationStyle]}\n        transition={{ duration: 0.5 }}\n        style={{\n          perspective: animationStyle === 'flip' ? 1000 : undefined,\n        }}\n        className={cn('inline-block overflow-hidden', className)}\n      >\n        {words[currentWord]}\n      </motion.span>\n    </motion.span>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}
