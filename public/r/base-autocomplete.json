{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "base-autocomplete",
  "type": "registry:ui",
  "dependencies": ["@base-ui-components/react", "clsx", "tailwind-merge", "class-variance-authority", "lucide-react"],
  "files": [
    {
      "path": "registry/default/ui/base-autocomplete.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/registry/default/lib/utils';\nimport { Autocomplete as BaseUIAutocomplete } from '@base-ui-components/react/autocomplete';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { X } from 'lucide-react';\n\n// Define input size variants (without file: part)\nconst inputVariants = cva(\n  `\n    flex w-full bg-background border border-input shadow-xs shadow-black/5 transition-[color,box-shadow] text-foreground placeholder:text-muted-foreground/80 \n    focus-visible:ring-ring/30 focus-visible:border-ring focus-visible:outline-none focus-visible:ring-[3px]     \n    disabled:cursor-not-allowed disabled:opacity-60 \n    [&[readonly]]:bg-muted/80 [&[readonly]]:cursor-not-allowed\n    aria-invalid:border-destructive/60 aria-invalid:ring-destructive/10 dark:aria-invalid:border-destructive dark:aria-invalid:ring-destructive/20\n  `,\n  {\n    variants: {\n      variant: {\n        lg: 'h-10 px-4 text-sm rounded-md',\n        md: 'h-8.5 px-3 text-[0.8125rem] leading-(--text-sm--line-height) rounded-md',\n        sm: 'h-7 px-2.5 text-xs rounded-md',\n      },\n    },\n    defaultVariants: {\n      variant: 'md',\n    },\n  },\n);\n\n// Root - Groups all parts of the autocomplete\nfunction Autocomplete({ ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Root>) {\n  return <BaseUIAutocomplete.Root data-slot=\"autocomplete\" {...props} />;\n}\n\n// Value - Displays the selected value\nfunction AutocompleteValue({ ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Value>) {\n  return (\n    <BaseUIAutocomplete.Value\n      data-slot=\"autocomplete-value\"\n      {...props}\n    />\n  );\n}\n\n// Input and Clear controls\nfunction AutocompleteControl({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <span\n      data-slot=\"autocomplete-control\"\n      className={cn('relative', className)}\n      {...props}\n    />\n  );\n}\n\n// Trigger - A button that opens the autocomplete\nfunction AutocompleteTrigger({ ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Trigger>) {\n  return (\n    <BaseUIAutocomplete.Trigger\n      data-slot=\"autocomplete-trigger\"\n      {...props}\n    />\n  );\n}\n\n// Input - The input element for typing\nfunction AutocompleteInput({\n  className,\n  variant = 'md',\n  ...props\n}: React.ComponentProps<typeof BaseUIAutocomplete.Input> & VariantProps<typeof inputVariants>) {\n  return (\n    <BaseUIAutocomplete.Input\n      data-slot=\"autocomplete-input\"\n      className={cn(inputVariants({ variant }), className)}\n      {...props}\n    />\n  );\n}\n\n// Icon - An icon element for the autocomplete\nfunction AutocompleteIcon({ className, ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Icon>) {\n  return (\n    <BaseUIAutocomplete.Icon\n      data-slot=\"autocomplete-icon\"\n      className={cn('h-4 w-4 opacity-50', className)}\n      {...props}\n    />\n  );\n}\n\n\n// Status - Displays the status of the autocomplete\nfunction AutocompleteStatus({ className, ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Status>) {\n  return (\n    <BaseUIAutocomplete.Status\n      data-slot=\"autocomplete-status\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  );\n}\n\n// Portal - A portal element that moves the popup to a different part of the DOM\nfunction AutocompletePortal({ ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Portal>) {\n  return <BaseUIAutocomplete.Portal data-slot=\"autocomplete-portal\" {...props} />;\n}\n\n// Backdrop - An overlay displayed beneath the autocomplete popup\nfunction AutocompleteBackdrop({ ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Backdrop>) {\n  return <BaseUIAutocomplete.Backdrop data-slot=\"autocomplete-backdrop\" {...props} />;\n}\n\n// Positioner - Positions the autocomplete popup against the input\nfunction AutocompletePositioner({ className, ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Positioner>) {\n  return (\n    <BaseUIAutocomplete.Positioner\n      data-slot=\"autocomplete-positioner\"\n      className={cn('outline-none', className)}\n      {...props}\n    />\n  );\n}\n\n// Popup - A container for the autocomplete options\nfunction AutocompletePopup({ className, ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Popup>) {\n  return (\n    <BaseUIAutocomplete.Popup\n      data-slot=\"autocomplete-popup\"\n      className={cn(\n\t\t\t\t'w-[var(--anchor-width)] max-h-[min(var(--available-height),23rem)] max-w-[var(--available-width)]',\n\t\t\t\t'overflow-y-auto scroll-pt-2 scroll-pb-2 overscroll-contain bg-[canvas]',\n        'rounded-md border border-border bg-popover p-2 text-popover-foreground shadow-md shadow-black/5',\n        'origin-[var(--transform-origin)] transition-[transform,scale,opacity] data-[ending-style]:scale-90 data-[ending-style]:opacity-0 data-[starting-style]:scale-90 data-[starting-style]:opacity-0',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\n// List - A container for the autocomplete options\nfunction AutocompleteList({ className, ...props }: React.ComponentProps<typeof BaseUIAutocomplete.List>) {\n  return (\n    <BaseUIAutocomplete.List\n      data-slot=\"autocomplete-list\"\n      className={cn('space-y-0.5', className)}\n      {...props}\n    />\n  );\n}\n\n// Collection - A collection of autocomplete items\nfunction AutocompleteCollection({ ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Collection>) {\n  return <BaseUIAutocomplete.Collection data-slot=\"autocomplete-collection\" {...props} />;\n}\n\n// Row - A row container for autocomplete items\nfunction AutocompleteRow({ className, ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Row>) {\n  return (\n    <BaseUIAutocomplete.Row\n      data-slot=\"autocomplete-row\"\n      className={cn('flex items-center gap-2', className)}\n      {...props}\n    />\n  );\n}\n\n// Item - An individual selectable option in the autocomplete\nfunction AutocompleteItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof BaseUIAutocomplete.Item>) {\n  return (\n    <BaseUIAutocomplete.Item\n      data-slot=\"autocomplete-item\"\n      className={cn(\n        'text-foreground relative flex cursor-default select-none items-center gap-2 rounded-md px-2 py-1.5 text-sm outline-hidden transition-colors data-disabled:pointer-events-none data-disabled:opacity-50',\n        '[&_svg]:pointer-events-none [&_svg:not([role=img]):not([class*=text-])]:opacity-60 [&_svg:not([class*=size-])]:size-4 [&_svg]:shrink-0',\n        'data-[highlighted]:relative data-[highlighted]:z-0 data-[highlighted]:text-foreground',\n        'data-[highlighted]:before:absolute data-[highlighted]:before:inset-x-1 data-[highlighted]:before:inset-y-0 data-[highlighted]:before:z-[-1] data-[highlighted]:before:rounded-sm data-[highlighted]:before:bg-accent',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\n// Group - Groups related autocomplete items with the corresponding label\nfunction AutocompleteGroup({ ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Group>) {\n  return <BaseUIAutocomplete.Group data-slot=\"autocomplete-group\" {...props} />;\n}\n\n// GroupLabel - An accessible label that is automatically associated with its parent group\nfunction AutocompleteGroupLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof BaseUIAutocomplete.GroupLabel>) {\n  return (\n    <BaseUIAutocomplete.GroupLabel\n      data-slot=\"autocomplete-group-label\"\n      className={cn('px-2 py-1.5 text-xs text-muted-foreground font-medium', className)}\n      {...props}\n    />\n  );\n}\n\n// Empty - A component to display when no options are available\nfunction AutocompleteEmpty({ className, ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Empty>) {\n  return (\n    <BaseUIAutocomplete.Empty\n      data-slot=\"autocomplete-empty\"\n      className={cn('px-2 py-1.5 text-sm text-muted-foreground', className)}\n      {...props}\n    />\n  );\n}\n\n// Clear - A button to clear the input value\nfunction AutocompleteClear({ className, children, ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Clear>) {\n  return (\n    <BaseUIAutocomplete.Clear\n      data-slot=\"autocomplete-clear\"\n      className={cn(\n        'absolute cursor-pointer right-2 top-1/2 -translate-y-1/2 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none',\n        'data-[disabled]:pointer-events-none',\n        className,\n      )}\n      {...props}\n    >\n\t\t\t{children ? children : <X className=\"size-3.5\" />}\n\t\t</BaseUIAutocomplete.Clear>\n\t);\n}\n\n// Arrow - Displays an element positioned against the autocomplete anchor\nfunction AutocompleteArrow({ ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Arrow>) {\n  return <BaseUIAutocomplete.Arrow data-slot=\"autocomplete-arrow\" {...props} />;\n}\n\n// Separator - A separator element accessible to screen readers\nfunction AutocompleteSeparator({ className, ...props }: React.ComponentProps<typeof BaseUIAutocomplete.Separator>) {\n  return (\n    <BaseUIAutocomplete.Separator\n      data-slot=\"autocomplete-separator\"\n      className={cn('-mx-2 my-1.5 h-px bg-muted', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Autocomplete,\n  AutocompleteControl,\n  AutocompleteValue,\n  AutocompleteTrigger,\n  AutocompleteInput,\n  AutocompleteIcon,\n  AutocompleteStatus,\n  AutocompletePortal,\n  AutocompleteBackdrop,\n  AutocompletePositioner,\n  AutocompletePopup,\n  AutocompleteList,\n  AutocompleteCollection,\n  AutocompleteRow,\n  AutocompleteItem,\n  AutocompleteGroup,\n  AutocompleteGroupLabel,\n  AutocompleteEmpty,\n  AutocompleteClear,\n  AutocompleteArrow,\n  AutocompleteSeparator,\n};",
      "type": "registry:ui"
    },
    {
      "path": "registry/default/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n/**\n * Merges Tailwind class names, resolving any conflicts.\n *\n * @param inputs - An array of class names to merge.\n * @returns A string of merged and optimized class names.\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
