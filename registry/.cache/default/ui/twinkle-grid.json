{
  "twinkle-grid": {
    "code": "'use client';\n\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface TwinkleGridProps extends React.HTMLAttributes<HTMLDivElement> {\n  squareSize?: number;\n  gridGap?: number;\n  flickerChance?: number;\n  color?: string;\n  width?: number;\n  height?: number;\n  className?: string;\n  maxOpacity?: number;\n}\n\nexport const TwinkleGrid: React.FC<TwinkleGridProps> = ({\n  squareSize = 4,\n  gridGap = 6,\n  flickerChance = 0.3,\n  color = 'rgb(0, 0, 0)',\n  width,\n  height,\n  className,\n  maxOpacity = 0.3,\n  ...props\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isInView, setIsInView] = useState(false);\n  const [canvasSize, setCanvasSize] = useState({ width: 0, height: 0 });\n\n  // Convert color to RGBA\n  const memoizedColor = useMemo(() => {\n    const toRGBA = (color: string) => {\n      if (typeof window === 'undefined') {\n        return `rgba(0, 0, 0,`;\n      }\n      const canvas = document.createElement('canvas');\n      canvas.width = canvas.height = 1;\n      const ctx = canvas.getContext('2d');\n      if (!ctx) return 'rgba(255, 0, 0,';\n      ctx.fillStyle = color;\n      ctx.fillRect(0, 0, 1, 1);\n      const [r, g, b] = Array.from(ctx.getImageData(0, 0, 1, 1).data);\n      return `rgba(${r}, ${g}, ${b},`;\n    };\n    return toRGBA(color);\n  }, [color]);\n\n  const setupCanvas = useCallback(\n    (canvas: HTMLCanvasElement, width: number, height: number) => {\n      // Set canvas size with device pixel ratio\n      const dpr = window.devicePixelRatio || 1;\n      // Set canvas width and height\n      canvas.width = width * dpr;\n      canvas.height = height * dpr;\n      canvas.style.width = `${width}px`;\n      canvas.style.height = `${height}px`;\n      // Calculate grid dimensions\n      const cols = Math.floor(width / (squareSize + gridGap));\n      const rows = Math.floor(height / (squareSize + gridGap));\n      // Initialize squares opacity\n      const squares = new Float32Array(cols * rows);\n      for (let i = 0; i < squares.length; i++) {\n        squares[i] = Math.random() * maxOpacity;\n      }\n\n      return { cols, rows, squares, dpr };\n    },\n    [squareSize, gridGap, maxOpacity],\n  );\n\n  // Update squares opacity\n  const updateSquares = useCallback(\n    (squares: Float32Array, deltaTime: number) => {\n      // Update squares opacity\n      for (let i = 0; i < squares.length; i++) {\n        if (Math.random() < flickerChance * deltaTime) {\n          squares[i] = Math.random() * maxOpacity;\n        }\n      }\n    },\n    [flickerChance, maxOpacity],\n  );\n\n  // Draw grid\n  const drawGrid = useCallback(\n    (\n      ctx: CanvasRenderingContext2D,\n      width: number,\n      height: number,\n      cols: number,\n      rows: number,\n      squares: Float32Array,\n      dpr: number,\n    ) => {\n      ctx.clearRect(0, 0, width, height);\n      ctx.fillStyle = 'transparent';\n      ctx.fillRect(0, 0, width, height);\n\n      for (let i = 0; i < cols; i++) {\n        for (let j = 0; j < rows; j++) {\n          const opacity = squares[i * rows + j];\n          ctx.fillStyle = `${memoizedColor}${opacity})`;\n          ctx.fillRect(\n            i * (squareSize + gridGap) * dpr,\n            j * (squareSize + gridGap) * dpr,\n            squareSize * dpr,\n            squareSize * dpr,\n          );\n        }\n      }\n    },\n    [memoizedColor, squareSize, gridGap],\n  );\n\n  // Setup canvas and animation\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const container = containerRef.current;\n    if (!canvas || !container) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    let animationFrameId: number;\n    let gridParams: ReturnType<typeof setupCanvas>;\n\n    const updateCanvasSize = () => {\n      const newWidth = width || container.clientWidth;\n      const newHeight = height || container.clientHeight;\n      setCanvasSize({ width: newWidth, height: newHeight });\n      gridParams = setupCanvas(canvas, newWidth, newHeight);\n    };\n\n    updateCanvasSize();\n\n    let lastTime = 0;\n    const animate = (time: number) => {\n      if (!isInView) return;\n\n      const deltaTime = (time - lastTime) / 1000;\n      lastTime = time;\n\n      updateSquares(gridParams.squares, deltaTime);\n      drawGrid(ctx, canvas.width, canvas.height, gridParams.cols, gridParams.rows, gridParams.squares, gridParams.dpr);\n      animationFrameId = requestAnimationFrame(animate);\n    };\n\n    const resizeObserver = new ResizeObserver(() => {\n      updateCanvasSize();\n    });\n\n    resizeObserver.observe(container);\n\n    const intersectionObserver = new IntersectionObserver(\n      ([entry]) => {\n        setIsInView(entry.isIntersecting);\n      },\n      { threshold: 0 },\n    );\n\n    intersectionObserver.observe(canvas);\n\n    if (isInView) {\n      animationFrameId = requestAnimationFrame(animate);\n    }\n\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n      resizeObserver.disconnect();\n      intersectionObserver.disconnect();\n    };\n  }, [setupCanvas, updateSquares, drawGrid, width, height, isInView]);\n\n  return (\n    <div ref={containerRef} className={cn(`h-full w-full ${className}`)} {...props}>\n      <canvas\n        ref={canvasRef}\n        className=\"pointer-events-none\"\n        style={{\n          width: canvasSize.width,\n          height: canvasSize.height,\n        }}\n      />\n    </div>\n  );\n};",
    "highlightedCode": "<pre class=\"shiki github-dark-default\" style=\"background-color:#0d1117;color:#e6edf3\" tabindex=\"0\"><code data-line-numbers=\"\"><span class=\"line\"><span style=\"color:#A5D6FF\">'use client'</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">import</span><span style=\"color:#E6EDF3\"> React, { useCallback, useEffect, useMemo, useRef, useState } </span><span style=\"color:#FF7B72\">from</span><span style=\"color:#A5D6FF\"> 'react'</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">import</span><span style=\"color:#E6EDF3\"> { cn } </span><span style=\"color:#FF7B72\">from</span><span style=\"color:#A5D6FF\"> '@/lib/utils'</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">interface</span><span style=\"color:#FFA657\"> TwinkleGridProps</span><span style=\"color:#FF7B72\"> extends</span><span style=\"color:#FFA657\"> React</span><span style=\"color:#E6EDF3\">.</span><span style=\"color:#79C0FF\">HTMLAttributes</span><span style=\"color:#E6EDF3\">&#x3C;</span><span style=\"color:#FFA657\">HTMLDivElement</span><span style=\"color:#E6EDF3\">> {</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  squareSize</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  gridGap</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  flickerChance</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  color</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#79C0FF\"> string</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  width</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  height</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  className</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#79C0FF\"> string</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  maxOpacity</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">export</span><span style=\"color:#FF7B72\"> const</span><span style=\"color:#D2A8FF\"> TwinkleGrid</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#FFA657\"> React</span><span style=\"color:#E6EDF3\">.</span><span style=\"color:#FFA657\">FC</span><span style=\"color:#E6EDF3\">&#x3C;</span><span style=\"color:#FFA657\">TwinkleGridProps</span><span style=\"color:#E6EDF3\">> </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#E6EDF3\"> ({</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  squareSize </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#79C0FF\"> 4</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  gridGap </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#79C0FF\"> 6</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  flickerChance </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#79C0FF\"> 0.3</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  color </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#A5D6FF\"> 'rgb(0, 0, 0)'</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  width,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  height,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  className,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  maxOpacity </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#79C0FF\"> 0.3</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  ...</span><span style=\"color:#E6EDF3\">props</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">}) </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#79C0FF\"> canvasRef</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#D2A8FF\"> useRef</span><span style=\"color:#E6EDF3\">&#x3C;</span><span style=\"color:#FFA657\">HTMLCanvasElement</span><span style=\"color:#E6EDF3\">>(</span><span style=\"color:#79C0FF\">null</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#79C0FF\"> containerRef</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#D2A8FF\"> useRef</span><span style=\"color:#E6EDF3\">&#x3C;</span><span style=\"color:#FFA657\">HTMLDivElement</span><span style=\"color:#E6EDF3\">>(</span><span style=\"color:#79C0FF\">null</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#E6EDF3\"> [</span><span style=\"color:#79C0FF\">isInView</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#79C0FF\">setIsInView</span><span style=\"color:#E6EDF3\">] </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#D2A8FF\"> useState</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#79C0FF\">false</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#E6EDF3\"> [</span><span style=\"color:#79C0FF\">canvasSize</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#79C0FF\">setCanvasSize</span><span style=\"color:#E6EDF3\">] </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#D2A8FF\"> useState</span><span style=\"color:#E6EDF3\">({ width: </span><span style=\"color:#79C0FF\">0</span><span style=\"color:#E6EDF3\">, height: </span><span style=\"color:#79C0FF\">0</span><span style=\"color:#E6EDF3\"> });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8B949E\">  // Convert color to RGBA</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#79C0FF\"> memoizedColor</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#D2A8FF\"> useMemo</span><span style=\"color:#E6EDF3\">(() </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    const</span><span style=\"color:#D2A8FF\"> toRGBA</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> (</span><span style=\"color:#FFA657\">color</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#79C0FF\"> string</span><span style=\"color:#E6EDF3\">) </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      if</span><span style=\"color:#E6EDF3\"> (</span><span style=\"color:#FF7B72\">typeof</span><span style=\"color:#E6EDF3\"> window </span><span style=\"color:#FF7B72\">===</span><span style=\"color:#A5D6FF\"> 'undefined'</span><span style=\"color:#E6EDF3\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">        return</span><span style=\"color:#A5D6FF\"> `rgba(0, 0, 0,`</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      }</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      const</span><span style=\"color:#79C0FF\"> canvas</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> document.</span><span style=\"color:#D2A8FF\">createElement</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#A5D6FF\">'canvas'</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      canvas.width </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#E6EDF3\"> canvas.height </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#79C0FF\"> 1</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      const</span><span style=\"color:#79C0FF\"> ctx</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> canvas.</span><span style=\"color:#D2A8FF\">getContext</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#A5D6FF\">'2d'</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      if</span><span style=\"color:#E6EDF3\"> (</span><span style=\"color:#FF7B72\">!</span><span style=\"color:#E6EDF3\">ctx) </span><span style=\"color:#FF7B72\">return</span><span style=\"color:#A5D6FF\"> 'rgba(255, 0, 0,'</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      ctx.fillStyle </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#E6EDF3\"> color;</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      ctx.</span><span style=\"color:#D2A8FF\">fillRect</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#79C0FF\">0</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#79C0FF\">0</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#79C0FF\">1</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#79C0FF\">1</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      const</span><span style=\"color:#E6EDF3\"> [</span><span style=\"color:#79C0FF\">r</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#79C0FF\">g</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#79C0FF\">b</span><span style=\"color:#E6EDF3\">] </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#E6EDF3\"> Array.</span><span style=\"color:#D2A8FF\">from</span><span style=\"color:#E6EDF3\">(ctx.</span><span style=\"color:#D2A8FF\">getImageData</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#79C0FF\">0</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#79C0FF\">0</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#79C0FF\">1</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#79C0FF\">1</span><span style=\"color:#E6EDF3\">).data);</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      return</span><span style=\"color:#A5D6FF\"> `rgba(${</span><span style=\"color:#E6EDF3\">r</span><span style=\"color:#A5D6FF\">}, ${</span><span style=\"color:#E6EDF3\">g</span><span style=\"color:#A5D6FF\">}, ${</span><span style=\"color:#E6EDF3\">b</span><span style=\"color:#A5D6FF\">},`</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    };</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    return</span><span style=\"color:#D2A8FF\"> toRGBA</span><span style=\"color:#E6EDF3\">(color);</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  }, [color]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#79C0FF\"> setupCanvas</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#D2A8FF\"> useCallback</span><span style=\"color:#E6EDF3\">(</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    (</span><span style=\"color:#FFA657\">canvas</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#FFA657\"> HTMLCanvasElement</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#FFA657\">width</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#FFA657\">height</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">) </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#8B949E\">      // Set canvas size with device pixel ratio</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      const</span><span style=\"color:#79C0FF\"> dpr</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> window.devicePixelRatio </span><span style=\"color:#FF7B72\">||</span><span style=\"color:#79C0FF\"> 1</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#8B949E\">      // Set canvas width and height</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      canvas.width </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#E6EDF3\"> width </span><span style=\"color:#FF7B72\">*</span><span style=\"color:#E6EDF3\"> dpr;</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      canvas.height </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#E6EDF3\"> height </span><span style=\"color:#FF7B72\">*</span><span style=\"color:#E6EDF3\"> dpr;</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      canvas.style.width </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#A5D6FF\"> `${</span><span style=\"color:#E6EDF3\">width</span><span style=\"color:#A5D6FF\">}px`</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      canvas.style.height </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#A5D6FF\"> `${</span><span style=\"color:#E6EDF3\">height</span><span style=\"color:#A5D6FF\">}px`</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#8B949E\">      // Calculate grid dimensions</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      const</span><span style=\"color:#79C0FF\"> cols</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> Math.</span><span style=\"color:#D2A8FF\">floor</span><span style=\"color:#E6EDF3\">(width </span><span style=\"color:#FF7B72\">/</span><span style=\"color:#E6EDF3\"> (squareSize </span><span style=\"color:#FF7B72\">+</span><span style=\"color:#E6EDF3\"> gridGap));</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      const</span><span style=\"color:#79C0FF\"> rows</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> Math.</span><span style=\"color:#D2A8FF\">floor</span><span style=\"color:#E6EDF3\">(height </span><span style=\"color:#FF7B72\">/</span><span style=\"color:#E6EDF3\"> (squareSize </span><span style=\"color:#FF7B72\">+</span><span style=\"color:#E6EDF3\"> gridGap));</span></span>\n<span class=\"line\"><span style=\"color:#8B949E\">      // Initialize squares opacity</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      const</span><span style=\"color:#79C0FF\"> squares</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#FF7B72\"> new</span><span style=\"color:#D2A8FF\"> Float32Array</span><span style=\"color:#E6EDF3\">(cols </span><span style=\"color:#FF7B72\">*</span><span style=\"color:#E6EDF3\"> rows);</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      for</span><span style=\"color:#E6EDF3\"> (</span><span style=\"color:#FF7B72\">let</span><span style=\"color:#E6EDF3\"> i </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#79C0FF\"> 0</span><span style=\"color:#E6EDF3\">; i </span><span style=\"color:#FF7B72\">&#x3C;</span><span style=\"color:#E6EDF3\"> squares.</span><span style=\"color:#79C0FF\">length</span><span style=\"color:#E6EDF3\">; i</span><span style=\"color:#FF7B72\">++</span><span style=\"color:#E6EDF3\">) {</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">        squares[i] </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#E6EDF3\"> Math.</span><span style=\"color:#D2A8FF\">random</span><span style=\"color:#E6EDF3\">() </span><span style=\"color:#FF7B72\">*</span><span style=\"color:#E6EDF3\"> maxOpacity;</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      return</span><span style=\"color:#E6EDF3\"> { cols, rows, squares, dpr };</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    },</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    [squareSize, gridGap, maxOpacity],</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  );</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8B949E\">  // Update squares opacity</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#79C0FF\"> updateSquares</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#D2A8FF\"> useCallback</span><span style=\"color:#E6EDF3\">(</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    (</span><span style=\"color:#FFA657\">squares</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#FFA657\"> Float32Array</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#FFA657\">deltaTime</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">) </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#8B949E\">      // Update squares opacity</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      for</span><span style=\"color:#E6EDF3\"> (</span><span style=\"color:#FF7B72\">let</span><span style=\"color:#E6EDF3\"> i </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#79C0FF\"> 0</span><span style=\"color:#E6EDF3\">; i </span><span style=\"color:#FF7B72\">&#x3C;</span><span style=\"color:#E6EDF3\"> squares.</span><span style=\"color:#79C0FF\">length</span><span style=\"color:#E6EDF3\">; i</span><span style=\"color:#FF7B72\">++</span><span style=\"color:#E6EDF3\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">        if</span><span style=\"color:#E6EDF3\"> (Math.</span><span style=\"color:#D2A8FF\">random</span><span style=\"color:#E6EDF3\">() </span><span style=\"color:#FF7B72\">&#x3C;</span><span style=\"color:#E6EDF3\"> flickerChance </span><span style=\"color:#FF7B72\">*</span><span style=\"color:#E6EDF3\"> deltaTime) {</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">          squares[i] </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#E6EDF3\"> Math.</span><span style=\"color:#D2A8FF\">random</span><span style=\"color:#E6EDF3\">() </span><span style=\"color:#FF7B72\">*</span><span style=\"color:#E6EDF3\"> maxOpacity;</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">        }</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      }</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    },</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    [flickerChance, maxOpacity],</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  );</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8B949E\">  // Draw grid</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#79C0FF\"> drawGrid</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#D2A8FF\"> useCallback</span><span style=\"color:#E6EDF3\">(</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    (</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      ctx: CanvasRenderingContext2D,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      width: number,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      height: number,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      cols: number,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      rows: number,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      squares: Float32Array,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      dpr: number,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    ) </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      ctx.</span><span style=\"color:#D2A8FF\">clearRect</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#79C0FF\">0</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#79C0FF\">0</span><span style=\"color:#E6EDF3\">, width, height);</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      ctx.fillStyle </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#A5D6FF\"> 'transparent'</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      ctx.</span><span style=\"color:#D2A8FF\">fillRect</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#79C0FF\">0</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#79C0FF\">0</span><span style=\"color:#E6EDF3\">, width, height);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      for</span><span style=\"color:#E6EDF3\"> (</span><span style=\"color:#FF7B72\">let</span><span style=\"color:#E6EDF3\"> i </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#79C0FF\"> 0</span><span style=\"color:#E6EDF3\">; i </span><span style=\"color:#FF7B72\">&#x3C;</span><span style=\"color:#E6EDF3\"> cols; i</span><span style=\"color:#FF7B72\">++</span><span style=\"color:#E6EDF3\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">        for</span><span style=\"color:#E6EDF3\"> (</span><span style=\"color:#FF7B72\">let</span><span style=\"color:#E6EDF3\"> j </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#79C0FF\"> 0</span><span style=\"color:#E6EDF3\">; j </span><span style=\"color:#FF7B72\">&#x3C;</span><span style=\"color:#E6EDF3\"> rows; j</span><span style=\"color:#FF7B72\">++</span><span style=\"color:#E6EDF3\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">          const</span><span style=\"color:#79C0FF\"> opacity</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> squares[i </span><span style=\"color:#FF7B72\">*</span><span style=\"color:#E6EDF3\"> rows </span><span style=\"color:#FF7B72\">+</span><span style=\"color:#E6EDF3\"> j];</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">          ctx.fillStyle </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#A5D6FF\"> `${</span><span style=\"color:#E6EDF3\">memoizedColor</span><span style=\"color:#A5D6FF\">}${</span><span style=\"color:#E6EDF3\">opacity</span><span style=\"color:#A5D6FF\">})`</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">          ctx.</span><span style=\"color:#D2A8FF\">fillRect</span><span style=\"color:#E6EDF3\">(</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">            i </span><span style=\"color:#FF7B72\">*</span><span style=\"color:#E6EDF3\"> (squareSize </span><span style=\"color:#FF7B72\">+</span><span style=\"color:#E6EDF3\"> gridGap) </span><span style=\"color:#FF7B72\">*</span><span style=\"color:#E6EDF3\"> dpr,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">            j </span><span style=\"color:#FF7B72\">*</span><span style=\"color:#E6EDF3\"> (squareSize </span><span style=\"color:#FF7B72\">+</span><span style=\"color:#E6EDF3\"> gridGap) </span><span style=\"color:#FF7B72\">*</span><span style=\"color:#E6EDF3\"> dpr,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">            squareSize </span><span style=\"color:#FF7B72\">*</span><span style=\"color:#E6EDF3\"> dpr,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">            squareSize </span><span style=\"color:#FF7B72\">*</span><span style=\"color:#E6EDF3\"> dpr,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">          );</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">        }</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      }</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    },</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    [memoizedColor, squareSize, gridGap],</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  );</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8B949E\">  // Setup canvas and animation</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">  useEffect</span><span style=\"color:#E6EDF3\">(() </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    const</span><span style=\"color:#79C0FF\"> canvas</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> canvasRef.current;</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    const</span><span style=\"color:#79C0FF\"> container</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> containerRef.current;</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    if</span><span style=\"color:#E6EDF3\"> (</span><span style=\"color:#FF7B72\">!</span><span style=\"color:#E6EDF3\">canvas </span><span style=\"color:#FF7B72\">||</span><span style=\"color:#FF7B72\"> !</span><span style=\"color:#E6EDF3\">container) </span><span style=\"color:#FF7B72\">return</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    const</span><span style=\"color:#79C0FF\"> ctx</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> canvas.</span><span style=\"color:#D2A8FF\">getContext</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#A5D6FF\">'2d'</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    if</span><span style=\"color:#E6EDF3\"> (</span><span style=\"color:#FF7B72\">!</span><span style=\"color:#E6EDF3\">ctx) </span><span style=\"color:#FF7B72\">return</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    let</span><span style=\"color:#E6EDF3\"> animationFrameId</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    let</span><span style=\"color:#E6EDF3\"> gridParams</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#FFA657\"> ReturnType</span><span style=\"color:#E6EDF3\">&#x3C;</span><span style=\"color:#FF7B72\">typeof</span><span style=\"color:#E6EDF3\"> setupCanvas>;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    const</span><span style=\"color:#D2A8FF\"> updateCanvasSize</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> () </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      const</span><span style=\"color:#79C0FF\"> newWidth</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> width </span><span style=\"color:#FF7B72\">||</span><span style=\"color:#E6EDF3\"> container.clientWidth;</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      const</span><span style=\"color:#79C0FF\"> newHeight</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> height </span><span style=\"color:#FF7B72\">||</span><span style=\"color:#E6EDF3\"> container.clientHeight;</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">      setCanvasSize</span><span style=\"color:#E6EDF3\">({ width: newWidth, height: newHeight });</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      gridParams </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#D2A8FF\"> setupCanvas</span><span style=\"color:#E6EDF3\">(canvas, newWidth, newHeight);</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">    updateCanvasSize</span><span style=\"color:#E6EDF3\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    let</span><span style=\"color:#E6EDF3\"> lastTime </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#79C0FF\"> 0</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    const</span><span style=\"color:#D2A8FF\"> animate</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> (</span><span style=\"color:#FFA657\">time</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">) </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      if</span><span style=\"color:#E6EDF3\"> (</span><span style=\"color:#FF7B72\">!</span><span style=\"color:#E6EDF3\">isInView) </span><span style=\"color:#FF7B72\">return</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      const</span><span style=\"color:#79C0FF\"> deltaTime</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> (time </span><span style=\"color:#FF7B72\">-</span><span style=\"color:#E6EDF3\"> lastTime) </span><span style=\"color:#FF7B72\">/</span><span style=\"color:#79C0FF\"> 1000</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      lastTime </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#E6EDF3\"> time;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">      updateSquares</span><span style=\"color:#E6EDF3\">(gridParams.squares, deltaTime);</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">      drawGrid</span><span style=\"color:#E6EDF3\">(ctx, canvas.width, canvas.height, gridParams.cols, gridParams.rows, gridParams.squares, gridParams.dpr);</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      animationFrameId </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#D2A8FF\"> requestAnimationFrame</span><span style=\"color:#E6EDF3\">(animate);</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    const</span><span style=\"color:#79C0FF\"> resizeObserver</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#FF7B72\"> new</span><span style=\"color:#D2A8FF\"> ResizeObserver</span><span style=\"color:#E6EDF3\">(() </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">      updateCanvasSize</span><span style=\"color:#E6EDF3\">();</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    resizeObserver.</span><span style=\"color:#D2A8FF\">observe</span><span style=\"color:#E6EDF3\">(container);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    const</span><span style=\"color:#79C0FF\"> intersectionObserver</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#FF7B72\"> new</span><span style=\"color:#D2A8FF\"> IntersectionObserver</span><span style=\"color:#E6EDF3\">(</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      ([</span><span style=\"color:#FFA657\">entry</span><span style=\"color:#E6EDF3\">]) </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">        setIsInView</span><span style=\"color:#E6EDF3\">(entry.isIntersecting);</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      },</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      { threshold: </span><span style=\"color:#79C0FF\">0</span><span style=\"color:#E6EDF3\"> },</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    );</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    intersectionObserver.</span><span style=\"color:#D2A8FF\">observe</span><span style=\"color:#E6EDF3\">(canvas);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    if</span><span style=\"color:#E6EDF3\"> (isInView) {</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      animationFrameId </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#D2A8FF\"> requestAnimationFrame</span><span style=\"color:#E6EDF3\">(animate);</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    return</span><span style=\"color:#E6EDF3\"> () </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">      cancelAnimationFrame</span><span style=\"color:#E6EDF3\">(animationFrameId);</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      resizeObserver.</span><span style=\"color:#D2A8FF\">disconnect</span><span style=\"color:#E6EDF3\">();</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      intersectionObserver.</span><span style=\"color:#D2A8FF\">disconnect</span><span style=\"color:#E6EDF3\">();</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    };</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  }, [setupCanvas, updateSquares, drawGrid, width, height, isInView]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  return</span><span style=\"color:#E6EDF3\"> (</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    &#x3C;</span><span style=\"color:#7EE787\">div</span><span style=\"color:#79C0FF\"> ref</span><span style=\"color:#FF7B72\">={</span><span style=\"color:#E6EDF3\">containerRef</span><span style=\"color:#FF7B72\">}</span><span style=\"color:#79C0FF\"> className</span><span style=\"color:#FF7B72\">={</span><span style=\"color:#D2A8FF\">cn</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#A5D6FF\">`h-full w-full ${</span><span style=\"color:#E6EDF3\">className</span><span style=\"color:#A5D6FF\">}`</span><span style=\"color:#E6EDF3\">)</span><span style=\"color:#FF7B72\">}</span><span style=\"color:#FF7B72\"> {...</span><span style=\"color:#E6EDF3\">props</span><span style=\"color:#FF7B72\">}</span><span style=\"color:#E6EDF3\">></span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      &#x3C;</span><span style=\"color:#7EE787\">canvas</span></span>\n<span class=\"line\"><span style=\"color:#79C0FF\">        ref</span><span style=\"color:#FF7B72\">={</span><span style=\"color:#E6EDF3\">canvasRef</span><span style=\"color:#FF7B72\">}</span></span>\n<span class=\"line\"><span style=\"color:#79C0FF\">        className</span><span style=\"color:#FF7B72\">=</span><span style=\"color:#A5D6FF\">\"pointer-events-none\"</span></span>\n<span class=\"line\"><span style=\"color:#79C0FF\">        style</span><span style=\"color:#FF7B72\">={</span><span style=\"color:#E6EDF3\">{</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">          width: canvasSize.width,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">          height: canvasSize.height,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">        }</span><span style=\"color:#FF7B72\">}</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      /></span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    &#x3C;/</span><span style=\"color:#7EE787\">div</span><span style=\"color:#E6EDF3\">></span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  );</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">};</span></span></code></pre>",
    "sourcePath": "registry/default/ui",
    "filePath": "registry/default/ui/twinkle-grid.tsx",
    "timestamp": "2025-07-22T16:36:25.921Z"
  }
}