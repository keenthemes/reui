{
  "counting-number": {
    "code": "'use client';\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { animate, motion, useInView, UseInViewOptions, useMotionValue } from 'motion/react';\nimport { cn } from '@/lib/utils';\n\ninterface CountingNumberProps {\n  from?: number;\n  to?: number;\n  duration?: number; // seconds\n  delay?: number; // ms\n  className?: string;\n  startOnView?: boolean;\n  once?: boolean;\n  inViewMargin?: UseInViewOptions['margin'];\n  onComplete?: () => void;\n  format?: (value: number) => string;\n}\n\nexport function CountingNumber({\n  from = 0,\n  to = 100,\n  duration = 2,\n  delay = 0,\n  className,\n  startOnView = true,\n  once = false,\n  inViewMargin,\n  onComplete,\n  format,\n  ...props\n}: CountingNumberProps) {\n  const ref = useRef<HTMLSpanElement>(null);\n  const isInView = useInView(ref, { once, margin: inViewMargin });\n  const [hasAnimated, setHasAnimated] = useState(false);\n  const [display, setDisplay] = useState(from);\n  const motionValue = useMotionValue(from);\n\n  // Should start animation?\n  const shouldStart = !startOnView || (isInView && (!once || !hasAnimated));\n\n  useEffect(() => {\n    if (!shouldStart) return;\n    setHasAnimated(true);\n    const timeout = setTimeout(() => {\n      const controls = animate(motionValue, to, {\n        duration,\n        onUpdate: (v) => setDisplay(v),\n        onComplete,\n      });\n      return () => controls.stop();\n    }, delay);\n    return () => clearTimeout(timeout);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [shouldStart, from, to, duration, delay]);\n\n  return (\n    <motion.span ref={ref} className={cn('inline-block', className)} {...props}>\n      {format ? format(display) : Math.round(display)}\n    </motion.span>\n  );\n}\n",
    "highlightedCode": "<pre class=\"shiki github-dark-default\" style=\"background-color:#0d1117;color:#e6edf3\" tabindex=\"0\"><code data-line-numbers=\"\"><span class=\"line\"><span style=\"color:#A5D6FF\">'use client'</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">import</span><span style=\"color:#E6EDF3\"> React, { useEffect, useRef, useState } </span><span style=\"color:#FF7B72\">from</span><span style=\"color:#A5D6FF\"> 'react'</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">import</span><span style=\"color:#E6EDF3\"> { animate, motion, useInView, UseInViewOptions, useMotionValue } </span><span style=\"color:#FF7B72\">from</span><span style=\"color:#A5D6FF\"> 'motion/react'</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">import</span><span style=\"color:#E6EDF3\"> { cn } </span><span style=\"color:#FF7B72\">from</span><span style=\"color:#A5D6FF\"> '@/lib/utils'</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">interface</span><span style=\"color:#FFA657\"> CountingNumberProps</span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  from</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  to</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  duration</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">; </span><span style=\"color:#8B949E\">// seconds</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  delay</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">; </span><span style=\"color:#8B949E\">// ms</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  className</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#79C0FF\"> string</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  startOnView</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#79C0FF\"> boolean</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  once</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#79C0FF\"> boolean</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  inViewMargin</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#FFA657\"> UseInViewOptions</span><span style=\"color:#E6EDF3\">[</span><span style=\"color:#A5D6FF\">'margin'</span><span style=\"color:#E6EDF3\">];</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">  onComplete</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#E6EDF3\"> () </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#79C0FF\"> void</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">  format</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#E6EDF3\"> (</span><span style=\"color:#FFA657\">value</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">) </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#79C0FF\"> string</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">export</span><span style=\"color:#FF7B72\"> function</span><span style=\"color:#D2A8FF\"> CountingNumber</span><span style=\"color:#E6EDF3\">({</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  from</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#79C0FF\"> 0</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  to</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#79C0FF\"> 100</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  duration</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#79C0FF\"> 2</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  delay</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#79C0FF\"> 0</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  className</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  startOnView</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#79C0FF\"> true</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  once</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#79C0FF\"> false</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  inViewMargin</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  onComplete</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  format</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  ...</span><span style=\"color:#FFA657\">props</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">}</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#FFA657\"> CountingNumberProps</span><span style=\"color:#E6EDF3\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#79C0FF\"> ref</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#D2A8FF\"> useRef</span><span style=\"color:#E6EDF3\">&#x3C;</span><span style=\"color:#FFA657\">HTMLSpanElement</span><span style=\"color:#E6EDF3\">>(</span><span style=\"color:#79C0FF\">null</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#79C0FF\"> isInView</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#D2A8FF\"> useInView</span><span style=\"color:#E6EDF3\">(ref, { once, margin: inViewMargin });</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#E6EDF3\"> [</span><span style=\"color:#79C0FF\">hasAnimated</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#79C0FF\">setHasAnimated</span><span style=\"color:#E6EDF3\">] </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#D2A8FF\"> useState</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#79C0FF\">false</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#E6EDF3\"> [</span><span style=\"color:#79C0FF\">display</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#79C0FF\">setDisplay</span><span style=\"color:#E6EDF3\">] </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#D2A8FF\"> useState</span><span style=\"color:#E6EDF3\">(from);</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#79C0FF\"> motionValue</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#D2A8FF\"> useMotionValue</span><span style=\"color:#E6EDF3\">(from);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8B949E\">  // Should start animation?</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#79C0FF\"> shouldStart</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#FF7B72\"> !</span><span style=\"color:#E6EDF3\">startOnView </span><span style=\"color:#FF7B72\">||</span><span style=\"color:#E6EDF3\"> (isInView </span><span style=\"color:#FF7B72\">&#x26;&#x26;</span><span style=\"color:#E6EDF3\"> (</span><span style=\"color:#FF7B72\">!</span><span style=\"color:#E6EDF3\">once </span><span style=\"color:#FF7B72\">||</span><span style=\"color:#FF7B72\"> !</span><span style=\"color:#E6EDF3\">hasAnimated));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">  useEffect</span><span style=\"color:#E6EDF3\">(() </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    if</span><span style=\"color:#E6EDF3\"> (</span><span style=\"color:#FF7B72\">!</span><span style=\"color:#E6EDF3\">shouldStart) </span><span style=\"color:#FF7B72\">return</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">    setHasAnimated</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#79C0FF\">true</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    const</span><span style=\"color:#79C0FF\"> timeout</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#D2A8FF\"> setTimeout</span><span style=\"color:#E6EDF3\">(() </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      const</span><span style=\"color:#79C0FF\"> controls</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#D2A8FF\"> animate</span><span style=\"color:#E6EDF3\">(motionValue, to, {</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">        duration,</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">        onUpdate</span><span style=\"color:#E6EDF3\">: (</span><span style=\"color:#FFA657\">v</span><span style=\"color:#E6EDF3\">) </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#D2A8FF\"> setDisplay</span><span style=\"color:#E6EDF3\">(v),</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">        onComplete,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      });</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      return</span><span style=\"color:#E6EDF3\"> () </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> controls.</span><span style=\"color:#D2A8FF\">stop</span><span style=\"color:#E6EDF3\">();</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    }, delay);</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    return</span><span style=\"color:#E6EDF3\"> () </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#D2A8FF\"> clearTimeout</span><span style=\"color:#E6EDF3\">(timeout);</span></span>\n<span class=\"line\"><span style=\"color:#8B949E\">    // eslint-disable-next-line react-hooks/exhaustive-deps</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  }, [shouldStart, from, to, duration, delay]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  return</span><span style=\"color:#E6EDF3\"> (</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    &#x3C;</span><span style=\"color:#7EE787\">motion.span</span><span style=\"color:#79C0FF\"> ref</span><span style=\"color:#FF7B72\">={</span><span style=\"color:#E6EDF3\">ref</span><span style=\"color:#FF7B72\">}</span><span style=\"color:#79C0FF\"> className</span><span style=\"color:#FF7B72\">={</span><span style=\"color:#D2A8FF\">cn</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#A5D6FF\">'inline-block'</span><span style=\"color:#E6EDF3\">, className)</span><span style=\"color:#FF7B72\">}</span><span style=\"color:#FF7B72\"> {...</span><span style=\"color:#E6EDF3\">props</span><span style=\"color:#FF7B72\">}</span><span style=\"color:#E6EDF3\">></span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      {</span><span style=\"color:#E6EDF3\">format </span><span style=\"color:#FF7B72\">?</span><span style=\"color:#D2A8FF\"> format</span><span style=\"color:#E6EDF3\">(display) </span><span style=\"color:#FF7B72\">:</span><span style=\"color:#E6EDF3\"> Math.</span><span style=\"color:#D2A8FF\">round</span><span style=\"color:#E6EDF3\">(display)</span><span style=\"color:#FF7B72\">}</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    &#x3C;/</span><span style=\"color:#7EE787\">motion.span</span><span style=\"color:#E6EDF3\">></span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  );</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">}</span></span>\n<span class=\"line\"></span></code></pre>",
    "sourcePath": "registry/default/ui",
    "filePath": "registry/default/ui/counting-number.tsx",
    "timestamp": "2025-08-21T11:53:05.858Z"
  }
}