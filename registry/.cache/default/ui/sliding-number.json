{
  "sliding-number": {
    "code": "'use client';\n\nimport { useEffect, useRef, useState } from 'react';\nimport { motion, MotionValue, useInView, useSpring, useTransform } from 'framer-motion';\n\nfunction Digit({\n  place,\n  value,\n  digitHeight,\n  duration,\n}: {\n  place: number;\n  value: number;\n  digitHeight: number;\n  duration: number;\n}) {\n  const valueRoundedToPlace = Math.floor(value / place);\n  const animatedValue = useSpring(valueRoundedToPlace, {\n    duration: duration * 1000, // Convert to milliseconds\n  });\n\n  useEffect(() => {\n    animatedValue.set(valueRoundedToPlace);\n  }, [animatedValue, valueRoundedToPlace]);\n\n  return (\n    <div style={{ height: digitHeight }} className=\"relative w-[1ch] tabular-nums overflow-hidden\">\n      {Array.from({ length: 10 }, (_, i) => (\n        <Number key={i} mv={animatedValue} number={i} digitHeight={digitHeight} />\n      ))}\n    </div>\n  );\n}\n\nfunction Number({ mv, number, digitHeight }: { mv: MotionValue<number>; number: number; digitHeight: number }) {\n  const y = useTransform(mv, (latest: number) => {\n    const placeValue = latest % 10;\n    const offset = (10 + number - placeValue) % 10;\n\n    let memo = offset * digitHeight;\n\n    if (offset > 5) {\n      memo -= 10 * digitHeight;\n    }\n\n    return memo;\n  });\n\n  return (\n    <motion.span style={{ y }} className=\"absolute inset-0 flex items-center justify-center\">\n      {number}\n    </motion.span>\n  );\n}\n\ninterface SlidingNumberProps {\n  from: number;\n  to: number;\n  duration?: number;\n  delay?: number;\n  startOnView?: boolean;\n  once?: boolean;\n  className?: string;\n  onComplete?: () => void;\n  digitHeight?: number;\n}\n\nexport function SlidingNumber({\n  from,\n  to,\n  duration = 2,\n  delay = 0,\n  startOnView = true,\n  once = false,\n  className = '',\n  onComplete,\n  digitHeight = 40,\n}: SlidingNumberProps) {\n  const ref = useRef(null);\n  const isInView = useInView(ref, { once: false }); // Always use false, manage once manually\n  const [currentValue, setCurrentValue] = useState(from);\n  const [hasAnimated, setHasAnimated] = useState(false);\n  const [animationKey, setAnimationKey] = useState(0);\n\n  // Reset animation state on component mount (route changes)\n  useEffect(() => {\n    setCurrentValue(from);\n    setHasAnimated(false);\n    setAnimationKey((prev) => prev + 1);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Empty dependency array - runs on every mount\n\n  // Reset animation state when from/to values change\n  useEffect(() => {\n    setCurrentValue(from);\n    setHasAnimated(false);\n    setAnimationKey((prev) => prev + 1);\n  }, [from, to]);\n\n  // Manage animation triggering manually\n  useEffect(() => {\n    if (!startOnView || !isInView) return;\n\n    // If once=true and already animated on this mount, don't animate again\n    if (once && hasAnimated) return;\n\n    // Trigger animation\n    const timer = setTimeout(() => {\n      setAnimationKey((prev) => prev + 1);\n    }, 50);\n\n    return () => clearTimeout(timer);\n  }, [isInView, startOnView, once, hasAnimated]);\n\n  const shouldStart = !startOnView || (isInView && (!once || !hasAnimated));\n\n  useEffect(() => {\n    if (!shouldStart) return;\n    setHasAnimated(true);\n\n    const timer = setTimeout(() => {\n      const startTime = Date.now();\n      const startValue = currentValue;\n      const difference = to - startValue;\n\n      const animate = () => {\n        const elapsed = Date.now() - startTime;\n        const progress = Math.min(elapsed / (duration * 1000), 1);\n        const easeOutCubic = 1 - Math.pow(1 - progress, 3);\n        const newValue = startValue + difference * easeOutCubic;\n\n        setCurrentValue(newValue);\n\n        if (progress < 1) {\n          requestAnimationFrame(animate);\n        } else {\n          setCurrentValue(to);\n          onComplete?.();\n        }\n      };\n\n      requestAnimationFrame(animate);\n    }, delay * 1000);\n\n    return () => clearTimeout(timer);\n  }, [shouldStart, currentValue, to, duration, delay, onComplete]);\n\n  // Round the current value to avoid showing decimals during animation\n  const roundedValue = Math.round(currentValue);\n  const absValue = Math.abs(roundedValue);\n\n  // Determine the maximum number of digits needed\n  const maxDigits = Math.max(Math.abs(from).toString().length, Math.abs(to).toString().length);\n\n  // Create array of place values (1, 10, 100, 1000, etc.)\n  const places = Array.from({ length: maxDigits }, (_, i) => Math.pow(10, maxDigits - i - 1));\n\n  return (\n    <div ref={ref} className={`flex items-center ${className}`}>\n      {roundedValue < 0 && '-'}\n      {places.map((place) => (\n        <Digit\n          key={`${place}-${animationKey}`}\n          place={place}\n          value={absValue}\n          digitHeight={digitHeight}\n          duration={duration}\n        />\n      ))}\n    </div>\n  );\n}\n",
    "highlightedCode": "<pre class=\"shiki github-dark-default\" style=\"background-color:#0d1117;color:#e6edf3\" tabindex=\"0\"><code data-line-numbers=\"\"><span class=\"line\"><span style=\"color:#A5D6FF\">'use client'</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">import</span><span style=\"color:#E6EDF3\"> { useEffect, useRef, useState } </span><span style=\"color:#FF7B72\">from</span><span style=\"color:#A5D6FF\"> 'react'</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">import</span><span style=\"color:#E6EDF3\"> { motion, MotionValue, useInView, useSpring, useTransform } </span><span style=\"color:#FF7B72\">from</span><span style=\"color:#A5D6FF\"> 'framer-motion'</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">function</span><span style=\"color:#D2A8FF\"> Digit</span><span style=\"color:#E6EDF3\">({</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  place</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  value</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  digitHeight</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  duration</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">}</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  place</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  value</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  digitHeight</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  duration</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">}) {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#79C0FF\"> valueRoundedToPlace</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> Math.</span><span style=\"color:#D2A8FF\">floor</span><span style=\"color:#E6EDF3\">(value </span><span style=\"color:#FF7B72\">/</span><span style=\"color:#E6EDF3\"> place);</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#79C0FF\"> animatedValue</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#D2A8FF\"> useSpring</span><span style=\"color:#E6EDF3\">(valueRoundedToPlace, {</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    duration: duration </span><span style=\"color:#FF7B72\">*</span><span style=\"color:#79C0FF\"> 1000</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#8B949E\">// Convert to milliseconds</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">  useEffect</span><span style=\"color:#E6EDF3\">(() </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    animatedValue.</span><span style=\"color:#D2A8FF\">set</span><span style=\"color:#E6EDF3\">(valueRoundedToPlace);</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  }, [animatedValue, valueRoundedToPlace]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  return</span><span style=\"color:#E6EDF3\"> (</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    &#x3C;</span><span style=\"color:#7EE787\">div</span><span style=\"color:#79C0FF\"> style</span><span style=\"color:#FF7B72\">={</span><span style=\"color:#E6EDF3\">{ height: digitHeight }</span><span style=\"color:#FF7B72\">}</span><span style=\"color:#79C0FF\"> className</span><span style=\"color:#FF7B72\">=</span><span style=\"color:#A5D6FF\">\"relative w-[1ch] tabular-nums overflow-hidden\"</span><span style=\"color:#E6EDF3\">></span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      {</span><span style=\"color:#E6EDF3\">Array.</span><span style=\"color:#D2A8FF\">from</span><span style=\"color:#E6EDF3\">({ length: </span><span style=\"color:#79C0FF\">10</span><span style=\"color:#E6EDF3\"> }, (</span><span style=\"color:#FFA657\">_</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#FFA657\">i</span><span style=\"color:#E6EDF3\">) </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> (</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">        &#x3C;</span><span style=\"color:#7EE787\">Number</span><span style=\"color:#79C0FF\"> key</span><span style=\"color:#FF7B72\">={</span><span style=\"color:#E6EDF3\">i</span><span style=\"color:#FF7B72\">}</span><span style=\"color:#79C0FF\"> mv</span><span style=\"color:#FF7B72\">={</span><span style=\"color:#E6EDF3\">animatedValue</span><span style=\"color:#FF7B72\">}</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#FF7B72\">={</span><span style=\"color:#E6EDF3\">i</span><span style=\"color:#FF7B72\">}</span><span style=\"color:#79C0FF\"> digitHeight</span><span style=\"color:#FF7B72\">={</span><span style=\"color:#E6EDF3\">digitHeight</span><span style=\"color:#FF7B72\">}</span><span style=\"color:#E6EDF3\"> /></span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      ))</span><span style=\"color:#FF7B72\">}</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    &#x3C;/</span><span style=\"color:#7EE787\">div</span><span style=\"color:#E6EDF3\">></span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  );</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">function</span><span style=\"color:#D2A8FF\"> Number</span><span style=\"color:#E6EDF3\">({ </span><span style=\"color:#FFA657\">mv</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#FFA657\">number</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#FFA657\">digitHeight</span><span style=\"color:#E6EDF3\"> }</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#E6EDF3\"> { </span><span style=\"color:#FFA657\">mv</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#FFA657\"> MotionValue</span><span style=\"color:#E6EDF3\">&#x3C;</span><span style=\"color:#79C0FF\">number</span><span style=\"color:#E6EDF3\">>; </span><span style=\"color:#FFA657\">number</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">; </span><span style=\"color:#FFA657\">digitHeight</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\"> }) {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#79C0FF\"> y</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#D2A8FF\"> useTransform</span><span style=\"color:#E6EDF3\">(mv, (</span><span style=\"color:#FFA657\">latest</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">) </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    const</span><span style=\"color:#79C0FF\"> placeValue</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> latest </span><span style=\"color:#FF7B72\">%</span><span style=\"color:#79C0FF\"> 10</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    const</span><span style=\"color:#79C0FF\"> offset</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> (</span><span style=\"color:#79C0FF\">10</span><span style=\"color:#FF7B72\"> +</span><span style=\"color:#E6EDF3\"> number </span><span style=\"color:#FF7B72\">-</span><span style=\"color:#E6EDF3\"> placeValue) </span><span style=\"color:#FF7B72\">%</span><span style=\"color:#79C0FF\"> 10</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    let</span><span style=\"color:#E6EDF3\"> memo </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#E6EDF3\"> offset </span><span style=\"color:#FF7B72\">*</span><span style=\"color:#E6EDF3\"> digitHeight;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    if</span><span style=\"color:#E6EDF3\"> (offset </span><span style=\"color:#FF7B72\">></span><span style=\"color:#79C0FF\"> 5</span><span style=\"color:#E6EDF3\">) {</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      memo </span><span style=\"color:#FF7B72\">-=</span><span style=\"color:#79C0FF\"> 10</span><span style=\"color:#FF7B72\"> *</span><span style=\"color:#E6EDF3\"> digitHeight;</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    return</span><span style=\"color:#E6EDF3\"> memo;</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  return</span><span style=\"color:#E6EDF3\"> (</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    &#x3C;</span><span style=\"color:#7EE787\">motion.span</span><span style=\"color:#79C0FF\"> style</span><span style=\"color:#FF7B72\">={</span><span style=\"color:#E6EDF3\">{ y }</span><span style=\"color:#FF7B72\">}</span><span style=\"color:#79C0FF\"> className</span><span style=\"color:#FF7B72\">=</span><span style=\"color:#A5D6FF\">\"absolute inset-0 flex items-center justify-center\"</span><span style=\"color:#E6EDF3\">></span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      {</span><span style=\"color:#E6EDF3\">number</span><span style=\"color:#FF7B72\">}</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    &#x3C;/</span><span style=\"color:#7EE787\">motion.span</span><span style=\"color:#E6EDF3\">></span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  );</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">interface</span><span style=\"color:#FFA657\"> SlidingNumberProps</span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  from</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  to</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  duration</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  delay</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  startOnView</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#79C0FF\"> boolean</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  once</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#79C0FF\"> boolean</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  className</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#79C0FF\"> string</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">  onComplete</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#E6EDF3\"> () </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#79C0FF\"> void</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  digitHeight</span><span style=\"color:#FF7B72\">?:</span><span style=\"color:#79C0FF\"> number</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">export</span><span style=\"color:#FF7B72\"> function</span><span style=\"color:#D2A8FF\"> SlidingNumber</span><span style=\"color:#E6EDF3\">({</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  from</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  to</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  duration</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#79C0FF\"> 2</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  delay</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#79C0FF\"> 0</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  startOnView</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#79C0FF\"> true</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  once</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#79C0FF\"> false</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  className</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#A5D6FF\"> ''</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  onComplete</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFA657\">  digitHeight</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#79C0FF\"> 40</span><span style=\"color:#E6EDF3\">,</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">}</span><span style=\"color:#FF7B72\">:</span><span style=\"color:#FFA657\"> SlidingNumberProps</span><span style=\"color:#E6EDF3\">) {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#79C0FF\"> ref</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#D2A8FF\"> useRef</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#79C0FF\">null</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#79C0FF\"> isInView</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#D2A8FF\"> useInView</span><span style=\"color:#E6EDF3\">(ref, { once: </span><span style=\"color:#79C0FF\">false</span><span style=\"color:#E6EDF3\"> }); </span><span style=\"color:#8B949E\">// Always use false, manage once manually</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#E6EDF3\"> [</span><span style=\"color:#79C0FF\">currentValue</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#79C0FF\">setCurrentValue</span><span style=\"color:#E6EDF3\">] </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#D2A8FF\"> useState</span><span style=\"color:#E6EDF3\">(from);</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#E6EDF3\"> [</span><span style=\"color:#79C0FF\">hasAnimated</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#79C0FF\">setHasAnimated</span><span style=\"color:#E6EDF3\">] </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#D2A8FF\"> useState</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#79C0FF\">false</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#E6EDF3\"> [</span><span style=\"color:#79C0FF\">animationKey</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#79C0FF\">setAnimationKey</span><span style=\"color:#E6EDF3\">] </span><span style=\"color:#FF7B72\">=</span><span style=\"color:#D2A8FF\"> useState</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#79C0FF\">0</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8B949E\">  // Reset animation state on component mount (route changes)</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">  useEffect</span><span style=\"color:#E6EDF3\">(() </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">    setCurrentValue</span><span style=\"color:#E6EDF3\">(from);</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">    setHasAnimated</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#79C0FF\">false</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">    setAnimationKey</span><span style=\"color:#E6EDF3\">((</span><span style=\"color:#FFA657\">prev</span><span style=\"color:#E6EDF3\">) </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> prev </span><span style=\"color:#FF7B72\">+</span><span style=\"color:#79C0FF\"> 1</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#8B949E\">    // eslint-disable-next-line react-hooks/exhaustive-deps</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  }, []); </span><span style=\"color:#8B949E\">// Empty dependency array - runs on every mount</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8B949E\">  // Reset animation state when from/to values change</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">  useEffect</span><span style=\"color:#E6EDF3\">(() </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">    setCurrentValue</span><span style=\"color:#E6EDF3\">(from);</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">    setHasAnimated</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#79C0FF\">false</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">    setAnimationKey</span><span style=\"color:#E6EDF3\">((</span><span style=\"color:#FFA657\">prev</span><span style=\"color:#E6EDF3\">) </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> prev </span><span style=\"color:#FF7B72\">+</span><span style=\"color:#79C0FF\"> 1</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  }, [from, to]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8B949E\">  // Manage animation triggering manually</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">  useEffect</span><span style=\"color:#E6EDF3\">(() </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    if</span><span style=\"color:#E6EDF3\"> (</span><span style=\"color:#FF7B72\">!</span><span style=\"color:#E6EDF3\">startOnView </span><span style=\"color:#FF7B72\">||</span><span style=\"color:#FF7B72\"> !</span><span style=\"color:#E6EDF3\">isInView) </span><span style=\"color:#FF7B72\">return</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8B949E\">    // If once=true and already animated on this mount, don't animate again</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    if</span><span style=\"color:#E6EDF3\"> (once </span><span style=\"color:#FF7B72\">&#x26;&#x26;</span><span style=\"color:#E6EDF3\"> hasAnimated) </span><span style=\"color:#FF7B72\">return</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8B949E\">    // Trigger animation</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    const</span><span style=\"color:#79C0FF\"> timer</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#D2A8FF\"> setTimeout</span><span style=\"color:#E6EDF3\">(() </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">      setAnimationKey</span><span style=\"color:#E6EDF3\">((</span><span style=\"color:#FFA657\">prev</span><span style=\"color:#E6EDF3\">) </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> prev </span><span style=\"color:#FF7B72\">+</span><span style=\"color:#79C0FF\"> 1</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    }, </span><span style=\"color:#79C0FF\">50</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    return</span><span style=\"color:#E6EDF3\"> () </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#D2A8FF\"> clearTimeout</span><span style=\"color:#E6EDF3\">(timer);</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  }, [isInView, startOnView, once, hasAnimated]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#79C0FF\"> shouldStart</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#FF7B72\"> !</span><span style=\"color:#E6EDF3\">startOnView </span><span style=\"color:#FF7B72\">||</span><span style=\"color:#E6EDF3\"> (isInView </span><span style=\"color:#FF7B72\">&#x26;&#x26;</span><span style=\"color:#E6EDF3\"> (</span><span style=\"color:#FF7B72\">!</span><span style=\"color:#E6EDF3\">once </span><span style=\"color:#FF7B72\">||</span><span style=\"color:#FF7B72\"> !</span><span style=\"color:#E6EDF3\">hasAnimated));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">  useEffect</span><span style=\"color:#E6EDF3\">(() </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    if</span><span style=\"color:#E6EDF3\"> (</span><span style=\"color:#FF7B72\">!</span><span style=\"color:#E6EDF3\">shouldStart) </span><span style=\"color:#FF7B72\">return</span><span style=\"color:#E6EDF3\">;</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">    setHasAnimated</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#79C0FF\">true</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    const</span><span style=\"color:#79C0FF\"> timer</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#D2A8FF\"> setTimeout</span><span style=\"color:#E6EDF3\">(() </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      const</span><span style=\"color:#79C0FF\"> startTime</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> Date.</span><span style=\"color:#D2A8FF\">now</span><span style=\"color:#E6EDF3\">();</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      const</span><span style=\"color:#79C0FF\"> startValue</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> currentValue;</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      const</span><span style=\"color:#79C0FF\"> difference</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> to </span><span style=\"color:#FF7B72\">-</span><span style=\"color:#E6EDF3\"> startValue;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      const</span><span style=\"color:#D2A8FF\"> animate</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> () </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">        const</span><span style=\"color:#79C0FF\"> elapsed</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> Date.</span><span style=\"color:#D2A8FF\">now</span><span style=\"color:#E6EDF3\">() </span><span style=\"color:#FF7B72\">-</span><span style=\"color:#E6EDF3\"> startTime;</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">        const</span><span style=\"color:#79C0FF\"> progress</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> Math.</span><span style=\"color:#D2A8FF\">min</span><span style=\"color:#E6EDF3\">(elapsed </span><span style=\"color:#FF7B72\">/</span><span style=\"color:#E6EDF3\"> (duration </span><span style=\"color:#FF7B72\">*</span><span style=\"color:#79C0FF\"> 1000</span><span style=\"color:#E6EDF3\">), </span><span style=\"color:#79C0FF\">1</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">        const</span><span style=\"color:#79C0FF\"> easeOutCubic</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#79C0FF\"> 1</span><span style=\"color:#FF7B72\"> -</span><span style=\"color:#E6EDF3\"> Math.</span><span style=\"color:#D2A8FF\">pow</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#79C0FF\">1</span><span style=\"color:#FF7B72\"> -</span><span style=\"color:#E6EDF3\"> progress, </span><span style=\"color:#79C0FF\">3</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">        const</span><span style=\"color:#79C0FF\"> newValue</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> startValue </span><span style=\"color:#FF7B72\">+</span><span style=\"color:#E6EDF3\"> difference </span><span style=\"color:#FF7B72\">*</span><span style=\"color:#E6EDF3\"> easeOutCubic;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">        setCurrentValue</span><span style=\"color:#E6EDF3\">(newValue);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">        if</span><span style=\"color:#E6EDF3\"> (progress </span><span style=\"color:#FF7B72\">&#x3C;</span><span style=\"color:#79C0FF\"> 1</span><span style=\"color:#E6EDF3\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">          requestAnimationFrame</span><span style=\"color:#E6EDF3\">(animate);</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">        } </span><span style=\"color:#FF7B72\">else</span><span style=\"color:#E6EDF3\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">          setCurrentValue</span><span style=\"color:#E6EDF3\">(to);</span></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">          onComplete</span><span style=\"color:#E6EDF3\">?.();</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">        }</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D2A8FF\">      requestAnimationFrame</span><span style=\"color:#E6EDF3\">(animate);</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    }, delay </span><span style=\"color:#FF7B72\">*</span><span style=\"color:#79C0FF\"> 1000</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">    return</span><span style=\"color:#E6EDF3\"> () </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#D2A8FF\"> clearTimeout</span><span style=\"color:#E6EDF3\">(timer);</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  }, [shouldStart, currentValue, to, duration, delay, onComplete]);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8B949E\">  // Round the current value to avoid showing decimals during animation</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#79C0FF\"> roundedValue</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> Math.</span><span style=\"color:#D2A8FF\">round</span><span style=\"color:#E6EDF3\">(currentValue);</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#79C0FF\"> absValue</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> Math.</span><span style=\"color:#D2A8FF\">abs</span><span style=\"color:#E6EDF3\">(roundedValue);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8B949E\">  // Determine the maximum number of digits needed</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#79C0FF\"> maxDigits</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> Math.</span><span style=\"color:#D2A8FF\">max</span><span style=\"color:#E6EDF3\">(Math.</span><span style=\"color:#D2A8FF\">abs</span><span style=\"color:#E6EDF3\">(from).</span><span style=\"color:#D2A8FF\">toString</span><span style=\"color:#E6EDF3\">().</span><span style=\"color:#79C0FF\">length</span><span style=\"color:#E6EDF3\">, Math.</span><span style=\"color:#D2A8FF\">abs</span><span style=\"color:#E6EDF3\">(to).</span><span style=\"color:#D2A8FF\">toString</span><span style=\"color:#E6EDF3\">().</span><span style=\"color:#79C0FF\">length</span><span style=\"color:#E6EDF3\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#8B949E\">  // Create array of place values (1, 10, 100, 1000, etc.)</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  const</span><span style=\"color:#79C0FF\"> places</span><span style=\"color:#FF7B72\"> =</span><span style=\"color:#E6EDF3\"> Array.</span><span style=\"color:#D2A8FF\">from</span><span style=\"color:#E6EDF3\">({ length: maxDigits }, (</span><span style=\"color:#FFA657\">_</span><span style=\"color:#E6EDF3\">, </span><span style=\"color:#FFA657\">i</span><span style=\"color:#E6EDF3\">) </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> Math.</span><span style=\"color:#D2A8FF\">pow</span><span style=\"color:#E6EDF3\">(</span><span style=\"color:#79C0FF\">10</span><span style=\"color:#E6EDF3\">, maxDigits </span><span style=\"color:#FF7B72\">-</span><span style=\"color:#E6EDF3\"> i </span><span style=\"color:#FF7B72\">-</span><span style=\"color:#79C0FF\"> 1</span><span style=\"color:#E6EDF3\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">  return</span><span style=\"color:#E6EDF3\"> (</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    &#x3C;</span><span style=\"color:#7EE787\">div</span><span style=\"color:#79C0FF\"> ref</span><span style=\"color:#FF7B72\">={</span><span style=\"color:#E6EDF3\">ref</span><span style=\"color:#FF7B72\">}</span><span style=\"color:#79C0FF\"> className</span><span style=\"color:#FF7B72\">={</span><span style=\"color:#A5D6FF\">`flex items-center ${</span><span style=\"color:#E6EDF3\">className</span><span style=\"color:#A5D6FF\">}`</span><span style=\"color:#FF7B72\">}</span><span style=\"color:#E6EDF3\">></span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      {</span><span style=\"color:#E6EDF3\">roundedValue </span><span style=\"color:#FF7B72\">&#x3C;</span><span style=\"color:#79C0FF\"> 0</span><span style=\"color:#FF7B72\"> &#x26;&#x26;</span><span style=\"color:#A5D6FF\"> '-'</span><span style=\"color:#FF7B72\">}</span></span>\n<span class=\"line\"><span style=\"color:#FF7B72\">      {</span><span style=\"color:#E6EDF3\">places.</span><span style=\"color:#D2A8FF\">map</span><span style=\"color:#E6EDF3\">((</span><span style=\"color:#FFA657\">place</span><span style=\"color:#E6EDF3\">) </span><span style=\"color:#FF7B72\">=></span><span style=\"color:#E6EDF3\"> (</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">        &#x3C;</span><span style=\"color:#7EE787\">Digit</span></span>\n<span class=\"line\"><span style=\"color:#79C0FF\">          key</span><span style=\"color:#FF7B72\">={</span><span style=\"color:#A5D6FF\">`${</span><span style=\"color:#E6EDF3\">place</span><span style=\"color:#A5D6FF\">}-${</span><span style=\"color:#E6EDF3\">animationKey</span><span style=\"color:#A5D6FF\">}`</span><span style=\"color:#FF7B72\">}</span></span>\n<span class=\"line\"><span style=\"color:#79C0FF\">          place</span><span style=\"color:#FF7B72\">={</span><span style=\"color:#E6EDF3\">place</span><span style=\"color:#FF7B72\">}</span></span>\n<span class=\"line\"><span style=\"color:#79C0FF\">          value</span><span style=\"color:#FF7B72\">={</span><span style=\"color:#E6EDF3\">absValue</span><span style=\"color:#FF7B72\">}</span></span>\n<span class=\"line\"><span style=\"color:#79C0FF\">          digitHeight</span><span style=\"color:#FF7B72\">={</span><span style=\"color:#E6EDF3\">digitHeight</span><span style=\"color:#FF7B72\">}</span></span>\n<span class=\"line\"><span style=\"color:#79C0FF\">          duration</span><span style=\"color:#FF7B72\">={</span><span style=\"color:#E6EDF3\">duration</span><span style=\"color:#FF7B72\">}</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">        /></span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">      ))</span><span style=\"color:#FF7B72\">}</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">    &#x3C;/</span><span style=\"color:#7EE787\">div</span><span style=\"color:#E6EDF3\">></span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">  );</span></span>\n<span class=\"line\"><span style=\"color:#E6EDF3\">}</span></span>\n<span class=\"line\"></span></code></pre>",
    "sourcePath": "registry/default/ui",
    "filePath": "registry/default/ui/sliding-number.tsx",
    "timestamp": "2025-08-21T11:53:06.667Z"
  }
}